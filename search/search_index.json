{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software engineering \u4f5c\u4e3a\u4e00\u540d\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u4f1a\u53c2\u4e0e\u5230\u4e00\u4e2a\u4e00\u4e2a\u7684\u8f6f\u4ef6\u9879\u76ee\u7684\u5f00\u53d1\u4e2d\uff0c\u5728\u8fd9\u4e9b\u9879\u76ee\u4e2d\u6211\u4eec\u6240\u626e\u6f14\u7684\u89d2\u8272\u4e3a \u5f00\u53d1\u8005 \uff08 programmer / developer / coder \uff09\uff0c\u5176\u5b9e\u5bf9\u4e8e\u4e00\u4e2a\u5927\u578b\u7684\u8f6f\u4ef6\u9879\u76ee\u800c\u8a00\uff0c**\u5f00\u53d1\u8fc7\u7a0b**\u53ea\u662f\u5176\u4e2d\u4e00\u4e2a\u73af\u8282\u800c\u5df2\uff0c\u5bf9\u4e8e\u5927\u578b\u9879\u76ee\u800c\u8a00\uff0c\u5b83\u8fd8\u6d89\u53ca\u5230\u4e00\u4e9b\u5217\u95ee\u9898\uff0c\u5982\uff1a \u5982\u4f55\u6765\u7ba1\u7406\u4e00\u4e2a\u5927\u578b\u9879\u76ee\uff1f \u56e2\u961f\u5982\u4f55\u534f\u4f5c\u5f00\u53d1\uff1f \u5982\u4f55\u4fdd\u8bc1\u8f6f\u4ef6\u8d28\u91cf\uff1f \u5f53\u6211\u4eec\u5f00\u59cb\u601d\u8003\u8fd9\u4e9b\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5df2\u7ecf\u5f00\u59cb\u4e86\u4ee5\u7ba1\u7406\u8005\u7684\u89d2\u5ea6\u6765\u770b\u5f85\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\uff0c\u8fd9\u662f Software engineering \u5b66\u79d1\u6240\u7814\u7a76\u7684\u3002 \u672c\u9879\u76ee\u5c31\u662f\u4e3a\u4e86\u68b3\u7406 Software engineering \u5b66\u79d1\u800c\u521b\u5efa\u7684\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u7ed3\u5408\u4e86\u6211\u7684\u4e00\u4e9b\u5b9e\u8df5\u7ecf\u9a8c\u3002 \u7ba1\u7406\u5927\u5de5\u7a0b \u4f5c\u4e3a\u4e00\u4e2asoftware engineer\uff0c\u7ba1\u7406\u5927\u578b\u5de5\u7a0b\u662f\u4e00\u4e2a\u5408\u683c\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u9700\u8981\u5177\u5907\u7684\u80fd\u529b\uff0c\u9700\u8981\u7814\u7a76\u4e00\u4e9b\u5927\u578b\u7684\u5f00\u6e90\u8f6f\u4ef6\u7684\u7ba1\u7406\u4e4b\u9053\uff0c\u76ee\u524d\u53ef\u4ee5\u53c2\u8003\u7684\u6709\uff1a CPython Redis SQLite","title":"Introduction"},{"location":"#software#engineering","text":"\u4f5c\u4e3a\u4e00\u540d\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u4f1a\u53c2\u4e0e\u5230\u4e00\u4e2a\u4e00\u4e2a\u7684\u8f6f\u4ef6\u9879\u76ee\u7684\u5f00\u53d1\u4e2d\uff0c\u5728\u8fd9\u4e9b\u9879\u76ee\u4e2d\u6211\u4eec\u6240\u626e\u6f14\u7684\u89d2\u8272\u4e3a \u5f00\u53d1\u8005 \uff08 programmer / developer / coder \uff09\uff0c\u5176\u5b9e\u5bf9\u4e8e\u4e00\u4e2a\u5927\u578b\u7684\u8f6f\u4ef6\u9879\u76ee\u800c\u8a00\uff0c**\u5f00\u53d1\u8fc7\u7a0b**\u53ea\u662f\u5176\u4e2d\u4e00\u4e2a\u73af\u8282\u800c\u5df2\uff0c\u5bf9\u4e8e\u5927\u578b\u9879\u76ee\u800c\u8a00\uff0c\u5b83\u8fd8\u6d89\u53ca\u5230\u4e00\u4e9b\u5217\u95ee\u9898\uff0c\u5982\uff1a \u5982\u4f55\u6765\u7ba1\u7406\u4e00\u4e2a\u5927\u578b\u9879\u76ee\uff1f \u56e2\u961f\u5982\u4f55\u534f\u4f5c\u5f00\u53d1\uff1f \u5982\u4f55\u4fdd\u8bc1\u8f6f\u4ef6\u8d28\u91cf\uff1f \u5f53\u6211\u4eec\u5f00\u59cb\u601d\u8003\u8fd9\u4e9b\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5df2\u7ecf\u5f00\u59cb\u4e86\u4ee5\u7ba1\u7406\u8005\u7684\u89d2\u5ea6\u6765\u770b\u5f85\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\uff0c\u8fd9\u662f Software engineering \u5b66\u79d1\u6240\u7814\u7a76\u7684\u3002 \u672c\u9879\u76ee\u5c31\u662f\u4e3a\u4e86\u68b3\u7406 Software engineering \u5b66\u79d1\u800c\u521b\u5efa\u7684\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u7ed3\u5408\u4e86\u6211\u7684\u4e00\u4e9b\u5b9e\u8df5\u7ecf\u9a8c\u3002","title":"Software engineering"},{"location":"#_1","text":"\u4f5c\u4e3a\u4e00\u4e2asoftware engineer\uff0c\u7ba1\u7406\u5927\u578b\u5de5\u7a0b\u662f\u4e00\u4e2a\u5408\u683c\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u9700\u8981\u5177\u5907\u7684\u80fd\u529b\uff0c\u9700\u8981\u7814\u7a76\u4e00\u4e9b\u5927\u578b\u7684\u5f00\u6e90\u8f6f\u4ef6\u7684\u7ba1\u7406\u4e4b\u9053\uff0c\u76ee\u524d\u53ef\u4ee5\u53c2\u8003\u7684\u6709\uff1a CPython Redis SQLite","title":"\u7ba1\u7406\u5927\u5de5\u7a0b"},{"location":"0Requirements/","text":"Software requirements","title":"Introduction"},{"location":"0Requirements/#software#requirements","text":"","title":"Software requirements"},{"location":"1Design/","text":"\u5173\u4e8e\u672c\u5de5\u7a0b \u672c\u5de5\u7a0b\u8ba8\u8bba\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u4e00\u4e9b\u5185\u5bb9\u3002\u8f6f\u4ef6\u8bbe\u8ba1\u662f\u4e00\u4e2a\u975e\u5e38\u5bbd\u6cdb\u7684\u6982\u5ff5\uff0c\u6db5\u76d6\u7684\u5185\u5bb9\u975e\u5e38\u591a\u3002 wikipedia Software design \u8bbe\u8ba1\u7684\u5c42\u6b21 \u8bbe\u8ba1\u662f\u4e00\u4e2a\u975e\u5e38\u5bbd\u6cdb\u7684\u6982\u5ff5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7cfb\u7edf\uff0c\u4ece\u6574\u4f53\u5230\u5c40\u90e8\u3001\u4ece\u9876\u5c42\u5230\u5e95\u5c42\uff0c\u6211\u4eec\u90fd\u9700\u8981\u8fdb\u884c\u8be6\u7ec6\u7684\u8bbe\u8ba1\uff0c\u8fd9\u8bf4\u660e\u5bf9\u4e8e\u4e00\u4e2a\u5b8c\u6574\u7684\u7cfb\u7edf\uff0c\u6211\u4eec\u9700\u8981\u4ece\u5404\u4e2a\u5c42\u6b21\u5bf9\u5b83\u8fdb\u884c\u8bbe\u8ba1\u3002\u5173\u4e8e\u8bbe\u8ba1\u7684\u5c42\u6b21\uff0c\u5728 Design-pattern\\index.md \u4e2d\u8fdb\u884c\u4e86\u8f83\u597d\u7684\u603b\u7ed3\u3002 \u4e3b\u8981\u5185\u5bb9 \u672c\u8282\u7684\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b: \u7ae0\u8282 \u8bf4\u660e Principle \u8bbe\u8ba1\u7684\u539f\u5219\u3001\u601d\u8def Design-pattern \u8bbe\u8ba1\u6a21\u5f0f\uff0c\u8fd9\u662f\u5bf9\u5148\u9a71\u4eec\u6240\u603b\u7ed3\u7684\u7ecf\u9a8c\u7684\u5b66\u4e60 Tools \u63cf\u8ff0\u8bbe\u8ba1\u7684\u5de5\u5177 \u501f\u9274\u6210\u529f\u7684\u8f6f\u4ef6\u7684\u67b6\u6784 Redis SQLite clang","title":"Introduction"},{"location":"1Design/#_1","text":"\u672c\u5de5\u7a0b\u8ba8\u8bba\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u4e00\u4e9b\u5185\u5bb9\u3002\u8f6f\u4ef6\u8bbe\u8ba1\u662f\u4e00\u4e2a\u975e\u5e38\u5bbd\u6cdb\u7684\u6982\u5ff5\uff0c\u6db5\u76d6\u7684\u5185\u5bb9\u975e\u5e38\u591a\u3002","title":"\u5173\u4e8e\u672c\u5de5\u7a0b"},{"location":"1Design/#wikipedia#software#design","text":"","title":"wikipedia Software design"},{"location":"1Design/#_2","text":"\u8bbe\u8ba1\u662f\u4e00\u4e2a\u975e\u5e38\u5bbd\u6cdb\u7684\u6982\u5ff5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7cfb\u7edf\uff0c\u4ece\u6574\u4f53\u5230\u5c40\u90e8\u3001\u4ece\u9876\u5c42\u5230\u5e95\u5c42\uff0c\u6211\u4eec\u90fd\u9700\u8981\u8fdb\u884c\u8be6\u7ec6\u7684\u8bbe\u8ba1\uff0c\u8fd9\u8bf4\u660e\u5bf9\u4e8e\u4e00\u4e2a\u5b8c\u6574\u7684\u7cfb\u7edf\uff0c\u6211\u4eec\u9700\u8981\u4ece\u5404\u4e2a\u5c42\u6b21\u5bf9\u5b83\u8fdb\u884c\u8bbe\u8ba1\u3002\u5173\u4e8e\u8bbe\u8ba1\u7684\u5c42\u6b21\uff0c\u5728 Design-pattern\\index.md \u4e2d\u8fdb\u884c\u4e86\u8f83\u597d\u7684\u603b\u7ed3\u3002","title":"\u8bbe\u8ba1\u7684\u5c42\u6b21"},{"location":"1Design/#_3","text":"\u672c\u8282\u7684\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b: \u7ae0\u8282 \u8bf4\u660e Principle \u8bbe\u8ba1\u7684\u539f\u5219\u3001\u601d\u8def Design-pattern \u8bbe\u8ba1\u6a21\u5f0f\uff0c\u8fd9\u662f\u5bf9\u5148\u9a71\u4eec\u6240\u603b\u7ed3\u7684\u7ecf\u9a8c\u7684\u5b66\u4e60 Tools \u63cf\u8ff0\u8bbe\u8ba1\u7684\u5de5\u5177","title":"\u4e3b\u8981\u5185\u5bb9"},{"location":"1Design/#_4","text":"Redis SQLite clang","title":"\u501f\u9274\u6210\u529f\u7684\u8f6f\u4ef6\u7684\u67b6\u6784"},{"location":"1Design/Experience/","text":"\u8bbe\u8ba1 \u7cfb\u7edf\u7684interface\uff0c\u6bd4\u5982python\uff0credis\u7b49\u8f6f\u4ef6\uff0c\u90fd\u6709\u7740\u975e\u5e38\u597d\u7684interface\uff0c\u5305\u62ec\uff1a command line interface api configuration \u65e0\u8bba\u662fcpython\u8fd8\u662fredis\uff0c\u90fd\u63d0\u4f9b\u4e86\u975e\u5e38\u597d\u7684interface\u6765\u63a2\u7d22\u5176\u5185\u90e8\u3002","title":"Experience"},{"location":"1Design/Experience/#_1","text":"\u7cfb\u7edf\u7684interface\uff0c\u6bd4\u5982python\uff0credis\u7b49\u8f6f\u4ef6\uff0c\u90fd\u6709\u7740\u975e\u5e38\u597d\u7684interface\uff0c\u5305\u62ec\uff1a command line interface api configuration \u65e0\u8bba\u662fcpython\u8fd8\u662fredis\uff0c\u90fd\u63d0\u4f9b\u4e86\u975e\u5e38\u597d\u7684interface\u6765\u63a2\u7d22\u5176\u5185\u90e8\u3002","title":"\u8bbe\u8ba1"},{"location":"1Design/Commonality-and-variability-analysis/","text":"Commonality-variability analysis \"commonality variability analysis\"\u662f\u6211\u5728\u9605\u8bfbwikipedia Modern C++ Design # Policy-based design \u65f6\uff0c\u53d1\u73b0\u7684: The main idea is to use commonality-variability analysis to divide the type into the fixed implementation and interface, the policy-based class, and the different policies. The trick is to know what goes into the main class, and what policies should one create. Implementation \"Commonality-variability analysis\"\u544a\u8bc9\u4e86\u6211\u4eec\u5206\u6790\u65b9\u6cd5\uff0c\u5728\u8fdb\u884c\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6: Program to an abstraction and polymorphism commonality \u516c\u5171\uff0c\u5bf9\u5e94\u7684\u662fcode reuse\uff1b variability \u53ef\u53d8\uff0c\u5dee\u5f02\uff0c\u5bf9\u5e94\u7684\u662fabstraction \u548c polymorphism\uff1b Example \u5728 jianshu \u7b56\u7565\u6a21\u5f0f(Strategy Pattern) \u4e2d\u4e5f\u6d89\u53ca\u4e86\u8fd9\u4e2atopic\u3002 TODO informit Commonality/Variability and Abstract Classes https://www.oreilly.com/library/view/essential-skills-for/9780321700469/ch10.html https://www.oreilly.com/library/view/design-patterns-explained/0201715945/0201715945_ch21lev1sec4.html https://www.dre.vanderbilt.edu/~schmidt/PDF/Commonality_Variability.pdf https://portal.netobjectives.com/wp-content/uploads/2018/01/Introduction_CommonalityVariabilityAnalysis.pdf https://portal.netobjectives.com/pages/learning/webinars-and-podcasts/commonality-variability-analysis/","title":"Introduction"},{"location":"1Design/Commonality-and-variability-analysis/#commonality-variability#analysis","text":"\"commonality variability analysis\"\u662f\u6211\u5728\u9605\u8bfbwikipedia Modern C++ Design # Policy-based design \u65f6\uff0c\u53d1\u73b0\u7684: The main idea is to use commonality-variability analysis to divide the type into the fixed implementation and interface, the policy-based class, and the different policies. The trick is to know what goes into the main class, and what policies should one create.","title":"Commonality-variability analysis"},{"location":"1Design/Commonality-and-variability-analysis/#implementation","text":"\"Commonality-variability analysis\"\u544a\u8bc9\u4e86\u6211\u4eec\u5206\u6790\u65b9\u6cd5\uff0c\u5728\u8fdb\u884c\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6:","title":"Implementation"},{"location":"1Design/Commonality-and-variability-analysis/#program#to#an#abstraction#and#polymorphism","text":"commonality \u516c\u5171\uff0c\u5bf9\u5e94\u7684\u662fcode reuse\uff1b variability \u53ef\u53d8\uff0c\u5dee\u5f02\uff0c\u5bf9\u5e94\u7684\u662fabstraction \u548c polymorphism\uff1b","title":"Program to an abstraction and polymorphism"},{"location":"1Design/Commonality-and-variability-analysis/#example","text":"\u5728 jianshu \u7b56\u7565\u6a21\u5f0f(Strategy Pattern) \u4e2d\u4e5f\u6d89\u53ca\u4e86\u8fd9\u4e2atopic\u3002","title":"Example"},{"location":"1Design/Commonality-and-variability-analysis/#todo","text":"informit Commonality/Variability and Abstract Classes https://www.oreilly.com/library/view/essential-skills-for/9780321700469/ch10.html https://www.oreilly.com/library/view/design-patterns-explained/0201715945/0201715945_ch21lev1sec4.html https://www.dre.vanderbilt.edu/~schmidt/PDF/Commonality_Variability.pdf https://portal.netobjectives.com/wp-content/uploads/2018/01/Introduction_CommonalityVariabilityAnalysis.pdf https://portal.netobjectives.com/pages/learning/webinars-and-podcasts/commonality-variability-analysis/","title":"TODO"},{"location":"1Design/Decompose-and-assemble/","text":"Decompose and assemble \u8fd9\u662f\u6211\u5728\u9605\u8bfb wikipedia Modern C++ Design #Policy-based design \u65f6\uff0c\u53d1\u73b0\u5176\u4e2d\u5e94\u7528\u4e86decompose\u3001assemble\u8fd9\u4e24\u4e2a\u8bcd\uff0c\u8054\u60f3\u5230OOP assemble(\u53c2\u89c1 Theory\\Programming-paradigm\\Object-oriented-programming\\Assemble )\uff0c\u89c9\u5f97\u6709\u5fc5\u8981\u4ee5\u6b64\u6765\u4f5c\u4e3a\u4e00\u4e2atopic\u3002 decompose \u610f\u601d\u662f \"\u5206\"\u3001assemble \u610f\u601d\u662f \"\u548c\"\u3002 How to decompose? static responsibility principle layer architecture Commonality-and-variability-analysis \u8054\u60f3: COM compiler M N code reuse microservice Interface \u5206\u89e3\u540e\u5c31\u9700\u8981\u4e3a\u4e0d\u540c\u7684component\u4e4b\u95f4\u7ea6\u5b9ainterface \u7d20\u6750: wikipedia Modern C++ Design #Policy-based design","title":"Introduction"},{"location":"1Design/Decompose-and-assemble/#decompose#and#assemble","text":"\u8fd9\u662f\u6211\u5728\u9605\u8bfb wikipedia Modern C++ Design #Policy-based design \u65f6\uff0c\u53d1\u73b0\u5176\u4e2d\u5e94\u7528\u4e86decompose\u3001assemble\u8fd9\u4e24\u4e2a\u8bcd\uff0c\u8054\u60f3\u5230OOP assemble(\u53c2\u89c1 Theory\\Programming-paradigm\\Object-oriented-programming\\Assemble )\uff0c\u89c9\u5f97\u6709\u5fc5\u8981\u4ee5\u6b64\u6765\u4f5c\u4e3a\u4e00\u4e2atopic\u3002 decompose \u610f\u601d\u662f \"\u5206\"\u3001assemble \u610f\u601d\u662f \"\u548c\"\u3002","title":"Decompose and assemble"},{"location":"1Design/Decompose-and-assemble/#how#to#decompose","text":"static responsibility principle layer architecture Commonality-and-variability-analysis \u8054\u60f3: COM compiler M N code reuse microservice","title":"How to decompose?"},{"location":"1Design/Decompose-and-assemble/#interface","text":"\u5206\u89e3\u540e\u5c31\u9700\u8981\u4e3a\u4e0d\u540c\u7684component\u4e4b\u95f4\u7ea6\u5b9ainterface \u7d20\u6750: wikipedia Modern C++ Design #Policy-based design","title":"Interface"},{"location":"1Design/Design-pattern/","text":"Software design pattern \u201csoftware \u7684sing pattern\u201d\u5373\u8f6f\u4ef6\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u662f\u524d\u4eba\u603b\u7ed3\u7684\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\u7684\u6700\u4f73\u5b9e\u8df5\uff08 best practice \uff09\u3002\u6211\u4eec\u5e73\u65f6\u63d0\u53cadesign pattern\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u7b2c\u4e00\u53cd\u5e94\u662f Object-oriented design pattern\uff0c\u5176\u5b9edesign pattern\u4e0d\u4ec5\u9650\u4e8e Object-oriented programming\uff0c\u5728\u5404\u4e2a\u9886\u57df\u4e2d\uff0c\u90fd\u80fd\u591f\u603b\u7ed3\u51fa domain-specific patterns \u3002 \u7ef4\u57fa\u767e\u79d1 Software design pattern In software engineering , a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design . It is not a finished design that can be transformed directly into source or machine code . It is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system. NOTE: design pattern\u662fformalized best practices Object-oriented design patterns typically show relationships and interactions between classes or objects , without specifying the final application classes or objects that are involved. Patterns that imply mutable\uff08\u53ef\u53d8\u7684\uff09 state may be unsuited for functional programming languages, some patterns can be rendered unnecessary in languages that have built-in support for solving the problem they are trying to solve, and object-oriented patterns are not necessarily suitable for non-object-oriented languages. NOTE: \u5173\u4e8efunctional programming\uff0c\u53c2\u89c1 Theory\\Programming-paradigm\\Functional-programming \u7ae0\u8282\u3002 Practice Design patterns can speed up the development process by providing tested, proven development paradigms. Effective software design requires considering issues that may not become visible until later in the implementation. Freshly written code can often have hidden subtle issues that take time to be detected, issues that sometimes can cause major problems down the road. Reusing design patterns helps to prevent such subtle issues , and it also improves code readability for coders and architects who are familiar with the patterns. NOTE: \u4f7f\u7528design pattern\u7684\u4f18\u52bf\u3002 software design\u548c \u57ce\u5e02\u89c4\u5212 \u6709\u70b9\u7c7b\u4f3c\uff0c\u90fd\u9700\u8981\u4ee5\u53d1\u5c55\u7684\u773c\u5149\u6765\u8fdb\u884c\u89c4\u5212\u3002 In order to achieve flexibility, design patterns usually introduce additional levels of indirection , which in some cases may complicate the resulting designs and hurt application performance. NOTE: \u53c2\u89c1\u6587\u7ae0 \u5206\u5c42 \u3001\u6587\u7ae0 Create-larger-concept.md \u3002 By definition, a pattern must be programmed anew\uff08\u91cd\u65b0\uff0c\u518d\u6b21\uff09 into each application that uses it. Since some authors see this as a step backward from software reuse as provided by components , researchers have worked to turn patterns into components. Meyer and Arnout were able to provide full or partial componentization of two-thirds of the patterns they attempted. Software design techniques are difficult to apply to a broader range of problems. Design patterns provide general solutions, documented in a format that does not require specifics tied to a particular problem. Classification design pattern\u5982\u6b64\u4e4b\u591a\uff0c\u5982\u4f55\u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u7c7b\u81f3\u5173\u91cd\u8981\uff0c\u8fd9\u662f\u672c\u8282\u9700\u8981\u8ba8\u8bba\u7684\u95ee\u9898\uff0c\u672c\u8282\u7684\u5185\u5bb9\u53c2\u8003\u81ea\uff1a \u7ef4\u57fa\u767e\u79d1Software design pattern#Classification and list refactoring Classification of patterns \u7ef4\u57fa\u767e\u79d1 Design Patterns refactoring Classification of patterns Design patterns differ by their complexity, level of detail and scale of applicability to the entire system being designed. I like the analogy to road construction: you can make an intersection\uff08\u5341\u5b57\u8def\u53e3\uff09 safer by either installing some traffic lights or building an entire multi-level interchange with underground passages for pedestrians\uff08\u884c\u4eba\uff09. The most basic and low-level patterns are often called idioms . They usually apply only to a single programming language. The most universal and high-level patterns are architectural patterns . Developers can implement these patterns in virtually any language. Unlike other patterns, they can be used to design the architecture of an entire application. In addition, all patterns can be categorized by their intent , or purpose. \u8fd9\u6bb5\u603b\u7ed3\u662f\u975e\u5e38\u597d\u7684\uff0c\u5728c++\u4e2d\uff0c\u6211\u4eec\u603b\u7ed3\u4e86 More C++ Idioms \uff0c\u663e\u7136idiom\u662flanguage-specific\uff0c\u5b83\u662f\u67d0\u79cd\u5177\u4f53\u7684programming\u7684pattern\u3002\u6211\u4eec\u5e73\u65f6\u6700\u6700\u5e38\u542c\u8bf4\u7684design pattern\uff0c\u5f80\u5f80\u6307\u7684\u662f\u7684OOP\u7684pattern\uff0c\u663e\u7136\u53ea\u8981\u67d0\u79cdprogramming language\u652f\u6301OOP\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528OOP design pattern\uff0c\u663e\u7136\u5b83\u662fprogramming-paradigm-specific\u7684\u3002\u6700\u6700universal\u3001hight-level\u7684\u662f architectural patterns \uff0c\u663e\u7136\u5b83\u4e0d\u662f\u9762\u5411\u67d0\u79cd\u5177\u4f53\u7684programming language\u3001\u67d0\u79cd\u5177\u4f53\u7684programming paradigm\u7684\uff0c\u5b83\u662f\u9762\u5411application\u7684\uff0c\u6bd4\u5982web application\u3002\u4e0b\u9762\u4ee5\u8868\u683c\u7684\u5f62\u5f0f\u5bf9\u8fd9\u6bb5\u5185\u5bb9\u8fdb\u884c\u6574\u7406: \u8bf4\u660e example Language-specific pattern \u67d0\u79cd\u5177\u4f53\u7684programming\u7684pattern More C++ Idioms Programming-paradigm-specific pattern \u67d0\u79cd\u5177\u4f53\u7684programming paradigm\u7684pattern OOP design pattern Application-specific pattern \u9762\u5411\u67d0\u79cdapplication\u7684pattern Architectural design pattern \u7ef4\u57fa\u767e\u79d1 Software design pattern : Design patterns were originally grouped into the categories: creational patterns , structural patterns , and behavioral patterns , and described using the concepts of delegation , aggregation , and consultation . For further background on object-oriented design, see coupling and cohesion , inheritance , interface , and polymorphism . Another classification has also introduced the notion of architectural design pattern that may be applied at the architecture level of the software such as the Model\u2013View\u2013Controller pattern. OOP design pattern \u5728\u5de5\u7a0bprogramming-language\u7684 Theory\\Design-pattern\\OOP-design-pattern \u7ae0\u8282\u8fdb\u884c\u8be6\u7ec6\u63cf\u8ff0\u3002 Concurrency patterns \u53c2\u89c1\u5de5\u7a0bParallel-computing\u7684 Concurrent-computing\\Design-pattern \u7ae0\u8282\u3002 Architectural design pattern \u53c2\u89c1 Software-design\\Design-pattern\\Architecture-pattern \u7ae0\u8282\u3002","title":"Introduction"},{"location":"1Design/Design-pattern/#software#design#pattern","text":"\u201csoftware \u7684sing pattern\u201d\u5373\u8f6f\u4ef6\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u662f\u524d\u4eba\u603b\u7ed3\u7684\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\u7684\u6700\u4f73\u5b9e\u8df5\uff08 best practice \uff09\u3002\u6211\u4eec\u5e73\u65f6\u63d0\u53cadesign pattern\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u7b2c\u4e00\u53cd\u5e94\u662f Object-oriented design pattern\uff0c\u5176\u5b9edesign pattern\u4e0d\u4ec5\u9650\u4e8e Object-oriented programming\uff0c\u5728\u5404\u4e2a\u9886\u57df\u4e2d\uff0c\u90fd\u80fd\u591f\u603b\u7ed3\u51fa domain-specific patterns \u3002","title":"Software design pattern"},{"location":"1Design/Design-pattern/#software#design#pattern_1","text":"In software engineering , a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design . It is not a finished design that can be transformed directly into source or machine code . It is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system. NOTE: design pattern\u662fformalized best practices Object-oriented design patterns typically show relationships and interactions between classes or objects , without specifying the final application classes or objects that are involved. Patterns that imply mutable\uff08\u53ef\u53d8\u7684\uff09 state may be unsuited for functional programming languages, some patterns can be rendered unnecessary in languages that have built-in support for solving the problem they are trying to solve, and object-oriented patterns are not necessarily suitable for non-object-oriented languages. NOTE: \u5173\u4e8efunctional programming\uff0c\u53c2\u89c1 Theory\\Programming-paradigm\\Functional-programming \u7ae0\u8282\u3002","title":"\u7ef4\u57fa\u767e\u79d1Software design pattern"},{"location":"1Design/Design-pattern/#practice","text":"Design patterns can speed up the development process by providing tested, proven development paradigms. Effective software design requires considering issues that may not become visible until later in the implementation. Freshly written code can often have hidden subtle issues that take time to be detected, issues that sometimes can cause major problems down the road. Reusing design patterns helps to prevent such subtle issues , and it also improves code readability for coders and architects who are familiar with the patterns. NOTE: \u4f7f\u7528design pattern\u7684\u4f18\u52bf\u3002 software design\u548c \u57ce\u5e02\u89c4\u5212 \u6709\u70b9\u7c7b\u4f3c\uff0c\u90fd\u9700\u8981\u4ee5\u53d1\u5c55\u7684\u773c\u5149\u6765\u8fdb\u884c\u89c4\u5212\u3002 In order to achieve flexibility, design patterns usually introduce additional levels of indirection , which in some cases may complicate the resulting designs and hurt application performance. NOTE: \u53c2\u89c1\u6587\u7ae0 \u5206\u5c42 \u3001\u6587\u7ae0 Create-larger-concept.md \u3002 By definition, a pattern must be programmed anew\uff08\u91cd\u65b0\uff0c\u518d\u6b21\uff09 into each application that uses it. Since some authors see this as a step backward from software reuse as provided by components , researchers have worked to turn patterns into components. Meyer and Arnout were able to provide full or partial componentization of two-thirds of the patterns they attempted. Software design techniques are difficult to apply to a broader range of problems. Design patterns provide general solutions, documented in a format that does not require specifics tied to a particular problem.","title":"Practice"},{"location":"1Design/Design-pattern/#classification","text":"design pattern\u5982\u6b64\u4e4b\u591a\uff0c\u5982\u4f55\u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u7c7b\u81f3\u5173\u91cd\u8981\uff0c\u8fd9\u662f\u672c\u8282\u9700\u8981\u8ba8\u8bba\u7684\u95ee\u9898\uff0c\u672c\u8282\u7684\u5185\u5bb9\u53c2\u8003\u81ea\uff1a \u7ef4\u57fa\u767e\u79d1Software design pattern#Classification and list refactoring Classification of patterns \u7ef4\u57fa\u767e\u79d1 Design Patterns","title":"Classification"},{"location":"1Design/Design-pattern/#refactoring#classification#of#patterns","text":"Design patterns differ by their complexity, level of detail and scale of applicability to the entire system being designed. I like the analogy to road construction: you can make an intersection\uff08\u5341\u5b57\u8def\u53e3\uff09 safer by either installing some traffic lights or building an entire multi-level interchange with underground passages for pedestrians\uff08\u884c\u4eba\uff09. The most basic and low-level patterns are often called idioms . They usually apply only to a single programming language. The most universal and high-level patterns are architectural patterns . Developers can implement these patterns in virtually any language. Unlike other patterns, they can be used to design the architecture of an entire application. In addition, all patterns can be categorized by their intent , or purpose. \u8fd9\u6bb5\u603b\u7ed3\u662f\u975e\u5e38\u597d\u7684\uff0c\u5728c++\u4e2d\uff0c\u6211\u4eec\u603b\u7ed3\u4e86 More C++ Idioms \uff0c\u663e\u7136idiom\u662flanguage-specific\uff0c\u5b83\u662f\u67d0\u79cd\u5177\u4f53\u7684programming\u7684pattern\u3002\u6211\u4eec\u5e73\u65f6\u6700\u6700\u5e38\u542c\u8bf4\u7684design pattern\uff0c\u5f80\u5f80\u6307\u7684\u662f\u7684OOP\u7684pattern\uff0c\u663e\u7136\u53ea\u8981\u67d0\u79cdprogramming language\u652f\u6301OOP\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528OOP design pattern\uff0c\u663e\u7136\u5b83\u662fprogramming-paradigm-specific\u7684\u3002\u6700\u6700universal\u3001hight-level\u7684\u662f architectural patterns \uff0c\u663e\u7136\u5b83\u4e0d\u662f\u9762\u5411\u67d0\u79cd\u5177\u4f53\u7684programming language\u3001\u67d0\u79cd\u5177\u4f53\u7684programming paradigm\u7684\uff0c\u5b83\u662f\u9762\u5411application\u7684\uff0c\u6bd4\u5982web application\u3002\u4e0b\u9762\u4ee5\u8868\u683c\u7684\u5f62\u5f0f\u5bf9\u8fd9\u6bb5\u5185\u5bb9\u8fdb\u884c\u6574\u7406: \u8bf4\u660e example Language-specific pattern \u67d0\u79cd\u5177\u4f53\u7684programming\u7684pattern More C++ Idioms Programming-paradigm-specific pattern \u67d0\u79cd\u5177\u4f53\u7684programming paradigm\u7684pattern OOP design pattern Application-specific pattern \u9762\u5411\u67d0\u79cdapplication\u7684pattern Architectural design pattern \u7ef4\u57fa\u767e\u79d1 Software design pattern : Design patterns were originally grouped into the categories: creational patterns , structural patterns , and behavioral patterns , and described using the concepts of delegation , aggregation , and consultation . For further background on object-oriented design, see coupling and cohesion , inheritance , interface , and polymorphism . Another classification has also introduced the notion of architectural design pattern that may be applied at the architecture level of the software such as the Model\u2013View\u2013Controller pattern.","title":"refactoring Classification of patterns"},{"location":"1Design/Design-pattern/#oop#design#pattern","text":"\u5728\u5de5\u7a0bprogramming-language\u7684 Theory\\Design-pattern\\OOP-design-pattern \u7ae0\u8282\u8fdb\u884c\u8be6\u7ec6\u63cf\u8ff0\u3002","title":"OOP design pattern"},{"location":"1Design/Design-pattern/#concurrency#patterns","text":"\u53c2\u89c1\u5de5\u7a0bParallel-computing\u7684 Concurrent-computing\\Design-pattern \u7ae0\u8282\u3002","title":"Concurrency patterns"},{"location":"1Design/Design-pattern/#architectural#design#pattern","text":"\u53c2\u89c1 Software-design\\Design-pattern\\Architecture-pattern \u7ae0\u8282\u3002","title":"Architectural design pattern"},{"location":"1Design/Design-pattern/Architecture-pattern/","text":"\u5173\u4e8e\u672c\u5de5\u7a0b \u672c\u5de5\u7a0b\u8ba8\u8bba\u7684\u8bdd\u9898\u662fsoftware architecture\uff0c\u5373\u8f6f\u4ef6\u67b6\u6784\uff0c\u5728\u6587\u7ae0Abstraction and architecture # \u548c\u6587\u7ae0\u5206\u5c42 # \u4e2d\uff0c\u6211\u5df2\u7ecf\u8ba8\u8bba\u4e86architecture\u76f8\u5173\u7684\u95ee\u9898\uff0c\u672c\u5de5\u7a0b\u5c06\u5c31\u8fd9\u4e2a\u8bdd\u9898\u8fdb\u884c\u6269\u5c55\u3002","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/#_1","text":"\u672c\u5de5\u7a0b\u8ba8\u8bba\u7684\u8bdd\u9898\u662fsoftware architecture\uff0c\u5373\u8f6f\u4ef6\u67b6\u6784\uff0c\u5728\u6587\u7ae0Abstraction and architecture # \u548c\u6587\u7ae0\u5206\u5c42 # \u4e2d\uff0c\u6211\u5df2\u7ecf\u8ba8\u8bba\u4e86architecture\u76f8\u5173\u7684\u95ee\u9898\uff0c\u672c\u5de5\u7a0b\u5c06\u5c31\u8fd9\u4e2a\u8bdd\u9898\u8fdb\u884c\u6269\u5c55\u3002","title":"\u5173\u4e8e\u672c\u5de5\u7a0b"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/","text":"Middleware \"middleware\"\u5373\"\u4e2d\u95f4\u4ef6\"\u3002 wikipedia Middleware Middleware is a computer software that provides services to software applications beyond those available from the operating system. It can be described as \"software glue\".[ 1] Middleware makes it easier for software developers to implement communication and input/output , so they can focus on the specific purpose of their application. It gained popularity in the 1980s as a solution to the problem of how to link newer applications to older legacy systems, although the term had been in use since 1968.[ 2] NOTE: \u8ba9\u7528\u6237\u4e13\u6ce8\u4e8e\u4e1a\u52a1\u5f00\u53d1\uff0c\u800c\u65e0\u9700\u5173\u6ce8IO\u7b49\u5e95\u5c42\u516c\u5171\u4e8b\u7269\u3002","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/#middleware","text":"\"middleware\"\u5373\"\u4e2d\u95f4\u4ef6\"\u3002","title":"Middleware"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/#wikipedia#middleware","text":"Middleware is a computer software that provides services to software applications beyond those available from the operating system. It can be described as \"software glue\".[ 1] Middleware makes it easier for software developers to implement communication and input/output , so they can focus on the specific purpose of their application. It gained popularity in the 1980s as a solution to the problem of how to link newer applications to older legacy systems, although the term had been in use since 1968.[ 2] NOTE: \u8ba9\u7528\u6237\u4e13\u6ce8\u4e8e\u4e1a\u52a1\u5f00\u53d1\uff0c\u800c\u65e0\u9700\u5173\u6ce8IO\u7b49\u5e95\u5c42\u516c\u5171\u4e8b\u7269\u3002","title":"wikipedia Middleware"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/","text":"Message-oriented middleware \u8fd9\u662f\u975e\u5e38\u5e38\u89c1\u7684\u4e00\u79cd\u67b6\u6784\u3002 wikipedia Message-oriented middleware Message-oriented middleware ( MOM ) is software or hardware infrastructure supporting sending and receiving messages between distributed systems . MOM allows application modules to be distributed over heterogeneous(\u5f02\u8d28\u7684) platforms and reduces the complexity of developing applications that span\uff08\u8de8\u8d8a\uff09 multiple operating systems and network protocols . The middleware creates a distributed communications layer that insulates\uff08\u9694\u79bb\uff09 the application developer from the details of the various operating systems and network interfaces. APIs that extend across diverse platforms and networks are typically provided by MOM.[ 1] This middleware layer allows software components (applications, Enterprise JavaBeans, servlets, and other components) that have been developed independently and that run on different networked platforms to interact with one another. Applications distributed on different network nodes use the application interface to communicate. In addition, by providing an administrative interface, this new, virtual system of interconnected applications can be made reliable and secure.[ 2] MOM provides software elements that reside in all communicating components of a client/server architecture and typically support asynchronous calls between the client and server applications. MOM reduces the involvement\uff08\u53c2\u4e0e\uff09 of application developers with the complexity of the master-slave nature of the client/server mechanism. Middleware categories 1\u3001 Remote Procedure Call or RPC-based middleware 2\u3001 Object Request Broker or ORB-based middleware 3\u3001Message Oriented Middleware or MOM-based middleware Case Python celery \u4eca\u5929\u770b\u4e86Wikipedia\u4e0a\u5173\u4e8e celery \u7684\u4ecb\u7ecd\uff0c\u5176\u4e2d\u63d0\u53cacelery\u5c5e\u4e8e Message-oriented middleware \u3002 Apache Thrift Oracle Tuxedo Oracle Tuxedo wikipedia Tuxedo (software) POCO-PRO C++ FRAMEWORKS HS CRES \u5b9e\u73b0\u5171\u6027 \u4e00\u3001application protocol \u4e8c\u3001concurrency model \u4e09\u3001code generator \u56db\u3001\u8def\u7531\u3001event dispatch\u3001event handler event dispatch\u6700\u5e38\u89c1\u7684\u662f\u4f7f\u7528hash map\u6765\u5b58\u50a8PK\u548chandler\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#message-oriented#middleware","text":"\u8fd9\u662f\u975e\u5e38\u5e38\u89c1\u7684\u4e00\u79cd\u67b6\u6784\u3002","title":"Message-oriented middleware"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#wikipedia#message-oriented#middleware","text":"Message-oriented middleware ( MOM ) is software or hardware infrastructure supporting sending and receiving messages between distributed systems . MOM allows application modules to be distributed over heterogeneous(\u5f02\u8d28\u7684) platforms and reduces the complexity of developing applications that span\uff08\u8de8\u8d8a\uff09 multiple operating systems and network protocols . The middleware creates a distributed communications layer that insulates\uff08\u9694\u79bb\uff09 the application developer from the details of the various operating systems and network interfaces. APIs that extend across diverse platforms and networks are typically provided by MOM.[ 1] This middleware layer allows software components (applications, Enterprise JavaBeans, servlets, and other components) that have been developed independently and that run on different networked platforms to interact with one another. Applications distributed on different network nodes use the application interface to communicate. In addition, by providing an administrative interface, this new, virtual system of interconnected applications can be made reliable and secure.[ 2] MOM provides software elements that reside in all communicating components of a client/server architecture and typically support asynchronous calls between the client and server applications. MOM reduces the involvement\uff08\u53c2\u4e0e\uff09 of application developers with the complexity of the master-slave nature of the client/server mechanism.","title":"wikipedia Message-oriented middleware"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#middleware#categories","text":"1\u3001 Remote Procedure Call or RPC-based middleware 2\u3001 Object Request Broker or ORB-based middleware 3\u3001Message Oriented Middleware or MOM-based middleware","title":"Middleware categories"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#case","text":"","title":"Case"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#python#celery","text":"\u4eca\u5929\u770b\u4e86Wikipedia\u4e0a\u5173\u4e8e celery \u7684\u4ecb\u7ecd\uff0c\u5176\u4e2d\u63d0\u53cacelery\u5c5e\u4e8e Message-oriented middleware \u3002","title":"Python celery"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#apache#thrift","text":"","title":"Apache Thrift"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#oracle#tuxedo","text":"Oracle Tuxedo wikipedia Tuxedo (software)","title":"Oracle Tuxedo"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#poco-pro#c#frameworks","text":"","title":"POCO-PRO C++ FRAMEWORKS"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#hs#cres","text":"","title":"HS CRES"},{"location":"1Design/Design-pattern/Architecture-pattern/Middleware/Message-oriented-middleware/#_1","text":"\u4e00\u3001application protocol \u4e8c\u3001concurrency model \u4e09\u3001code generator \u56db\u3001\u8def\u7531\u3001event dispatch\u3001event handler event dispatch\u6700\u5e38\u89c1\u7684\u662f\u4f7f\u7528hash map\u6765\u5b58\u50a8PK\u548chandler\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb","title":"\u5b9e\u73b0\u5171\u6027"},{"location":"1Design/Design-pattern/Architecture-pattern/Monolithic-and-micro/","text":"\u5173\u4e8e\u672c\u7ae0 Multitier architecture VS Monolithic application TODO: \u5c06\u5728 The Structure of a Compiler \u4e2d\u6240\u603b\u7ed3\u7684\u5173\u4e8ecompiler\u7684\u67b6\u6784\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u8fd9\u91cc\u3002 Monolithic VS micro Monolithic Architecture and Microservices Concepts- Cloud Computing Microservices Monolithic kernel vs Microkernel","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Monolithic-and-micro/#_1","text":"","title":"\u5173\u4e8e\u672c\u7ae0"},{"location":"1Design/Design-pattern/Architecture-pattern/Monolithic-and-micro/#multitier#architecture#vs#monolithic#application","text":"TODO: \u5c06\u5728 The Structure of a Compiler \u4e2d\u6240\u603b\u7ed3\u7684\u5173\u4e8ecompiler\u7684\u67b6\u6784\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u8fd9\u91cc\u3002","title":"Multitier architecture VS Monolithic application"},{"location":"1Design/Design-pattern/Architecture-pattern/Monolithic-and-micro/#monolithic#vs#micro","text":"Monolithic Architecture and Microservices Concepts- Cloud Computing Microservices Monolithic kernel vs Microkernel","title":"Monolithic VS micro"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/","text":"Multilayered architecture wikipedia Multitier architecture oreilly Software Architecture Patterns by Mark Richards # Chapter 1. Layered Architecture openclassrooms Layered Architecture herbertograca Layered Architecture","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/#multilayered#architecture","text":"","title":"Multilayered architecture"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/#wikipedia#multitier#architecture","text":"","title":"wikipedia Multitier architecture"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/#oreilly#software#architecture#patterns#by#mark#richards#chapter#1#layered#architecture","text":"","title":"oreilly Software Architecture Patterns by Mark Richards # Chapter 1. Layered Architecture"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/#openclassrooms#layered#architecture","text":"","title":"openclassrooms Layered Architecture"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/#herbertograca#layered#architecture","text":"","title":"herbertograca Layered Architecture"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/","text":"\u5206\u5c42 \u4e00\u79cd\u5e38\u89c1\u7684\u67b6\u6784\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\uff0c\u5177\u4f53\u53c2\u89c1 abstraction layer \uff0c\u8fd9\u662fabstraction\u5728architecture\u9886\u57df\u7684\u4e00\u4e2a\u4f53\u73b0\u3002\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684 abstraction layer \u601d\u60f3\u7684\u53ef\u8c13\u7531\u6765\u5df2\u4e45\u4e14\u5f71\u54cd\u6df1\u8fdc\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u65b9\u65b9\u9762\u9762\u6211\u4eec\u90fd\u80fd\u591f\u770b\u5230\u5b83\u7684\u8eab\u5f71\u548c\u5f71\u54cd\uff0c\u540e\u9762\u4e3a\u4e86\u63cf\u8ff0\u4fbf\u5229\uff0c\u5c06 abstraction layer \u601d\u60f3\u7b80\u79f0\u4e3a**\u5206\u5c42\u601d\u60f3**\u3002\u6700\u80fd\u591f\u4f53\u73b0**\u5206\u5c42\u601d\u60f3**\u7684\u4e00\u4e2a\u8bcd\u662f\uff1ahierarchy\uff08\u5c42\u7ea7\uff09\uff0c\u7ef4\u57fa\u767e\u79d1\u7684 hierarchy \u5bf9hierarchy\u7684\u603b\u7ed3\u662f\u975e\u5e38\u8be6\u7ec6\u7684\uff0c\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0chierarchy\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff1a Hierarchy is an important concept in a wide variety of fields, such as philosophy , mathematics , computer science , organizational theory , systems theory , and the social sciences (especially political philosophy ). \u5176\u5b9e\u4ece\u8fd9\u4e0a\u8ff0\u8bba\u65ad\u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u5012\u63a8\u51fa\uff1a\u5206\u5c42\u601d\u60f3\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u5176\u5b9e\u5982\u679c\u5f80\u66f4\u6df1\u5c42\u6b21\u53bb\u601d\u8003\u7684\u8bdd\uff0c\u5206\u5c42\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u601d\u7ef4\uff0c\u5173\u4e8e\u8fd9\u4e2a\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u9605\u8bfb\u3002 \u4e0b\u9762\u662f\u6211\u6240\u603b\u7ed3\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\u4e2d\u5206\u5c42\u7684\u5e94\u7528\uff1a Architecture \u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u5e38\u5e38\u542c\u5230architecture\uff08\u67b6\u6784\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u9ad8\u7aef\u804c\u4f4d\u53eb\u505aarchitect\uff08\u67b6\u6784\u5e08\uff09\u3002\u8f6f\u4ef6\u6216\u7cfb\u7edf\u7684\u67b6\u6784\u4e3a\u6211\u4eec\u63cf\u8ff0\u7684\u7cfb\u7edf\u7684\u7ed3\u6784\u3001\u7ec4\u6210\u90e8\u5206\u3001\u5404\u90e8\u5206\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5206\u5c42\u601d\u60f3\u5bf9architecture\u5f71\u54cd\u4f53\u73b0\u5728\u5404\u79cd\u5404\u6837\u7684**\u5c42\u6b21\u5316\u7ed3\u6784**\uff0c\u6bd4\u5982 Architecture of computing system \u53c2\u89c1\uff1a Architecture-of-computing-system \u8ba1\u7b97\u673a\u7cfb\u7edf\u5982\u6b64\u590d\u6742\uff0c\u5404\u4e2a\u5c42\u6b21\u4e4b\u95f4\u53ea\u9700\u8981\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u5c31\u53ef\u4ee5\u8fdb\u884c\u4ea4\u4e92\uff0c\u5b8c\u5168\u65e0\u9700\u4e86\u89e3\u5bf9\u65b9\u5177\u4f53\u7684\u7ec6\u8282\u3002\u8bf7\u60f3\u60f3\uff0c\u5982\u679c\u4e0d\u8fd9\u6837\u7684\u8bdd\uff0c\u5219\u591a\u4e48\u590d\u6742\u3002\u62bd\u8c61\u7b80\u5316\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u5e26\u6765\u4e86\u5206\u5de5\uff0c\u5e26\u6765\u4e86\u6548\u7387\u3002\u62bd\u8c61\uff0c\u63a9\u76d6\u7ec6\u8282\uff0c\u63d0\u9ad8\u4e86\u6613\u7528\u6027\u3002 Architecture of compiler \u53c2\u89c1\uff1a The Structure of a Compiler \u4e2d\u95f4\u8868\u793a(IR) \u7f16\u8bd1\u5668\u5206\u4e3a\u524d\u6bb5\u548c\u540e\u7aef\uff0c\u4e2d\u95f4\u8868\u793a\u7406\u89e3\u524d\u6bb5\u4e0e\u540e\u7aef\u3002\u4e5f\u53ef\u4ee5\u8bf4\u4e2d\u95f4\u8868\u793a\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u63a5\u53e3\u3002 Communication protocol \u5404\u79cd\u5404\u6837\u7684\u901a\u4fe1\u534f\u8bae\u53ef\u4ee5\u8bf4\u662f\u6700\u6700\u80fd\u591f\u4f53\u73b0\u5206\u5c42\u601d\u60f3\u7684\u4e86\uff0c\u5728 Communication protocol \u7684 Protocol design \u7ae0\u8282\u4e2d\u5c31\u603b\u7ed3\u4e86\u534f\u8bae\u6d89\u53ca\u7684\u601d\u60f3\uff1a Layering \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53c2\u52a0\uff1a Hierarchical internetworking model \u3002 \u4e0b\u9762\u5217\u4e3e\u4e86\u51e0\u4e2a\u5e38\u89c1\u534f\u8bae\uff0c\u5b83\u4eec\u90fd\u80fd\u975e\u5e38\u597d\u5730\u4f53\u73b0\u4e86\u5206\u5c42\u601d\u60f3\uff1a OSI model OSI model \u53ef\u4ee5\u8bf4\u662f\u5206\u5c42\u601d\u60f3\u7684\u6700\u4f73\u4f53\u73b0\uff0c\u4e0b\u9762\u662f\u6458\u81ea OSI model \uff1a The Open Systems Interconnection model ( OSI model ) is a conceptual model that characterizes and standardizes the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols . The model partitions a communication system into abstraction layers . The original version of the model had seven layers. A layer serves the layer above it and is served by the layer below it. \u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5176\u5b9e\u63cf\u8ff0\u4e86**\u5206\u5c42**\u6240\u5e26\u6765\u7684\u597d\u5904\uff1ainteroperability \uff0c\u5404\u5c42\u4e4b\u95f4\u4e92\u76f8\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ed3\u6784\u548c\u6280\u672f\uff09\uff0c\u901a\u8fc7\u7ea6\u5b9a\u597d\u7684 communication protocols \u8fdb\u884c\u4ea4\u4e92\u3002 OSI model by layer layer 7 Application layer 6 Presentation layer 5 Session layer 4 Transport layer 3 Network layer 2 Data link layer 1 Physical layer Internet protocol suite Database abstraction layer \u8fd9\u6bb5\u63cf\u8ff0\u975e\u5e38\u597d\uff1a A database abstraction layer ( DBAL or DAL ) is an application programming interface which unifies the communication between a computer application and databases such as SQL Server , DB2 , MySQL , PostgreSQL , Oracle or SQLite . \u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003 \u95ee\u9898\u51fa\u73b0\u5728\u54ea\u4e2a\u5c42\u6b21 \u5728\u591a\u5c42\u6b21\u4e2d\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u662f\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u8fd9\u6837\u7684\u8003\u8651\u3002 \u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u6982\u5ff5 \u5f53\u6211\u4eec\u7ad9\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e0d\u540c\u5c42\u6b21\u6765\u601d\u8003\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u4f1a\u5b58\u5728\u7740\u5927\u91cf\u7684\u76f8\u4e92\u6982\u5ff5\u501f\u7528\uff0c\u6216\u8005\u8bf4\uff0c\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u672f\u8bed\u6765\u8868\u793a\u7c7b\u4f3c\u7684\u6982\u5ff5\u3002\u6bd4\u5982\uff1a \u6848\u4f8b \u4e0d\u540c\u5c42\u6b21\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u6bd4\u5982\u5728 Linux-OS-kernel-is-event-driven \u4e2d\u603b\u7ed3\u7684\uff1a Hardware Software Interrupt-driven Event-driven architecture / Event-driven programming Interrupt Event (computing) Interrupt handler / Interrupt service routine Event handler / Callback function \u5404\u79cdinterrupt\u5c31\u662f\u6240\u8c13\u7684event\u3002 \u6848\u4f8b linux\u7684 epoll \u7684 triggering mode \u501f\u7528\u4e86 Interrupt \u7684 triggering methods \u6982\u5ff5\u3002 \u6848\u4f8b \u5728 Understanding.The.Linux.kernel.3 rd .Edition \u7684Chapter 4. Interrupt\u5b9a\u4e49\u4e86Synchronous interrupt\u7684\u6982\u5ff5\uff0c\u5b83\u662fHardware\u5c42\u7684\u6982\u5ff5\uff0c\u5728OS\u5c42\uff0c\u4e0e\u5b83\u5bf9\u5e94\u7684\u662f Signal \u3002 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u8bed\u8a00 \u5728\u4e0a\u4e00\u8282\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u5df2\u7ecf\u5bf9\u6b64\u8fdb\u884c\u4e86\u5206\u6790\u3002 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff1a Very high-level programming language \u3001\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 High-level programming language \uff09\u3001\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 Low-level programming language \uff09\uff0c \u4e0d\u540c\u5c42\u6b21\u7684\u8bed\u8a00\u4e4b\u95f4\u7684\u8f6c\u6362 \u6bd4\u5982compiler\u5c31\u662f\u6267\u884c\u8fd9\u4e2a\u76ee\u7684\u7684\u3002\u53c2\u89c1\u9f99\u4e66 Chapter 7 Run-Time Environments \u3002 API VS ABI \u5f53\u6211\u4eec\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003ABI\u548cAPI\u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u4e24\u8005\u7684\u533a\u5206\u662f\u975e\u5e38\u5bb9\u6613\u7684\uff1a\u5b83\u4eec\u662f\u4e0d\u540c\u7684language\u7684 interface \u3002API\u662fhight-level programming language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \uff0c\u800cABI\u5219\u662fmachine language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b63\u5982\u5728\u4e0a\u4e00\u8282\u5728\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u6240\u63d0\u53ca\u7684\uff1a \u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c \u6240\u4ee5\u9700\u8981\u5b9a\u4e49hight-level programming language\u4e2d\u7684\u5404\u79cd\u6982\u5ff5\u5982\u4f55\u7ffb\u8bd1\u4e3amachine language\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u662fABI\u4e2d\u6240\u5305\u542b\u7684\uff0c\u6bd4\u5982calling convention\u7b49\u3002 Linux kernel and GNU C Library define the Linux API . After compilation, the binaries offer an ABI; keeping this ABI stable over a long time is important for ISVs . \u603b\u7ed3 \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u5206\u5c42\uff0c\u62bd\u8c61\uff0c\u63a5\u53e3\uff0c\u8fd9\u8bcd\u53ef\u4ee5\u770b\u505a\u662f\u540c\u4e49\u8bcd\u3002 \u5206\u5c42\u5e26\u6765\u7684\u4ef7\u503c \u5206\u5c42\u5e26\u6765\u89e3\u8026\uff0c\u5206\u5c42\u5e26\u6765\u7b80\u5316 Separation of concerns Portability \u5982 Diversity of operating systems and portability \u62bd\u8c61\u5c42\u5e26\u6765\u79fb\u690d\u6027 \u5206\u5c42\u5e26\u6765\u5b89\u5168 \u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\uff1a kernel space . user space . This separation prevents user data and kernel data from interfering with each other and causing instability and slowness, as well as preventing malfunctioning application programs from crashing the entire operating system. \u5206\u5c42\u5e26\u6765\u9694\u79bb\uff0c\u8fdb\u800c\u5e26\u6765\u5b89\u5168 \u5206\u5c42\u5e26\u6765 modularity \u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\u3002 \u5206\u5c42\u4e0e\u6808\u3001pipeline \u4e00\u822c\uff0c\u4f1a\u5c06\u6309\u7167\u5206\u5c42\u8bbe\u8ba1\u7684\u7cfb\u7edf\u79f0\u4e3a\u6808\uff0c\u6bd4\u5982\u534f\u8bae\u6808\uff0c\u53e6\u5916\u4e00\u4e2a\u4e0e\u6b64\u76f8\u5173\u7684\u8bcd\u662fpipeline\u3002\u663e\u7136\uff0c\u65e0\u8bbapipeline\u8fd8\u662f\u6808\uff0c\u5b83\u4eec\u90fd\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u8fd9\u4e0e\u5206\u5c42\u7ed3\u6784\u662f\u7ebf\u6027\u7ed3\u6784\u662f\u76f8\u5951\u5408\u7684\u3002 See also: Solution stack See also: Abstraction (computer science) Abstraction layer Layer (object-oriented design)","title":"Abstraction-and-architecture-and-layer"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_1","text":"\u4e00\u79cd\u5e38\u89c1\u7684\u67b6\u6784\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\uff0c\u5177\u4f53\u53c2\u89c1 abstraction layer \uff0c\u8fd9\u662fabstraction\u5728architecture\u9886\u57df\u7684\u4e00\u4e2a\u4f53\u73b0\u3002\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684 abstraction layer \u601d\u60f3\u7684\u53ef\u8c13\u7531\u6765\u5df2\u4e45\u4e14\u5f71\u54cd\u6df1\u8fdc\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u65b9\u65b9\u9762\u9762\u6211\u4eec\u90fd\u80fd\u591f\u770b\u5230\u5b83\u7684\u8eab\u5f71\u548c\u5f71\u54cd\uff0c\u540e\u9762\u4e3a\u4e86\u63cf\u8ff0\u4fbf\u5229\uff0c\u5c06 abstraction layer \u601d\u60f3\u7b80\u79f0\u4e3a**\u5206\u5c42\u601d\u60f3**\u3002\u6700\u80fd\u591f\u4f53\u73b0**\u5206\u5c42\u601d\u60f3**\u7684\u4e00\u4e2a\u8bcd\u662f\uff1ahierarchy\uff08\u5c42\u7ea7\uff09\uff0c\u7ef4\u57fa\u767e\u79d1\u7684 hierarchy \u5bf9hierarchy\u7684\u603b\u7ed3\u662f\u975e\u5e38\u8be6\u7ec6\u7684\uff0c\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0chierarchy\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff1a Hierarchy is an important concept in a wide variety of fields, such as philosophy , mathematics , computer science , organizational theory , systems theory , and the social sciences (especially political philosophy ). \u5176\u5b9e\u4ece\u8fd9\u4e0a\u8ff0\u8bba\u65ad\u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u5012\u63a8\u51fa\uff1a\u5206\u5c42\u601d\u60f3\u5728\u5404\u4e2a\u5b66\u79d1\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u5176\u5b9e\u5982\u679c\u5f80\u66f4\u6df1\u5c42\u6b21\u53bb\u601d\u8003\u7684\u8bdd\uff0c\u5206\u5c42\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u601d\u7ef4\uff0c\u5173\u4e8e\u8fd9\u4e2a\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u9605\u8bfb\u3002 \u4e0b\u9762\u662f\u6211\u6240\u603b\u7ed3\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\u4e2d\u5206\u5c42\u7684\u5e94\u7528\uff1a","title":"\u5206\u5c42"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#architecture","text":"\u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u6211\u4eec\u5e38\u5e38\u542c\u5230architecture\uff08\u67b6\u6784\uff09\u8fd9\u4e2a\u8bcd\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u9ad8\u7aef\u804c\u4f4d\u53eb\u505aarchitect\uff08\u67b6\u6784\u5e08\uff09\u3002\u8f6f\u4ef6\u6216\u7cfb\u7edf\u7684\u67b6\u6784\u4e3a\u6211\u4eec\u63cf\u8ff0\u7684\u7cfb\u7edf\u7684\u7ed3\u6784\u3001\u7ec4\u6210\u90e8\u5206\u3001\u5404\u90e8\u5206\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5206\u5c42\u601d\u60f3\u5bf9architecture\u5f71\u54cd\u4f53\u73b0\u5728\u5404\u79cd\u5404\u6837\u7684**\u5c42\u6b21\u5316\u7ed3\u6784**\uff0c\u6bd4\u5982","title":"Architecture"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#architecture#of#computing#system","text":"\u53c2\u89c1\uff1a Architecture-of-computing-system \u8ba1\u7b97\u673a\u7cfb\u7edf\u5982\u6b64\u590d\u6742\uff0c\u5404\u4e2a\u5c42\u6b21\u4e4b\u95f4\u53ea\u9700\u8981\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u5c31\u53ef\u4ee5\u8fdb\u884c\u4ea4\u4e92\uff0c\u5b8c\u5168\u65e0\u9700\u4e86\u89e3\u5bf9\u65b9\u5177\u4f53\u7684\u7ec6\u8282\u3002\u8bf7\u60f3\u60f3\uff0c\u5982\u679c\u4e0d\u8fd9\u6837\u7684\u8bdd\uff0c\u5219\u591a\u4e48\u590d\u6742\u3002\u62bd\u8c61\u7b80\u5316\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u5e26\u6765\u4e86\u5206\u5de5\uff0c\u5e26\u6765\u4e86\u6548\u7387\u3002\u62bd\u8c61\uff0c\u63a9\u76d6\u7ec6\u8282\uff0c\u63d0\u9ad8\u4e86\u6613\u7528\u6027\u3002","title":"Architecture of computing system"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#architecture#of#compiler","text":"\u53c2\u89c1\uff1a The Structure of a Compiler","title":"Architecture of compiler"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#ir","text":"\u7f16\u8bd1\u5668\u5206\u4e3a\u524d\u6bb5\u548c\u540e\u7aef\uff0c\u4e2d\u95f4\u8868\u793a\u7406\u89e3\u524d\u6bb5\u4e0e\u540e\u7aef\u3002\u4e5f\u53ef\u4ee5\u8bf4\u4e2d\u95f4\u8868\u793a\u662f\u4e24\u8005\u4e4b\u95f4\u7684\u63a5\u53e3\u3002","title":"\u4e2d\u95f4\u8868\u793a(IR)"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#communication#protocol","text":"\u5404\u79cd\u5404\u6837\u7684\u901a\u4fe1\u534f\u8bae\u53ef\u4ee5\u8bf4\u662f\u6700\u6700\u80fd\u591f\u4f53\u73b0\u5206\u5c42\u601d\u60f3\u7684\u4e86\uff0c\u5728 Communication protocol \u7684 Protocol design \u7ae0\u8282\u4e2d\u5c31\u603b\u7ed3\u4e86\u534f\u8bae\u6d89\u53ca\u7684\u601d\u60f3\uff1a Layering \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u53c2\u52a0\uff1a Hierarchical internetworking model \u3002 \u4e0b\u9762\u5217\u4e3e\u4e86\u51e0\u4e2a\u5e38\u89c1\u534f\u8bae\uff0c\u5b83\u4eec\u90fd\u80fd\u975e\u5e38\u597d\u5730\u4f53\u73b0\u4e86\u5206\u5c42\u601d\u60f3\uff1a","title":"Communication protocol"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#osi#model","text":"OSI model \u53ef\u4ee5\u8bf4\u662f\u5206\u5c42\u601d\u60f3\u7684\u6700\u4f73\u4f53\u73b0\uff0c\u4e0b\u9762\u662f\u6458\u81ea OSI model \uff1a The Open Systems Interconnection model ( OSI model ) is a conceptual model that characterizes and standardizes the communication functions of a telecommunication or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard communication protocols . The model partitions a communication system into abstraction layers . The original version of the model had seven layers. A layer serves the layer above it and is served by the layer below it. \u4e0a\u9762\u8fd9\u6bb5\u8bdd\u5176\u5b9e\u63cf\u8ff0\u4e86**\u5206\u5c42**\u6240\u5e26\u6765\u7684\u597d\u5904\uff1ainteroperability \uff0c\u5404\u5c42\u4e4b\u95f4\u4e92\u76f8\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ed3\u6784\u548c\u6280\u672f\uff09\uff0c\u901a\u8fc7\u7ea6\u5b9a\u597d\u7684 communication protocols \u8fdb\u884c\u4ea4\u4e92\u3002 OSI model by layer layer 7 Application layer 6 Presentation layer 5 Session layer 4 Transport layer 3 Network layer 2 Data link layer 1 Physical layer","title":"OSI model"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#internet#protocol#suite","text":"","title":"Internet protocol suite"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#database#abstraction#layer","text":"\u8fd9\u6bb5\u63cf\u8ff0\u975e\u5e38\u597d\uff1a A database abstraction layer ( DBAL or DAL ) is an application programming interface which unifies the communication between a computer application and databases such as SQL Server , DB2 , MySQL , PostgreSQL , Oracle or SQLite .","title":"Database abstraction layer"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_2","text":"","title":"\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_3","text":"\u5728\u591a\u5c42\u6b21\u4e2d\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u662f\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u8fd9\u6837\u7684\u8003\u8651\u3002","title":"\u95ee\u9898\u51fa\u73b0\u5728\u54ea\u4e2a\u5c42\u6b21"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_4","text":"\u5f53\u6211\u4eec\u7ad9\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e0d\u540c\u5c42\u6b21\u6765\u601d\u8003\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e0d\u540c\u5c42\u6b21\u4e4b\u95f4\u4f1a\u5b58\u5728\u7740\u5927\u91cf\u7684\u76f8\u4e92\u6982\u5ff5\u501f\u7528\uff0c\u6216\u8005\u8bf4\uff0c\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u672f\u8bed\u6765\u8868\u793a\u7c7b\u4f3c\u7684\u6982\u5ff5\u3002\u6bd4\u5982\uff1a","title":"\u4e0d\u540c\u5c42\u6b21\u76f8\u4e92\u501f\u7528\u6982\u5ff5"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_5","text":"\u4e0d\u540c\u5c42\u6b21\u63cf\u8ff0\u672c\u8d28\u4e0a\u975e\u5e38\u7c7b\u4f3c\u7684\u4e8b\u52a1\u6709\u7740\u4e0d\u540c\u7684\u8bf4\u6cd5\uff0c\u6bd4\u5982\u5728 Linux-OS-kernel-is-event-driven \u4e2d\u603b\u7ed3\u7684\uff1a Hardware Software Interrupt-driven Event-driven architecture / Event-driven programming Interrupt Event (computing) Interrupt handler / Interrupt service routine Event handler / Callback function \u5404\u79cdinterrupt\u5c31\u662f\u6240\u8c13\u7684event\u3002","title":"\u6848\u4f8b"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_6","text":"linux\u7684 epoll \u7684 triggering mode \u501f\u7528\u4e86 Interrupt \u7684 triggering methods \u6982\u5ff5\u3002","title":"\u6848\u4f8b"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_7","text":"\u5728 Understanding.The.Linux.kernel.3 rd .Edition \u7684Chapter 4. Interrupt\u5b9a\u4e49\u4e86Synchronous interrupt\u7684\u6982\u5ff5\uff0c\u5b83\u662fHardware\u5c42\u7684\u6982\u5ff5\uff0c\u5728OS\u5c42\uff0c\u4e0e\u5b83\u5bf9\u5e94\u7684\u662f Signal \u3002","title":"\u6848\u4f8b"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_8","text":"\u5728\u4e0a\u4e00\u8282\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u5df2\u7ecf\u5bf9\u6b64\u8fdb\u884c\u4e86\u5206\u6790\u3002 \u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\uff1a Very high-level programming language \u3001\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 High-level programming language \uff09\u3001\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08 Low-level programming language \uff09\uff0c","title":"\u4e0d\u540c\u5c42\u6b21\u4f7f\u7528\u4e0d\u540c\u8bed\u8a00"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_9","text":"\u6bd4\u5982compiler\u5c31\u662f\u6267\u884c\u8fd9\u4e2a\u76ee\u7684\u7684\u3002\u53c2\u89c1\u9f99\u4e66 Chapter 7 Run-Time Environments \u3002","title":"\u4e0d\u540c\u5c42\u6b21\u7684\u8bed\u8a00\u4e4b\u95f4\u7684\u8f6c\u6362"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#api#vs#abi","text":"\u5f53\u6211\u4eec\u4ee5\u5c42\u6b21\u601d\u60f3\u6765\u601d\u8003ABI\u548cAPI\u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u4e24\u8005\u7684\u533a\u5206\u662f\u975e\u5e38\u5bb9\u6613\u7684\uff1a\u5b83\u4eec\u662f\u4e0d\u540c\u7684language\u7684 interface \u3002API\u662fhight-level programming language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \uff0c\u800cABI\u5219\u662fmachine language\u7684\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684 interface \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b63\u5982\u5728\u4e0a\u4e00\u8282\u5728\u300a\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\u300b\u4e2d\u6240\u63d0\u53ca\u7684\uff1a \u4e0d\u7ba1\u591a\u4e48\u9ad8\u7ea7\u7684\u8bed\u8a00\u6700\u7ec8\u90fd\u9700\u8981\u88ab\u7ffb\u8bd1\uff08compiler\u6216interpreter\uff09\u4e3a machine language \u624d\u80fd\u591f\u88ab\u673a\u5668\u6267\u884c \u6240\u4ee5\u9700\u8981\u5b9a\u4e49hight-level programming language\u4e2d\u7684\u5404\u79cd\u6982\u5ff5\u5982\u4f55\u7ffb\u8bd1\u4e3amachine language\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u662fABI\u4e2d\u6240\u5305\u542b\u7684\uff0c\u6bd4\u5982calling convention\u7b49\u3002 Linux kernel and GNU C Library define the Linux API . After compilation, the binaries offer an ABI; keeping this ABI stable over a long time is important for ISVs .","title":"API VS ABI"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_10","text":"\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u5206\u5c42\uff0c\u62bd\u8c61\uff0c\u63a5\u53e3\uff0c\u8fd9\u8bcd\u53ef\u4ee5\u770b\u505a\u662f\u540c\u4e49\u8bcd\u3002","title":"\u603b\u7ed3"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_11","text":"\u5206\u5c42\u5e26\u6765\u89e3\u8026\uff0c\u5206\u5c42\u5e26\u6765\u7b80\u5316","title":"\u5206\u5c42\u5e26\u6765\u7684\u4ef7\u503c"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#separation#of#concerns","text":"","title":"Separation of concerns"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#portability","text":"\u5982 Diversity of operating systems and portability \u62bd\u8c61\u5c42\u5e26\u6765\u79fb\u690d\u6027","title":"Portability"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#_12","text":"\u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\uff1a kernel space . user space . This separation prevents user data and kernel data from interfering with each other and causing instability and slowness, as well as preventing malfunctioning application programs from crashing the entire operating system. \u5206\u5c42\u5e26\u6765\u9694\u79bb\uff0c\u8fdb\u800c\u5e26\u6765\u5b89\u5168","title":"\u5206\u5c42\u5e26\u6765\u5b89\u5168"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#modularity","text":"\u5728 Kernel (operating system) \u4e2d\u6709\u8fd9\u6837\u7684\u63cf\u8ff0\u3002","title":"\u5206\u5c42\u5e26\u6765modularity"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#pipeline","text":"\u4e00\u822c\uff0c\u4f1a\u5c06\u6309\u7167\u5206\u5c42\u8bbe\u8ba1\u7684\u7cfb\u7edf\u79f0\u4e3a\u6808\uff0c\u6bd4\u5982\u534f\u8bae\u6808\uff0c\u53e6\u5916\u4e00\u4e2a\u4e0e\u6b64\u76f8\u5173\u7684\u8bcd\u662fpipeline\u3002\u663e\u7136\uff0c\u65e0\u8bbapipeline\u8fd8\u662f\u6808\uff0c\u5b83\u4eec\u90fd\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u8fd9\u4e0e\u5206\u5c42\u7ed3\u6784\u662f\u7ebf\u6027\u7ed3\u6784\u662f\u76f8\u5951\u5408\u7684\u3002 See also: Solution stack","title":"\u5206\u5c42\u4e0e\u6808\u3001pipeline"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Abstraction-and-architecture-and-layer/#see#also","text":"Abstraction (computer science) Abstraction layer Layer (object-oriented design)","title":"See also:"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Book-code-reading/","text":"Book code reading: \u5206\u5c42\u67b6\u6784","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Multilayered-architecture/Book-code-reading/#book#code#reading","text":"","title":"Book code reading: \u5206\u5c42\u67b6\u6784"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/","text":"Plugin architecture plugin\u7684\u542b\u4e49\u662f\u4ec0\u4e48\uff1f\u53c2\u89c1wikipedia Plug-in (computing) \uff0c\u663e\u7136\uff0c\u57fa\u4e8eplugin\u7684architecture\u5c31\u662f\u672c\u6587\u9700\u8981\u9610\u8ff0\u7684plugin architecture\u3002plugin\u662f\u4e00\u79cd\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u4ee5\u591a\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u5b9e\u73b0\uff0c\u6bd4\u5982shared library\uff0cLibrary-base architecture\u5176\u5b9e\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u79cdplugin architecture\u3002 NOTE: library-based architecture\u662f\u6211\u5728\u9605\u8bfbclang\u7684doc\u65f6\u5019\uff0c\u5176\u4e2d\u63d0\u51fa\u7684\u4e00\u4e2a\u6982\u5ff5\u3002 \u5728\u9605\u8bfb Clang - Features and Goals \u65f6\uff0c\u5176Library Based Architecture\u4ee4\u6211\u5370\u8c61\u6df1\u523b\uff0c\u636e\u6211\u6240\u77e5\u7684\uff0c\u8fd8\u6709\u91c7\u7528\u8fd9\u79cd\u67b6\u6784\u7684\u6709 software \u8bf4\u660e nginx nginx \u63d0\u4f9b\u4e86\u975e\u5e38\u591a\u7684Modules\uff0c\u8fd9\u4e9bModules\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684library redis Redis Modules \uff0c\u8fd9\u4e9bModules\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684library Tuxedo (software) cpython cpython \u4e5f\u53ef\u4ee5\u770b\u505a\u662flibrary-base architecture\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8Extending and Embedding the Python Interpreter \u00b6 \u53c2\u89c1\uff1a - python bindings, how does it work? - dlopen operating system kernel \u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u652f\u6301 loadable kernel module \u7279\u6027 SQLite \u53c2\u89c1: - The Virtual Table Mechanism Of SQLite - Run-Time Loadable Extensions Reading list Building Your Own Plugin Framework \u5b9e\u73b0 dlopen(3) uselib(2) Building a Simple C++ Cross-platform Plugin System Build a Pluggable Application with IoC Container ffead-cpp Making a Plugin System Introducing the new C++ plugins Pluga Implementing A Plugin System in C or C++ [closed] Dynamic Loading of Modules dlvhex Chapter 12. Boost.DLL Middleware https://en.wikipedia.org/wiki/Middleware Message-oriented middleware https://en.wikipedia.org/wiki/Message-oriented_middleware","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#plugin#architecture","text":"plugin\u7684\u542b\u4e49\u662f\u4ec0\u4e48\uff1f\u53c2\u89c1wikipedia Plug-in (computing) \uff0c\u663e\u7136\uff0c\u57fa\u4e8eplugin\u7684architecture\u5c31\u662f\u672c\u6587\u9700\u8981\u9610\u8ff0\u7684plugin architecture\u3002plugin\u662f\u4e00\u79cd\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u4ee5\u591a\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u5b9e\u73b0\uff0c\u6bd4\u5982shared library\uff0cLibrary-base architecture\u5176\u5b9e\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u79cdplugin architecture\u3002 NOTE: library-based architecture\u662f\u6211\u5728\u9605\u8bfbclang\u7684doc\u65f6\u5019\uff0c\u5176\u4e2d\u63d0\u51fa\u7684\u4e00\u4e2a\u6982\u5ff5\u3002 \u5728\u9605\u8bfb Clang - Features and Goals \u65f6\uff0c\u5176Library Based Architecture\u4ee4\u6211\u5370\u8c61\u6df1\u523b\uff0c\u636e\u6211\u6240\u77e5\u7684\uff0c\u8fd8\u6709\u91c7\u7528\u8fd9\u79cd\u67b6\u6784\u7684\u6709 software \u8bf4\u660e nginx nginx \u63d0\u4f9b\u4e86\u975e\u5e38\u591a\u7684Modules\uff0c\u8fd9\u4e9bModules\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684library redis Redis Modules \uff0c\u8fd9\u4e9bModules\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684library Tuxedo (software) cpython cpython \u4e5f\u53ef\u4ee5\u770b\u505a\u662flibrary-base architecture\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8Extending and Embedding the Python Interpreter \u00b6 \u53c2\u89c1\uff1a - python bindings, how does it work? - dlopen operating system kernel \u5927\u591a\u6570\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u652f\u6301 loadable kernel module \u7279\u6027 SQLite \u53c2\u89c1: - The Virtual Table Mechanism Of SQLite - Run-Time Loadable Extensions","title":"Plugin architecture"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#reading#list","text":"","title":"Reading list"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#building#your#own#plugin#framework","text":"","title":"Building Your Own Plugin Framework"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#_1","text":"","title":"\u5b9e\u73b0"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#dlopen3","text":"","title":"dlopen(3)"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#uselib2","text":"","title":"uselib(2)"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#building#a#simple#c#cross-platform#plugin#system","text":"","title":"Building a Simple C++ Cross-platform Plugin System"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#build#a#pluggable#application#with#ioc#container","text":"","title":"Build a Pluggable Application with IoC Container"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#ffead-cpp","text":"","title":"ffead-cpp"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#making#a#plugin#system","text":"","title":"Making a Plugin System"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#introducing#the#new#c#plugins","text":"","title":"Introducing the new C++ plugins"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#pluga","text":"","title":"Pluga"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#implementing#a#plugin#system#in#c#or#c#closed","text":"","title":"Implementing A Plugin System in C or C++ [closed]"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#dynamic#loading#of#modules","text":"","title":"Dynamic Loading of Modules"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#dlvhex","text":"","title":"dlvhex"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#chapter#12#boostdll","text":"","title":"Chapter 12. Boost.DLL"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#middleware","text":"https://en.wikipedia.org/wiki/Middleware","title":"Middleware"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/#message-oriented#middleware","text":"https://en.wikipedia.org/wiki/Message-oriented_middleware","title":"Message-oriented middleware"},{"location":"1Design/Design-pattern/Architecture-pattern/Plugin-architecture/Component-based-software-engineering/","text":"","title":"Component-based-software-engineering"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/","text":"\u5173\u4e8e\u672c\u7ae0 \u672c\u7ae0\u8ba8\u8bbaservice-oriented architecture\u3002 Service-oriented Architecture wikipedia Service-oriented Architecture","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/#_1","text":"\u672c\u7ae0\u8ba8\u8bbaservice-oriented architecture\u3002","title":"\u5173\u4e8e\u672c\u7ae0"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/#service-oriented#architecture","text":"wikipedia Service-oriented Architecture","title":"Service-oriented Architecture"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/","text":"Microservice What are Microservices? \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728 developer.51cto \u6253\u5de5\u4eba\uff0c\u652f\u6491\u4ebf\u7ea7\u9ad8\u5e76\u53d1\u7684\u7cfb\u7edf\u957f\u5565\u6837? \"# \u5fae\u670d\u52a1\u67b6\u6784\u6f14\u5316 \"\u4e2d\u7ed9\u51fa\u4e86\u975e\u5e38\u597d\u7684\u89e3\u91ca\uff0c\u6211\u662f\u901a\u8fc7\u8fd9\u7bc7\u6587\u7ae0\u7684\u63cf\u8ff0\u624d\u6df1\u523b\u8ba4\u8bc6microservice\u7684\u3002 developer.51cto \u6253\u5de5\u4eba\uff0c\u652f\u6491\u4ebf\u7ea7\u9ad8\u5e76\u53d1\u7684\u7cfb\u7edf\u957f\u5565\u6837? # \u5fae\u670d\u52a1\u67b6\u6784\u6f14\u5316 \u5728\u4e92\u8054\u7f51\u65e9\u671f\u7684\u65f6\u5019\uff0c\u5355\u4f53\u67b6\u6784\u5c31\u8db3\u4ee5\u652f\u6491\u8d77\u65e5\u5e38\u7684\u4e1a\u52a1\u9700\u6c42\uff0c\u5927\u5bb6\u7684\u6240\u6709\u4e1a\u52a1\u670d\u52a1\u90fd\u5728\u4e00\u4e2a\u9879\u76ee\u91cc\uff0c\u90e8\u7f72\u5728\u4e00\u53f0\u7269\u7406\u673a\u5668\u4e0a\u3002 \u6240\u6709\u7684\u4e1a\u52a1\u5305\u62ec\u4f60\u7684\u4ea4\u6613\u7cfb\u7edf\u3001\u4f1a\u5458\u4fe1\u606f\u3001\u5e93\u5b58\u3001\u5546\u54c1\u7b49\u7b49\u90fd\u5939\u6742\u5728\u4e00\u8d77\uff0c\u5f53\u6d41\u91cf\u4e00\u65e6\u8d77\u6765\u4e4b\u540e\uff0c\u5355\u4f53\u67b6\u6784\u7684\u95ee\u9898\u5c31\u66b4\u9732\u51fa\u6765\u4e86\uff0c\u673a\u5668\u6302\u4e86\u6240\u6709\u7684\u4e1a\u52a1\u5168\u90e8\u65e0\u6cd5\u4f7f\u7528\u4e86\u3002 NOTE: single-point failure \u4e8e\u662f\uff0c\u96c6\u7fa4\u67b6\u6784\u7684\u67b6\u6784\u5f00\u59cb\u51fa\u73b0\uff0c\u5355\u673a\u65e0\u6cd5\u6297\u4f4f\u7684\u538b\u529b\uff0c\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u6c34\u5e73\u62d3\u5c55\u6a2a\u5411\u6269\u5bb9\u4e86\uff0c\u8fd9\u6837\uff0c\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u628a\u538b\u529b\u6d41\u91cf\u5206\u644a\u5230\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff0c\u6682\u65f6\u662f\u89e3\u51b3\u4e86\u5355\u70b9\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u7684\u95ee\u9898\u3002 \u4f46\u662f\u968f\u7740\u4e1a\u52a1\u7684\u53d1\u5c55\uff0c\u5728\u4e00\u4e2a\u9879\u76ee\u91cc\u7ef4\u62a4\u6240\u6709\u7684\u4e1a\u52a1\u573a\u666f\u4f7f\u5f00\u53d1\u548c\u4ee3\u7801\u7ef4\u62a4\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u9700\u6c42\u6539\u52a8\u90fd\u9700\u8981\u53d1\u5e03\u6574\u4e2a\u670d\u52a1\uff0c\u4ee3\u7801\u7684\u5408\u5e76\u51b2\u7a81\u4e5f\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u9891\u7e41\uff0c\u540c\u65f6\u7ebf\u4e0a\u6545\u969c\u51fa\u73b0\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\u5fae\u670d\u52a1\u7684\u67b6\u6784\u6a21\u5f0f\u5c31\u8bde\u751f\u4e86\u3002 \u628a\u6bcf\u4e2a\u72ec\u7acb\u7684\u4e1a\u52a1\u62c6\u5206\u5f00\u72ec\u7acb\u90e8\u7f72\uff0c\u5f00\u53d1\u548c\u7ef4\u62a4\u7684\u6210\u672c\u964d\u4f4e\uff0c\u96c6\u7fa4\u80fd\u627f\u53d7\u7684\u538b\u529b\u4e5f\u63d0\u9ad8\u4e86\uff0c\u518d\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5c0f\u5c0f\u7684\u6539\u52a8\u70b9\u9700\u8981\u7275\u4e00\u53d1\u800c\u52a8\u5168\u8eab\u4e86\u3002 \u4ee5\u4e0a\u7684\u70b9\u4ece\u9ad8\u5e76\u53d1\u7684\u89d2\u5ea6\u800c\u8a00\uff0c\u4f3c\u4e4e\u90fd\u53ef\u4ee5\u5f52\u7c7b\u4e3a\u901a\u8fc7\u670d\u52a1\u62c6\u5206\u548c\u96c6\u7fa4\u7269\u7406\u673a\u5668\u7684\u6269\u5c55\u63d0\u9ad8\u4e86\u6574\u4f53\u7684\u7cfb\u7edf\u6297\u538b\u80fd\u529b\uff0c\u90a3\u4e48\uff0c\u968f\u4e4b\u62c6\u5206\u800c\u5e26\u6765\u7684\u95ee\u9898\u4e5f\u5c31\u662f\u9ad8\u5e76\u53d1\u7cfb\u7edf\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u5728\u4e0b\u9762\u7684\u4e24\u4e2a\u7f51\u7ad9\u4e2d\u5bf9\u6b64\u8fdb\u884c\u4e86\u6df1\u5165\u5206\u6790: amazon Microservices Microservices are an architectural and organizational approach to software development where software is composed of small independent services that communicate over well-defined APIs. These services are owned by small, self-contained teams. Microservices architectures make applications easier to scale and faster to develop, enabling innovation and accelerating time-to-market for new features. Monolithic vs. Microservices Architecture Characteristics of Microservices Autonomous Specialized Benefits of Microservices Agility Flexible Scaling Easy Deployment Technological Freedom Reusable Code Resilience microservices.io","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#microservice","text":"","title":"Microservice"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#what#are#microservices","text":"\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728 developer.51cto \u6253\u5de5\u4eba\uff0c\u652f\u6491\u4ebf\u7ea7\u9ad8\u5e76\u53d1\u7684\u7cfb\u7edf\u957f\u5565\u6837? \"# \u5fae\u670d\u52a1\u67b6\u6784\u6f14\u5316 \"\u4e2d\u7ed9\u51fa\u4e86\u975e\u5e38\u597d\u7684\u89e3\u91ca\uff0c\u6211\u662f\u901a\u8fc7\u8fd9\u7bc7\u6587\u7ae0\u7684\u63cf\u8ff0\u624d\u6df1\u523b\u8ba4\u8bc6microservice\u7684\u3002","title":"What are Microservices?"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#developer51cto","text":"\u5728\u4e92\u8054\u7f51\u65e9\u671f\u7684\u65f6\u5019\uff0c\u5355\u4f53\u67b6\u6784\u5c31\u8db3\u4ee5\u652f\u6491\u8d77\u65e5\u5e38\u7684\u4e1a\u52a1\u9700\u6c42\uff0c\u5927\u5bb6\u7684\u6240\u6709\u4e1a\u52a1\u670d\u52a1\u90fd\u5728\u4e00\u4e2a\u9879\u76ee\u91cc\uff0c\u90e8\u7f72\u5728\u4e00\u53f0\u7269\u7406\u673a\u5668\u4e0a\u3002 \u6240\u6709\u7684\u4e1a\u52a1\u5305\u62ec\u4f60\u7684\u4ea4\u6613\u7cfb\u7edf\u3001\u4f1a\u5458\u4fe1\u606f\u3001\u5e93\u5b58\u3001\u5546\u54c1\u7b49\u7b49\u90fd\u5939\u6742\u5728\u4e00\u8d77\uff0c\u5f53\u6d41\u91cf\u4e00\u65e6\u8d77\u6765\u4e4b\u540e\uff0c\u5355\u4f53\u67b6\u6784\u7684\u95ee\u9898\u5c31\u66b4\u9732\u51fa\u6765\u4e86\uff0c\u673a\u5668\u6302\u4e86\u6240\u6709\u7684\u4e1a\u52a1\u5168\u90e8\u65e0\u6cd5\u4f7f\u7528\u4e86\u3002 NOTE: single-point failure \u4e8e\u662f\uff0c\u96c6\u7fa4\u67b6\u6784\u7684\u67b6\u6784\u5f00\u59cb\u51fa\u73b0\uff0c\u5355\u673a\u65e0\u6cd5\u6297\u4f4f\u7684\u538b\u529b\uff0c\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u6c34\u5e73\u62d3\u5c55\u6a2a\u5411\u6269\u5bb9\u4e86\uff0c\u8fd9\u6837\uff0c\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u628a\u538b\u529b\u6d41\u91cf\u5206\u644a\u5230\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff0c\u6682\u65f6\u662f\u89e3\u51b3\u4e86\u5355\u70b9\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u7684\u95ee\u9898\u3002 \u4f46\u662f\u968f\u7740\u4e1a\u52a1\u7684\u53d1\u5c55\uff0c\u5728\u4e00\u4e2a\u9879\u76ee\u91cc\u7ef4\u62a4\u6240\u6709\u7684\u4e1a\u52a1\u573a\u666f\u4f7f\u5f00\u53d1\u548c\u4ee3\u7801\u7ef4\u62a4\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u9700\u6c42\u6539\u52a8\u90fd\u9700\u8981\u53d1\u5e03\u6574\u4e2a\u670d\u52a1\uff0c\u4ee3\u7801\u7684\u5408\u5e76\u51b2\u7a81\u4e5f\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u9891\u7e41\uff0c\u540c\u65f6\u7ebf\u4e0a\u6545\u969c\u51fa\u73b0\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\u5fae\u670d\u52a1\u7684\u67b6\u6784\u6a21\u5f0f\u5c31\u8bde\u751f\u4e86\u3002 \u628a\u6bcf\u4e2a\u72ec\u7acb\u7684\u4e1a\u52a1\u62c6\u5206\u5f00\u72ec\u7acb\u90e8\u7f72\uff0c\u5f00\u53d1\u548c\u7ef4\u62a4\u7684\u6210\u672c\u964d\u4f4e\uff0c\u96c6\u7fa4\u80fd\u627f\u53d7\u7684\u538b\u529b\u4e5f\u63d0\u9ad8\u4e86\uff0c\u518d\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5c0f\u5c0f\u7684\u6539\u52a8\u70b9\u9700\u8981\u7275\u4e00\u53d1\u800c\u52a8\u5168\u8eab\u4e86\u3002 \u4ee5\u4e0a\u7684\u70b9\u4ece\u9ad8\u5e76\u53d1\u7684\u89d2\u5ea6\u800c\u8a00\uff0c\u4f3c\u4e4e\u90fd\u53ef\u4ee5\u5f52\u7c7b\u4e3a\u901a\u8fc7\u670d\u52a1\u62c6\u5206\u548c\u96c6\u7fa4\u7269\u7406\u673a\u5668\u7684\u6269\u5c55\u63d0\u9ad8\u4e86\u6574\u4f53\u7684\u7cfb\u7edf\u6297\u538b\u80fd\u529b\uff0c\u90a3\u4e48\uff0c\u968f\u4e4b\u62c6\u5206\u800c\u5e26\u6765\u7684\u95ee\u9898\u4e5f\u5c31\u662f\u9ad8\u5e76\u53d1\u7cfb\u7edf\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002 \u5728\u4e0b\u9762\u7684\u4e24\u4e2a\u7f51\u7ad9\u4e2d\u5bf9\u6b64\u8fdb\u884c\u4e86\u6df1\u5165\u5206\u6790:","title":"developer.51cto \u6253\u5de5\u4eba\uff0c\u652f\u6491\u4ebf\u7ea7\u9ad8\u5e76\u53d1\u7684\u7cfb\u7edf\u957f\u5565\u6837? # \u5fae\u670d\u52a1\u67b6\u6784\u6f14\u5316"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#amazon#microservices","text":"Microservices are an architectural and organizational approach to software development where software is composed of small independent services that communicate over well-defined APIs. These services are owned by small, self-contained teams. Microservices architectures make applications easier to scale and faster to develop, enabling innovation and accelerating time-to-market for new features.","title":"amazon Microservices"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#monolithic#vs#microservices#architecture","text":"","title":"Monolithic vs. Microservices Architecture"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#characteristics#of#microservices","text":"","title":"Characteristics of Microservices"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#autonomous","text":"","title":"Autonomous"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#specialized","text":"","title":"Specialized"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#benefits#of#microservices","text":"","title":"Benefits of Microservices"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#agility","text":"","title":"Agility"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#flexible#scaling","text":"","title":"Flexible Scaling"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#easy#deployment","text":"","title":"Easy Deployment"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#technological#freedom","text":"","title":"Technological Freedom"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#reusable#code","text":"","title":"Reusable Code"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#resilience","text":"","title":"Resilience"},{"location":"1Design/Design-pattern/Architecture-pattern/Service-oriented-architecture/Microservice/#microservicesio","text":"","title":"microservices.io"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/","text":"Task model \u5173\u4e8etask model\u7684\u5185\u5bb9 Computer multitasking Task parallelism Task (computing) Component NOTE: \u672c\u8282\u4ecb\u7ecdtask model\u7684component\uff0c\u5373\u5b83\u7684\u7ec4\u6210 Manager \u5728task model\u4e2d\uff0c\u5f80\u5f80\u6709**\u7ba1\u7406\u8005**\uff08manager\uff09\u7684\u89d2\u8272\uff0c\u5b83\u8d1f\u8d23**\u63a7\u5236**\u6574\u4e2a\u7cfb\u7edf\uff1a 1) \u8c03\u5ea6task\uff0c\u5177\u5907**\u8c03\u5ea6\u8005**\u7684\u89d2\u8272 \u5173\u4e8e\u8c03\u5ea6\uff0c\u53c2\u89c1\uff1a Scheduling (computing) 2) \u76d1\u63a7task\uff0c\u5982\u5bf9task\u7684resource usage\u8fdb\u884c\u76d1\u63a7\uff0c\u5177\u5907**\u76d1\u63a7\u8005**\u7684\u89d2\u8272 \u7528\u6237\u53ef\u4ee5\u5411manager\u8bf7\u6c42\u521b\u5efatask\u3001\u64cd\u4f5ctask\u7b49\u3002 Executor \u6267\u884ctask\u3002 How to model? NOTE: \u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u6765\u8fdb\u884c\u5efa\u6a21\u3002 \u4f7f\u7528task model\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u7684\u4e00\u4e9b\u95ee\u9898\uff1a task\u662f\u4ec0\u4e48 **\u7ba1\u7406\u8005**\u662f\u4ec0\u4e48 task\u7684**\u6267\u884c\u8005**\u662f\u4ec0\u4e48 \u4e0b\u9762\u4f7f\u7528task model\u6765\u63cf\u8ff0\u4e00\u4e9b\u7cfb\u7edf\uff1a 1) Computer multitasking **\u7ba1\u7406\u8005**\u662foperating system kernel\uff0ctask\u662fprocess\u6216thread\u7684\u6267\u884c\uff0c\u5b83\u7684\u6267\u884c\u8005\u662fCPU\u3002 2) Celery Task\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7531\u7528\u6237\u5b9a\u4e49\u7684task function\uff0c\u6267\u884c\u8005\u5176\u5b9e\u5c31\u662fprocess\u4e86\uff0c**\u8c03\u5ea6\u8005**\u5176\u5b9e\u5c31\u662f\u5b83\u7684 task queue \u4e86\uff0c\u663e\u7136\u548cOS kernel\u7684\u8c03\u5ea6\u8005\u76f8\u6bd4\uff0c\u5b83\u7684\u8c03\u5ea6\u7b56\u7565\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002 3) Coroutine Schedule operations \u672c\u8282\u4ecb\u7ecd\u5728task model\u4e2d\uff0c\u5bf9task\u8fdb\u884cschedule\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u7684\u4e00\u4e9b\u64cd\u4f5c\u3002 Suspend/yield yield\u662f\u4e3b\u52a8\u8ba9\u6e21\uff1b suspend\u662f\u88ab\u52a8\u88ab\u6302\u8d77\uff1b Resume Context switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c \u672c\u8282\u6240\u63cf\u8ff0\u7684context switch\u662f\u5e7f\u4e49\u7684context switch\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u5c40\u9650\u4e8eprocess\u7684context switch\u3002\u56e0\u4e3atask model\u4e2d\u5b58\u5728\u7740\u7684\u5e76\u53d1\u6267\u884c\u7684task\uff0c\u5e76\u4e14\u7ba1\u7406\u8005\u4f1a\u8fdb\u884c\u8c03\u5ea6\uff0c\u6240\u4ee5\u5c31\u4f1a\u53d1\u751fcontext switch\uff0c\u6bd4\u5982\uff1a git branch\uff0c Frictionless Context Switching \u6240\u4ee5\uff0ccontext switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c\u3002 \u4e0etask model\u76f8\u5173\u7684\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\uff1atask manager\uff0c\u6bd4\u5982 Task Manager (Windows) \u3002","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#task#model","text":"","title":"Task model"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#task#model_1","text":"Computer multitasking Task parallelism Task (computing)","title":"\u5173\u4e8etask model\u7684\u5185\u5bb9"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#component","text":"NOTE: \u672c\u8282\u4ecb\u7ecdtask model\u7684component\uff0c\u5373\u5b83\u7684\u7ec4\u6210","title":"Component"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#manager","text":"\u5728task model\u4e2d\uff0c\u5f80\u5f80\u6709**\u7ba1\u7406\u8005**\uff08manager\uff09\u7684\u89d2\u8272\uff0c\u5b83\u8d1f\u8d23**\u63a7\u5236**\u6574\u4e2a\u7cfb\u7edf\uff1a 1) \u8c03\u5ea6task\uff0c\u5177\u5907**\u8c03\u5ea6\u8005**\u7684\u89d2\u8272 \u5173\u4e8e\u8c03\u5ea6\uff0c\u53c2\u89c1\uff1a Scheduling (computing) 2) \u76d1\u63a7task\uff0c\u5982\u5bf9task\u7684resource usage\u8fdb\u884c\u76d1\u63a7\uff0c\u5177\u5907**\u76d1\u63a7\u8005**\u7684\u89d2\u8272 \u7528\u6237\u53ef\u4ee5\u5411manager\u8bf7\u6c42\u521b\u5efatask\u3001\u64cd\u4f5ctask\u7b49\u3002","title":"Manager"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#executor","text":"\u6267\u884ctask\u3002","title":"Executor"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#how#to#model","text":"NOTE: \u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u6765\u8fdb\u884c\u5efa\u6a21\u3002 \u4f7f\u7528task model\u7684\u65f6\u5019\uff0c\u9700\u8981\u8003\u8651\u7684\u4e00\u4e9b\u95ee\u9898\uff1a task\u662f\u4ec0\u4e48 **\u7ba1\u7406\u8005**\u662f\u4ec0\u4e48 task\u7684**\u6267\u884c\u8005**\u662f\u4ec0\u4e48 \u4e0b\u9762\u4f7f\u7528task model\u6765\u63cf\u8ff0\u4e00\u4e9b\u7cfb\u7edf\uff1a 1) Computer multitasking **\u7ba1\u7406\u8005**\u662foperating system kernel\uff0ctask\u662fprocess\u6216thread\u7684\u6267\u884c\uff0c\u5b83\u7684\u6267\u884c\u8005\u662fCPU\u3002 2) Celery Task\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u7531\u7528\u6237\u5b9a\u4e49\u7684task function\uff0c\u6267\u884c\u8005\u5176\u5b9e\u5c31\u662fprocess\u4e86\uff0c**\u8c03\u5ea6\u8005**\u5176\u5b9e\u5c31\u662f\u5b83\u7684 task queue \u4e86\uff0c\u663e\u7136\u548cOS kernel\u7684\u8c03\u5ea6\u8005\u76f8\u6bd4\uff0c\u5b83\u7684\u8c03\u5ea6\u7b56\u7565\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002 3) Coroutine","title":"How to model?"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#schedule#operations","text":"\u672c\u8282\u4ecb\u7ecd\u5728task model\u4e2d\uff0c\u5bf9task\u8fdb\u884cschedule\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u7684\u4e00\u4e9b\u64cd\u4f5c\u3002","title":"Schedule operations"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#suspendyield","text":"yield\u662f\u4e3b\u52a8\u8ba9\u6e21\uff1b suspend\u662f\u88ab\u52a8\u88ab\u6302\u8d77\uff1b","title":"Suspend/yield"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#resume","text":"","title":"Resume"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/#context#switchtask","text":"\u672c\u8282\u6240\u63cf\u8ff0\u7684context switch\u662f\u5e7f\u4e49\u7684context switch\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u5c40\u9650\u4e8eprocess\u7684context switch\u3002\u56e0\u4e3atask model\u4e2d\u5b58\u5728\u7740\u7684\u5e76\u53d1\u6267\u884c\u7684task\uff0c\u5e76\u4e14\u7ba1\u7406\u8005\u4f1a\u8fdb\u884c\u8c03\u5ea6\uff0c\u6240\u4ee5\u5c31\u4f1a\u53d1\u751fcontext switch\uff0c\u6bd4\u5982\uff1a git branch\uff0c Frictionless Context Switching \u6240\u4ee5\uff0ccontext switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c\u3002 \u4e0etask model\u76f8\u5173\u7684\u53e6\u5916\u4e00\u4e2a\u6982\u5ff5\u5c31\u662f\uff1atask manager\uff0c\u6bd4\u5982 Task Manager (Windows) \u3002","title":"Context switch\u662ftask\u6a21\u578b\u7684\u5fc5\u5907\u64cd\u4f5c"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/Schedule/","text":"Schedule wikipedia Scheduling (computing)","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/Schedule/#schedule","text":"","title":"Schedule"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/Schedule/#wikipedia#scheduling#computing","text":"","title":"wikipedia Scheduling (computing)"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/Schedule/Priority-inversion/","text":"Priority inversion wikipedia Priority inversion In computer science , priority inversion is a scenario in scheduling in which a high priority task is indirectly preempted by a lower priority task effectively inverting the relative priorities of the two tasks.","title":"Introduction"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/Schedule/Priority-inversion/#priority#inversion","text":"","title":"Priority inversion"},{"location":"1Design/Design-pattern/Architecture-pattern/Task-model/Schedule/Priority-inversion/#wikipedia#priority#inversion","text":"In computer science , priority inversion is a scenario in scheduling in which a high priority task is indirectly preempted by a lower priority task effectively inverting the relative priorities of the two tasks.","title":"wikipedia Priority inversion"},{"location":"1Design/Design-pattern/Pool/","text":"Pool \u5728\u9605\u8bfb stackoverflow What uses are there for \u201cplacement new\u201d? \u65f6\uff0c\u5176\u4e2d\u63d0\u53ca\u4e86memory pool\u6280\u672f\uff0c\u8fd9\u8ba9\u6211\u60f3\u8d77\u4e86\u6709\u5fc5\u8981\u5bf9pool\u8fdb\u884c\u603b\u7ed3\u3002 wikipedia Pool (computer science) In computer science , a pool is a collection of resources that are kept[ clarification needed ] ready to use, rather than acquired on use and released[ clarification needed ] afterwards. In this context, resources can refer to 1) system resources such as file handles , which are external to a process, or 2) internal resources such as objects . A pool client requests a resource from the pool and performs desired operations on the returned resource. When the client finishes its use of the resource, it is returned to the pool rather than released and lost.[ clarification needed ] The pooling of resources can offer a significant response-time boost in situations that have high cost associated with resource acquiring, high rate of the requests for resources, and a low overall count of simultaneously used resources. Pooling is also useful when the latency is a concern, because a pool offers predictable times required to obtain resources since they have already been acquired. These benefits are mostly true for system resources that require a system call , or remote resources that require a network communication, such as database connections , socket connections , threads , and memory allocation . Pooling is also useful for expensive-to-compute data, notably large graphic objects like fonts or bitmaps , acting essentially as a data cache or a memoization technique. NOTE: optimization\u3001performance Special cases of pools are connection pools , thread pools , and memory pools . Object pools Main article: Object pool pattern Pools can also be used for objects, in which context a pool refers to a design pattern for implementing pools in object-oriented languages , such as in the object pool pattern . Objects themselves hold no external resources and only occupy memory, although an already created object avoids the memory allocation required on object creation. Object pools are useful when the cost of object creation is high, but in certain situations this simple object pooling may not be efficient and could in fact decrease performance.[ 1] Connection pool \u53c2\u89c1 Connection-pool \u7ae0\u8282\u3002 Memory pool \u53c2\u89c1 Memory-pool \u7ae0\u8282\u3002 Thread pool \u53c2\u89c1\u5de5\u7a0b Parallel-computing \u7684 Thread-pool \u7ae0\u8282\u3002 Process pool \u53c2\u89c1 Prefork-process-pool \u7ae0\u8282\u3002 Celery pool stackoverflow Which pool class should i use prefork, eventlet or gevent in celery?","title":"Introduction"},{"location":"1Design/Design-pattern/Pool/#pool","text":"\u5728\u9605\u8bfb stackoverflow What uses are there for \u201cplacement new\u201d? \u65f6\uff0c\u5176\u4e2d\u63d0\u53ca\u4e86memory pool\u6280\u672f\uff0c\u8fd9\u8ba9\u6211\u60f3\u8d77\u4e86\u6709\u5fc5\u8981\u5bf9pool\u8fdb\u884c\u603b\u7ed3\u3002","title":"Pool"},{"location":"1Design/Design-pattern/Pool/#wikipedia#pool#computer#science","text":"In computer science , a pool is a collection of resources that are kept[ clarification needed ] ready to use, rather than acquired on use and released[ clarification needed ] afterwards. In this context, resources can refer to 1) system resources such as file handles , which are external to a process, or 2) internal resources such as objects . A pool client requests a resource from the pool and performs desired operations on the returned resource. When the client finishes its use of the resource, it is returned to the pool rather than released and lost.[ clarification needed ] The pooling of resources can offer a significant response-time boost in situations that have high cost associated with resource acquiring, high rate of the requests for resources, and a low overall count of simultaneously used resources. Pooling is also useful when the latency is a concern, because a pool offers predictable times required to obtain resources since they have already been acquired. These benefits are mostly true for system resources that require a system call , or remote resources that require a network communication, such as database connections , socket connections , threads , and memory allocation . Pooling is also useful for expensive-to-compute data, notably large graphic objects like fonts or bitmaps , acting essentially as a data cache or a memoization technique. NOTE: optimization\u3001performance Special cases of pools are connection pools , thread pools , and memory pools .","title":"wikipedia Pool (computer science)"},{"location":"1Design/Design-pattern/Pool/#object#pools","text":"Main article: Object pool pattern Pools can also be used for objects, in which context a pool refers to a design pattern for implementing pools in object-oriented languages , such as in the object pool pattern . Objects themselves hold no external resources and only occupy memory, although an already created object avoids the memory allocation required on object creation. Object pools are useful when the cost of object creation is high, but in certain situations this simple object pooling may not be efficient and could in fact decrease performance.[ 1]","title":"Object pools"},{"location":"1Design/Design-pattern/Pool/#connection#pool","text":"\u53c2\u89c1 Connection-pool \u7ae0\u8282\u3002","title":"Connection pool"},{"location":"1Design/Design-pattern/Pool/#memory#pool","text":"\u53c2\u89c1 Memory-pool \u7ae0\u8282\u3002","title":"Memory pool"},{"location":"1Design/Design-pattern/Pool/#thread#pool","text":"\u53c2\u89c1\u5de5\u7a0b Parallel-computing \u7684 Thread-pool \u7ae0\u8282\u3002","title":"Thread pool"},{"location":"1Design/Design-pattern/Pool/#process#pool","text":"\u53c2\u89c1 Prefork-process-pool \u7ae0\u8282\u3002","title":"Process pool"},{"location":"1Design/Design-pattern/Pool/#celery#pool","text":"stackoverflow Which pool class should i use prefork, eventlet or gevent in celery?","title":"Celery pool"},{"location":"1Design/Design-pattern/Pool/Connection-pool/","text":"Connection pool wikipedia connection pools Implementation redis-plus-plus redis Guidelines for Redis clients with support for Redis Sentinel hiredispool","title":"Introduction"},{"location":"1Design/Design-pattern/Pool/Connection-pool/#connection#pool","text":"","title":"Connection pool"},{"location":"1Design/Design-pattern/Pool/Connection-pool/#wikipedia#connection#pools","text":"","title":"wikipedia connection pools"},{"location":"1Design/Design-pattern/Pool/Connection-pool/#implementation","text":"","title":"Implementation"},{"location":"1Design/Design-pattern/Pool/Connection-pool/#redis-plus-plus","text":"","title":"redis-plus-plus"},{"location":"1Design/Design-pattern/Pool/Connection-pool/#redis#guidelines#for#redis#clients#with#support#for#redis#sentinel","text":"","title":"redis Guidelines for Redis clients with support for Redis Sentinel"},{"location":"1Design/Design-pattern/Pool/Connection-pool/#hiredispool","text":"","title":"hiredispool"},{"location":"1Design/Design-pattern/Pool/Memory-pool/","text":"Memory pool wikipedia Memory pool Memory pools , also called fixed-size blocks allocation , is the use of pools for memory management that allows dynamic memory allocation comparable to malloc or C++ 's operator new . As those implementations suffer from fragmentation because of variable block sizes, it is not recommendable to use them in a real time system due to performance. A more efficient solution is preallocating a number of memory blocks with the same size called the memory pool . The application can allocate, access, and free blocks represented by handles at run time . Implementation \u4e00\u3001\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u91cd\u8981\u7684optimization\u65b9\u5f0f\uff0c\u5728\u4e0b\u9762\u7684\u5de5\u7a0b\u3001\u7ae0\u8282\u4e2d\uff0c\u4f7f\u7528\u5230\u4e86\u5b83: 1\u3001rapidXML 2\u3001zeux-pugiXML 3\u3001 Expert-Jeff-Preshing\\Library-cpp11-on-multicore 4\u3001spdlog github cacay/Memory*Pool* Boost.Pool https://www.boost.org/ https://www.boost.org/doc/libs/1_75_0/ Pool Memory pool management. theboostcpplibraries Chapter 4. Boost.Pool TODO thinkingeek A very simple memory pool in C++11 stackoverflow What are the usual im\u00adple\u00admen\u00adta\u00adtion de\u00adtails be\u00adhind mem\u00adory pools?","title":"Introduction"},{"location":"1Design/Design-pattern/Pool/Memory-pool/#memory#pool","text":"","title":"Memory pool"},{"location":"1Design/Design-pattern/Pool/Memory-pool/#wikipedia#memory#pool","text":"Memory pools , also called fixed-size blocks allocation , is the use of pools for memory management that allows dynamic memory allocation comparable to malloc or C++ 's operator new . As those implementations suffer from fragmentation because of variable block sizes, it is not recommendable to use them in a real time system due to performance. A more efficient solution is preallocating a number of memory blocks with the same size called the memory pool . The application can allocate, access, and free blocks represented by handles at run time .","title":"wikipedia Memory pool"},{"location":"1Design/Design-pattern/Pool/Memory-pool/#implementation","text":"\u4e00\u3001\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u91cd\u8981\u7684optimization\u65b9\u5f0f\uff0c\u5728\u4e0b\u9762\u7684\u5de5\u7a0b\u3001\u7ae0\u8282\u4e2d\uff0c\u4f7f\u7528\u5230\u4e86\u5b83: 1\u3001rapidXML 2\u3001zeux-pugiXML 3\u3001 Expert-Jeff-Preshing\\Library-cpp11-on-multicore 4\u3001spdlog","title":"Implementation"},{"location":"1Design/Design-pattern/Pool/Memory-pool/#github#cacaymemorypool","text":"","title":"github cacay/Memory*Pool*"},{"location":"1Design/Design-pattern/Pool/Memory-pool/#boostpool","text":"https://www.boost.org/ https://www.boost.org/doc/libs/1_75_0/ Pool Memory pool management. theboostcpplibraries Chapter 4. Boost.Pool","title":"Boost.Pool"},{"location":"1Design/Design-pattern/Pool/Memory-pool/#todo","text":"thinkingeek A very simple memory pool in C++11 stackoverflow What are the usual im\u00adple\u00admen\u00adta\u00adtion de\u00adtails be\u00adhind mem\u00adory pools?","title":"TODO"},{"location":"1Design/Design-pattern/Pool/Memory-pool/C%2B%2BMemory-Pool-CTable/","text":"CTable Source code #pragma once #include <atomic> #include <new> /** * @brief MALLOC fail\uff0c\u53ef\u80fd\u539f\u56e0: * 1\u3001OOM * */ #define ERR_MALLOC -1 /** * @brief table\u5185\u5b58\u7a7a\u95f4\u4ee5\u53ca\u7528\u5b8c * */ #define ERR_TABLE_FULL -2 template < class T , uint8_t BLOCK_SIZE_BITS = 16 , uint8_t BLOCK_COUNT_BITS = 8 > class CTable { /** * \u6bcf\u5757\u8bb0\u5f55\u6570 */ static const uint32_t BLOCK_SIZE = ( 1 << BLOCK_SIZE_BITS ); /** * \u6700\u591a\u5757\u6570 */ static const uint32_t BLOCK_COUNT = ( 1 << BLOCK_COUNT_BITS ); /** * \u6bcf\u5757\u5185\u5b58\u5927\u5c0f */ static const size_t BLOCK_MEM_SIZE = BLOCK_SIZE * sizeof ( T ); public : CTable () : m_nBlockCount ( 0 ), m_nOffset ( 0 ), m_nRecordCount ( 0 ) { assert ( BLOCK_SIZE_BITS + BLOCK_COUNT_BITS <= 32 ); } ~ CTable () { Clear (); } bool Init ( int32_t x , int32_t y ) { return true ; } /** * @brief \u63d2\u5165\u4e00\u6761\u8bb0\u5f55 * * @param lpRecordNo \u8fd4\u56de\u65b0\u521b\u5efa\u7684\u8fd9\u6761\u8bb0\u5f55\u7684RecordNo * @param lpErrorNo \u9519\u8bef\u7801\uff0c\u662f\u5426\u521b\u5efa\u6210\u529f * @return \u6307\u5411\u65b0\u521b\u5efa\u7684\u8bb0\u5f55 */ T * CreateRecord ( uint32_t * lpRecordNo , int32_t * lpErrorNo = nullptr ) { T * lpRecord = nullptr ; Lock (); /** * @brief \u5f53\u5f53\u524dblock\u53ef\u7528(\u6709\u6709\u6548\u5185\u5b58\u7a7a\u95f4)\u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u5165\u5230\u8be5\u5206\u652f * m_nBlockCount\u7684\u521d\u59cb\u503c\u4e3a0\uff0c\u56e0\u6b64\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u8fdb\u5165\u8be5\u5206\u652f\uff0c\u4f1a\u8fdb\u5165\u5230\u4e0b\u4e00\u4e2a\u5206\u652f */ if (( m_nBlockCount > 0 ) && ( m_nOffset < BLOCK_MEM_SIZE )) { lpRecord = ( T * ) & m_Blocks [ m_nBlockCount - 1 ][ m_nOffset ]; m_nOffset += sizeof ( T ); * lpRecordNo = m_nRecordCount ++ ; } /** * @brief \u5f53\u9700\u8981\u5206\u914d\u65b0\u7684block\u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u5165\u8fd9\u4e2a\u5206\u652f\uff0c\u5728\u4e0b\u9762\u7684\u6761\u4ef6\u4e0b\u9700\u8981\u5206\u914d\u65b0\u7684block * 1\u3001\u7b2c\u4e00\u6b21\u8c03\u7528\u8be5\u51fd\u6570 * 2\u3001\u5f53\u524dblock\u5df2\u7ecf\u6ee1\u4e86\uff0c\u9700\u8981\u5206\u914d\u65b0\u7684block\u4e86 */ else if ( m_nBlockCount < BLOCK_COUNT ) { /** * \u4e00\u6b21\u6027\u5206\u914dBLOCK_MEM_SIZE\u5185\u5b58\u533a\u57df\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f: * new (std::nothrow) T[BLOCK_SIZE] \u662f\u4e00\u6b21\u6027\u5206\u914dBLOCK_SIZE\u6761T\u8bb0\u5f55\u6570\u7ec4 * \u8fd9\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u4e3a: BLOCK_MEM_SIZE = BLOCK_SIZE * sizeof(T) */ T * ptr = new ( std :: nothrow ) T [ BLOCK_SIZE ]; if ( ptr != nullptr ) { m_Blocks [ m_nBlockCount ++ ] = ( uint8_t * ) ptr ; lpRecord = ptr ; m_nOffset = sizeof ( T ); * lpRecordNo = m_nRecordCount ++ ; } else { if ( lpErrorNo != nullptr ) { * lpErrorNo = ERR_MALLOC ; } } } /** * @brief table\u5df2\u7ecf\u6ee1\u4e86 */ else { if ( lpErrorNo != nullptr ) { * lpErrorNo = ERR_TABLE_FULL ; } } Unlock (); return lpRecord ; } void Clear () { for ( uint32_t i = 0 ; i < m_nBlockCount ; ++ i ) { // free(m_Blocks[i]); delete [] ( T * ) m_Blocks [ i ]; } m_nBlockCount = 0 ; // m_nOffset = BLOCK_MEM_SIZE; m_nOffset = ( uint32_t ) BLOCK_MEM_SIZE ; m_nRecordCount = 0 ; } /** * @brief * * @param nRecordNo * @return */ T * GetRecord ( uint32_t nRecordNo ) { return ( T * ) ( m_Blocks [ GetBlock ( nRecordNo )] + GetIndex ( nRecordNo ) * sizeof ( T )); } /** * @brief \u83b7\u5f97\u5f53\u524d\u7684Record\u6570\u91cf * * @return */ uint32_t GetRecordCount () const { return m_nRecordCount ; } private : /** * @brief \u53d6block index * @param nRecordNo * @return */ uint32_t GetBlock ( uint32_t nRecordNo ) { return nRecordNo >> BLOCK_SIZE_BITS ; } /** * @brief \u53d6record index * @brief \u5c06nRecordNo\u7684\u4f4eBLOCK_COUNT_BITS\u4f4d\u4f5c\u4e3arecord index * @param nRecordNo * @return */ uint32_t GetIndex ( uint32_t nRecordNo ) { return nRecordNo & ( BLOCK_SIZE - 1 ); } void Lock () { /** * \u8f6e\u8bad\u76f4\u81f3m_lock\u7684\u503c\u4e3afalse */ while ( m_lock . test_and_set ()) ; } void Unlock () { /** * \u5c06m_lock\u7684\u503c\u7f6e\u4f4dfalse */ m_lock . clear (); } private : /** * \u5b9e\u73b0spinning lock */ std :: atomic_flag m_lock = ATOMIC_FLAG_INIT ; /** * \u5f53\u524d\u6709\u591a\u5c11\u5757 */ uint32_t m_nBlockCount ; /** * \u5f53\u524d\u5757\u5185\u504f\u79fb */ uint32_t m_nOffset ; /** * \u5f53\u524d\u8bb0\u5f55\u6570 */ uint32_t m_nRecordCount ; /** * static array\uff0carray\u7684\u7c7b\u578b\u662fuint8_t *\uff0c\u5bf9\u5e94\u7684\u662fbyte * \u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u4e3a\u6307\u5411block\u7684\u6307\u9488 */ uint8_t * m_Blocks [ BLOCK_COUNT ]; }; Memory space \u4e0b\u9762\u662f\u7c7b\u6bd4: Computer memory CTable \u6700\u5c0f\u5bfb\u5740\u5355\u4f4d byte record(\u7c7b\u578b\u4e3a T ) \u5730\u5740 memory address record number hierarchy/structure computer memory- contain ->page- contain ->byte CTable - contain ->Block- contain ->Record \u5730\u5740\u957f\u5ea6 L TODO: \u53ef\u4ee5\u8ba4\u4e3a\u662f sizeof(void*) \uff0c\u5373\u6307\u9488\u7c7b\u578b\u7684\u957f\u5ea6 PAGE_COUNT_BITS + PAGE_BITS BLOCK_COUNT_BITS + BLOCK_SIZE_BITS PAGE_COUNT_BITS BLOCK_COUNT_BITS PAGE_BITS BLOCK_SIZE_BITS \u5730\u5740\u957f\u5ea6\u662f\u5426\u56fa\u5b9a \u56fa\u5b9a \u4e0d\u56fa\u5b9a\uff0c\u6700\u5927\u4e3a32bit \u5982\u4f55\u5bfb\u5740 1\u3001\u5148\u5b9a\u4f4d\u5230page\uff0c\u7136\u540e\u518d\u5b9a\u4f4d\u5230byte 2\u3001\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\uff0c\u5c06memory address\u4ece\u7b2c PAGE_BITS \u8d77\u5230\u6700\u9ad8\u4f4d\u6b62\u7684\u6570\u5b57\uff0c\u4f5c\u4e3apage index\uff0c\u5b9a\u4f4d/\u5bfb\u5740\u5230\u6307\u5b9apage 3\u3001\u5c06memory address\u7684\u4f4e PAGE_BITS \u4e3a\uff0c\u4f5c\u4e3abyte index\uff0c\u5b9a\u4f4d/\u5bfb\u5740\u5230byte 1\u3001\u5148\u5b9a\u4f4d\u5230Block\uff0c\u7136\u540e\u518d\u5b9a\u4f4d\u5230Record 2\u3001\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\uff0c\u5c06record number\u4ece\u7b2c BLOCK_SIZE_BITS \u8d77\u7684 BLOCK_COUNT_BITS \u4f4d\u6570\u5b57\uff0c\u4f5c\u4e3ablock index\uff0c\u5b9a\u4f4d/\u5bfb\u5740\u5230block 3\u3001\u5c06record number\u7684\u4f4e BLOCK_COUNT_BITS \u4f4d\uff0c\u4f5c\u4e3arecord index\uff0c\u5b9a\u4f4d/\u5bfb\u5740\u5230record \u5730\u5740\u7a7a\u95f4\u5927\u5c0f 2^{L} 2^{L} 2^{L} * sizeof(T) 2^{L} * sizeof(T) \u5185\u5b58\u5206\u914d\u5355\u4f4d Computer memory CTable page record \u6700\u5927memory\u5927\u5c0f BLOCK_COUNT \u4e2a block\uff1b \u6bcf\u4e2ablock\u7684\u5927\u5c0f\u4e3a: BLOCK_SIZE * sizeof(T) \u56e0\u6b64\uff0c\u603b\u5927\u5c0f\u4e3a: BLOCK_COUNT * BLOCK_SIZE * sizeof(T) \u7531\u4e8e\u5728constructor\u4e2d\uff0c\u6dfb\u52a0\u4e86\u5982\u4e0b\u9650\u5236: assert ( BLOCK_SIZE_BITS + BLOCK_COUNT_BITS <= 32 ); \u5373\u6700\u5927\u4e3a: 2^{32} 2^{32} \u6761\u8bb0\u5f55\u3002 Spinning lock \u4f7f\u7528 std::atomic_flag \u5b9e\u73b0\u4e86\u4e00\u4e2aspinning lock\uff0c\u5173\u4e8e\u5b83\u7684\u5b9e\u73b0\uff0c\u53c2\u89c1: 1\u3001\u5de5\u7a0bprogramming-language\u7684 C++\\Language-reference\\Basic-concept\\Abstract-machine\\Memory-model\\Memory-model\\Atomic-operations-library\\std-atomic_flag \u7ae0\u8282 2\u3001\u5de5\u7a0bparallel-computing\u7684 Concurrent-computing\\Concurrency-control\\Mutual-exclusion\\Lock\\Spinlock \u7ae0\u8282\uff1b Postfix increment operator \u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7528\u5230\u4e86\u89d2\u5ea6\u7684Postfix increment operator\uff0c\u63d0\u9192\u4e00\u70b9\u5982\u4e0b: Postfix increment operator\u5148\u8fd4\u56de\u539f\u503c\uff0c\u7136\u540eincrement \u3002 Linkged page\u3001Unrolled linked list \u5178\u578b\u7684\u4f7f\u7528Linkged page\u3001Unrolled linked list\u6765\u5b9e\u73b0memory pool\u3002","title":"Introduction"},{"location":"1Design/Design-pattern/Pool/Memory-pool/C%2B%2BMemory-Pool-CTable/#ctable","text":"","title":"CTable"},{"location":"1Design/Design-pattern/Pool/Memory-pool/C%2B%2BMemory-Pool-CTable/#source#code","text":"#pragma once #include <atomic> #include <new> /** * @brief MALLOC fail\uff0c\u53ef\u80fd\u539f\u56e0: * 1\u3001OOM * */ #define ERR_MALLOC -1 /** * @brief table\u5185\u5b58\u7a7a\u95f4\u4ee5\u53ca\u7528\u5b8c * */ #define ERR_TABLE_FULL -2 template < class T , uint8_t BLOCK_SIZE_BITS = 16 , uint8_t BLOCK_COUNT_BITS = 8 > class CTable { /** * \u6bcf\u5757\u8bb0\u5f55\u6570 */ static const uint32_t BLOCK_SIZE = ( 1 << BLOCK_SIZE_BITS ); /** * \u6700\u591a\u5757\u6570 */ static const uint32_t BLOCK_COUNT = ( 1 << BLOCK_COUNT_BITS ); /** * \u6bcf\u5757\u5185\u5b58\u5927\u5c0f */ static const size_t BLOCK_MEM_SIZE = BLOCK_SIZE * sizeof ( T ); public : CTable () : m_nBlockCount ( 0 ), m_nOffset ( 0 ), m_nRecordCount ( 0 ) { assert ( BLOCK_SIZE_BITS + BLOCK_COUNT_BITS <= 32 ); } ~ CTable () { Clear (); } bool Init ( int32_t x , int32_t y ) { return true ; } /** * @brief \u63d2\u5165\u4e00\u6761\u8bb0\u5f55 * * @param lpRecordNo \u8fd4\u56de\u65b0\u521b\u5efa\u7684\u8fd9\u6761\u8bb0\u5f55\u7684RecordNo * @param lpErrorNo \u9519\u8bef\u7801\uff0c\u662f\u5426\u521b\u5efa\u6210\u529f * @return \u6307\u5411\u65b0\u521b\u5efa\u7684\u8bb0\u5f55 */ T * CreateRecord ( uint32_t * lpRecordNo , int32_t * lpErrorNo = nullptr ) { T * lpRecord = nullptr ; Lock (); /** * @brief \u5f53\u5f53\u524dblock\u53ef\u7528(\u6709\u6709\u6548\u5185\u5b58\u7a7a\u95f4)\u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u5165\u5230\u8be5\u5206\u652f * m_nBlockCount\u7684\u521d\u59cb\u503c\u4e3a0\uff0c\u56e0\u6b64\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528\u8be5\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u8fdb\u5165\u8be5\u5206\u652f\uff0c\u4f1a\u8fdb\u5165\u5230\u4e0b\u4e00\u4e2a\u5206\u652f */ if (( m_nBlockCount > 0 ) && ( m_nOffset < BLOCK_MEM_SIZE )) { lpRecord = ( T * ) & m_Blocks [ m_nBlockCount - 1 ][ m_nOffset ]; m_nOffset += sizeof ( T ); * lpRecordNo = m_nRecordCount ++ ; } /** * @brief \u5f53\u9700\u8981\u5206\u914d\u65b0\u7684block\u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u5165\u8fd9\u4e2a\u5206\u652f\uff0c\u5728\u4e0b\u9762\u7684\u6761\u4ef6\u4e0b\u9700\u8981\u5206\u914d\u65b0\u7684block * 1\u3001\u7b2c\u4e00\u6b21\u8c03\u7528\u8be5\u51fd\u6570 * 2\u3001\u5f53\u524dblock\u5df2\u7ecf\u6ee1\u4e86\uff0c\u9700\u8981\u5206\u914d\u65b0\u7684block\u4e86 */ else if ( m_nBlockCount < BLOCK_COUNT ) { /** * \u4e00\u6b21\u6027\u5206\u914dBLOCK_MEM_SIZE\u5185\u5b58\u533a\u57df\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f: * new (std::nothrow) T[BLOCK_SIZE] \u662f\u4e00\u6b21\u6027\u5206\u914dBLOCK_SIZE\u6761T\u8bb0\u5f55\u6570\u7ec4 * \u8fd9\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u4e3a: BLOCK_MEM_SIZE = BLOCK_SIZE * sizeof(T) */ T * ptr = new ( std :: nothrow ) T [ BLOCK_SIZE ]; if ( ptr != nullptr ) { m_Blocks [ m_nBlockCount ++ ] = ( uint8_t * ) ptr ; lpRecord = ptr ; m_nOffset = sizeof ( T ); * lpRecordNo = m_nRecordCount ++ ; } else { if ( lpErrorNo != nullptr ) { * lpErrorNo = ERR_MALLOC ; } } } /** * @brief table\u5df2\u7ecf\u6ee1\u4e86 */ else { if ( lpErrorNo != nullptr ) { * lpErrorNo = ERR_TABLE_FULL ; } } Unlock (); return lpRecord ; } void Clear () { for ( uint32_t i = 0 ; i < m_nBlockCount ; ++ i ) { // free(m_Blocks[i]); delete [] ( T * ) m_Blocks [ i ]; } m_nBlockCount = 0 ; // m_nOffset = BLOCK_MEM_SIZE; m_nOffset = ( uint32_t ) BLOCK_MEM_SIZE ; m_nRecordCount = 0 ; } /** * @brief * * @param nRecordNo * @return */ T * GetRecord ( uint32_t nRecordNo ) { return ( T * ) ( m_Blocks [ GetBlock ( nRecordNo )] + GetIndex ( nRecordNo ) * sizeof ( T )); } /** * @brief \u83b7\u5f97\u5f53\u524d\u7684Record\u6570\u91cf * * @return */ uint32_t GetRecordCount () const { return m_nRecordCount ; } private : /** * @brief \u53d6block index * @param nRecordNo * @return */ uint32_t GetBlock ( uint32_t nRecordNo ) { return nRecordNo >> BLOCK_SIZE_BITS ; } /** * @brief \u53d6record index * @brief \u5c06nRecordNo\u7684\u4f4eBLOCK_COUNT_BITS\u4f4d\u4f5c\u4e3arecord index * @param nRecordNo * @return */ uint32_t GetIndex ( uint32_t nRecordNo ) { return nRecordNo & ( BLOCK_SIZE - 1 ); } void Lock () { /** * \u8f6e\u8bad\u76f4\u81f3m_lock\u7684\u503c\u4e3afalse */ while ( m_lock . test_and_set ()) ; } void Unlock () { /** * \u5c06m_lock\u7684\u503c\u7f6e\u4f4dfalse */ m_lock . clear (); } private : /** * \u5b9e\u73b0spinning lock */ std :: atomic_flag m_lock = ATOMIC_FLAG_INIT ; /** * \u5f53\u524d\u6709\u591a\u5c11\u5757 */ uint32_t m_nBlockCount ; /** * \u5f53\u524d\u5757\u5185\u504f\u79fb */ uint32_t m_nOffset ; /** * \u5f53\u524d\u8bb0\u5f55\u6570 */ uint32_t m_nRecordCount ; /** * static array\uff0carray\u7684\u7c7b\u578b\u662fuint8_t *\uff0c\u5bf9\u5e94\u7684\u662fbyte * \u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u4e3a\u6307\u5411block\u7684\u6307\u9488 */ uint8_t * m_Blocks [ BLOCK_COUNT ]; };","title":"Source code"},{"location":"1Design/Design-pattern/Pool/Memory-pool/C%2B%2BMemory-Pool-CTable/#memory#space","text":"\u4e0b\u9762\u662f\u7c7b\u6bd4: Computer memory CTable \u6700\u5c0f\u5bfb\u5740\u5355\u4f4d byte record(\u7c7b\u578b\u4e3a T ) \u5730\u5740 memory address record number hierarchy/structure computer memory- contain ->page- contain ->byte CTable - contain ->Block- contain ->Record \u5730\u5740\u957f\u5ea6 L TODO: \u53ef\u4ee5\u8ba4\u4e3a\u662f sizeof(void*) \uff0c\u5373\u6307\u9488\u7c7b\u578b\u7684\u957f\u5ea6 PAGE_COUNT_BITS + PAGE_BITS BLOCK_COUNT_BITS + BLOCK_SIZE_BITS PAGE_COUNT_BITS BLOCK_COUNT_BITS PAGE_BITS BLOCK_SIZE_BITS \u5730\u5740\u957f\u5ea6\u662f\u5426\u56fa\u5b9a \u56fa\u5b9a \u4e0d\u56fa\u5b9a\uff0c\u6700\u5927\u4e3a32bit \u5982\u4f55\u5bfb\u5740 1\u3001\u5148\u5b9a\u4f4d\u5230page\uff0c\u7136\u540e\u518d\u5b9a\u4f4d\u5230byte 2\u3001\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\uff0c\u5c06memory address\u4ece\u7b2c PAGE_BITS \u8d77\u5230\u6700\u9ad8\u4f4d\u6b62\u7684\u6570\u5b57\uff0c\u4f5c\u4e3apage index\uff0c\u5b9a\u4f4d/\u5bfb\u5740\u5230\u6307\u5b9apage 3\u3001\u5c06memory address\u7684\u4f4e PAGE_BITS \u4e3a\uff0c\u4f5c\u4e3abyte index\uff0c\u5b9a\u4f4d/\u5bfb\u5740\u5230byte 1\u3001\u5148\u5b9a\u4f4d\u5230Block\uff0c\u7136\u540e\u518d\u5b9a\u4f4d\u5230Record 2\u3001\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\uff0c\u5c06record number\u4ece\u7b2c BLOCK_SIZE_BITS \u8d77\u7684 BLOCK_COUNT_BITS \u4f4d\u6570\u5b57\uff0c\u4f5c\u4e3ablock index\uff0c\u5b9a\u4f4d/\u5bfb\u5740\u5230block 3\u3001\u5c06record number\u7684\u4f4e BLOCK_COUNT_BITS \u4f4d\uff0c\u4f5c\u4e3arecord index\uff0c\u5b9a\u4f4d/\u5bfb\u5740\u5230record \u5730\u5740\u7a7a\u95f4\u5927\u5c0f 2^{L} 2^{L} 2^{L} * sizeof(T) 2^{L} * sizeof(T)","title":"Memory space"},{"location":"1Design/Design-pattern/Pool/Memory-pool/C%2B%2BMemory-Pool-CTable/#_1","text":"Computer memory CTable page record","title":"\u5185\u5b58\u5206\u914d\u5355\u4f4d"},{"location":"1Design/Design-pattern/Pool/Memory-pool/C%2B%2BMemory-Pool-CTable/#memory","text":"BLOCK_COUNT \u4e2a block\uff1b \u6bcf\u4e2ablock\u7684\u5927\u5c0f\u4e3a: BLOCK_SIZE * sizeof(T) \u56e0\u6b64\uff0c\u603b\u5927\u5c0f\u4e3a: BLOCK_COUNT * BLOCK_SIZE * sizeof(T) \u7531\u4e8e\u5728constructor\u4e2d\uff0c\u6dfb\u52a0\u4e86\u5982\u4e0b\u9650\u5236: assert ( BLOCK_SIZE_BITS + BLOCK_COUNT_BITS <= 32 ); \u5373\u6700\u5927\u4e3a: 2^{32} 2^{32} \u6761\u8bb0\u5f55\u3002","title":"\u6700\u5927memory\u5927\u5c0f"},{"location":"1Design/Design-pattern/Pool/Memory-pool/C%2B%2BMemory-Pool-CTable/#spinning#lock","text":"\u4f7f\u7528 std::atomic_flag \u5b9e\u73b0\u4e86\u4e00\u4e2aspinning lock\uff0c\u5173\u4e8e\u5b83\u7684\u5b9e\u73b0\uff0c\u53c2\u89c1: 1\u3001\u5de5\u7a0bprogramming-language\u7684 C++\\Language-reference\\Basic-concept\\Abstract-machine\\Memory-model\\Memory-model\\Atomic-operations-library\\std-atomic_flag \u7ae0\u8282 2\u3001\u5de5\u7a0bparallel-computing\u7684 Concurrent-computing\\Concurrency-control\\Mutual-exclusion\\Lock\\Spinlock \u7ae0\u8282\uff1b","title":"Spinning lock"},{"location":"1Design/Design-pattern/Pool/Memory-pool/C%2B%2BMemory-Pool-CTable/#postfix#increment#operator","text":"\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7528\u5230\u4e86\u89d2\u5ea6\u7684Postfix increment operator\uff0c\u63d0\u9192\u4e00\u70b9\u5982\u4e0b: Postfix increment operator\u5148\u8fd4\u56de\u539f\u503c\uff0c\u7136\u540eincrement \u3002","title":"Postfix increment operator"},{"location":"1Design/Design-pattern/Pool/Memory-pool/C%2B%2BMemory-Pool-CTable/#linkged#pageunrolled#linked#list","text":"\u5178\u578b\u7684\u4f7f\u7528Linkged page\u3001Unrolled linked list\u6765\u5b9e\u73b0memory pool\u3002","title":"Linkged page\u3001Unrolled linked list"},{"location":"1Design/Design-pattern/Pool/Prefork-process-pool/","text":"Prefork\u3001process pool \u5e94\u7528\u4e86prefork\u7684\u6709\uff1a Apache MPM prefork gunicorn Server Model celery python What exactly is a pre-fork web server model? Python multiprocessing \u2014 Process-based parallelism \u00b6","title":"Introduction"},{"location":"1Design/Design-pattern/Pool/Prefork-process-pool/#preforkprocess#pool","text":"\u5e94\u7528\u4e86prefork\u7684\u6709\uff1a Apache MPM prefork gunicorn Server Model celery python What exactly is a pre-fork web server model? Python multiprocessing \u2014 Process-based parallelism \u00b6","title":"Prefork\u3001process pool"},{"location":"1Design/Principle/","text":"\u5173\u4e8e\u672c\u7ae0 \u672c\u7ae0\u8ba8\u8bbasoftware design\u7684\u4e00\u4e9b\u57fa\u672c\u539f\u5219\uff0c\u628a\u6211\u8fd9\u4e9b\u57fa\u672c\u539f\u5219\uff0c\u6211\u4eec\u80fd\u591f\u8bbe\u8ba1\u51fa\u66f4\u597d\u7684software\u3002","title":"Introduction"},{"location":"1Design/Principle/#_1","text":"\u672c\u7ae0\u8ba8\u8bbasoftware design\u7684\u4e00\u4e9b\u57fa\u672c\u539f\u5219\uff0c\u628a\u6211\u8fd9\u4e9b\u57fa\u672c\u539f\u5219\uff0c\u6211\u4eec\u80fd\u591f\u8bbe\u8ba1\u51fa\u66f4\u597d\u7684software\u3002","title":"\u5173\u4e8e\u672c\u7ae0"},{"location":"1Design/Principle/Abstraction/Abstraction-in-software-design/","text":"Abstraction and architecture \u5728\u8fdb\u884c\u7cfb\u7edf\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c loose coupling \u662f\u67b6\u6784\u5e08\u7684\u8ffd\u6c42\u76ee\u6807\uff0c\u4e3a\u6b64\uff0c\u67b6\u6784\u5e08\u4eec\u5f80\u5f80\u8fdb\u884c\u5206\u89e3\uff0c\u6bd4\u5982\u5c06\u7cfb\u7edf\u5206\u89e3\u4e3a\u591a\u4e2a components \uff0c\u7136\u540e\u5404 components \u62bd\u8c61\u51fa \u63a5\u53e3 \uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\uff0c\u663e\u7136\uff0c\u63a5\u53e3\u5c31\u662f\u5bf9\u529f\u80fd\u7684\u62bd\u8c61\u63cf\u8ff0\u3002\u5404 components \u5f7c\u6b64\u76f8\u4e92\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ec6\u8282\uff09\uff0c\u901a\u8fc7 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\u3002 NOTE: draft: 1\u3001\u5206\u89e3-\u300b\u5404\u4e2a\u90e8\u5206\u4e4b\u95f4\u9700\u8981\u7ea6\u5b9ainterface\uff0c\u56e0\u6b64interface\u662f\u9700\u8981\u5305\u542b\u975e\u5e38\u591a\u7684\u5185\u5bb9\u7684 2\u3001\u5206\u89e3\uff0c\u5404\u4e2a\u5c42\u6b21/\u90e8\u5206 \uff0c\u76f4\u63a5\u901a\u8fc7\u62bd\u8c61\u7684\u63a5\u53e3\u8fdb\u884c\u4ea4\u4e92 \u5206\u5c42/layer \u4e00\u79cd\u5e38\u89c1\u7684\u5206\u89e3\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\u3002\u8fd9\u79cd\u67b6\u6784\u65b9\u5f0f\u666e\u904d\u5b58\u5728: 1\u3001\u5728 Software-design\\Design-pattern\\Architecture-pattern\\Multilayered-architecture \u4e2d\u8fdb\u884c\u4e86\u4e13\u95e8\u4ecb\u7ecd\u3002 2\u3001\u5728AOP\u4e2d\uff0c\u4e5f\u4ecb\u7ecd\u4e86layer\uff0c\u53c2\u89c1\u5de5\u7a0bprogramming-language\u7684 Theory\\Programming-paradigm\\Aspect-oriented-programming \u7ae0\u8282 \u63a5\u53e3 \u5728\u5de5\u7a0bprogramming language\u7684 Interface \u7ae0\u8282\u4e2d\u5bf9interface\u8fdb\u884c\u4e86\u5177\u4f53\u7684\u63cf\u8ff0\u3002","title":"Abstraction-in-software-design"},{"location":"1Design/Principle/Abstraction/Abstraction-in-software-design/#abstraction#and#architecture","text":"\u5728\u8fdb\u884c\u7cfb\u7edf\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c loose coupling \u662f\u67b6\u6784\u5e08\u7684\u8ffd\u6c42\u76ee\u6807\uff0c\u4e3a\u6b64\uff0c\u67b6\u6784\u5e08\u4eec\u5f80\u5f80\u8fdb\u884c\u5206\u89e3\uff0c\u6bd4\u5982\u5c06\u7cfb\u7edf\u5206\u89e3\u4e3a\u591a\u4e2a components \uff0c\u7136\u540e\u5404 components \u62bd\u8c61\u51fa \u63a5\u53e3 \uff0c\u5b83\u4eec\u4e4b\u95f4\u5c31\u901a\u8fc7\u62bd\u8c61\u7684 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\uff0c\u663e\u7136\uff0c\u63a5\u53e3\u5c31\u662f\u5bf9\u529f\u80fd\u7684\u62bd\u8c61\u63cf\u8ff0\u3002\u5404 components \u5f7c\u6b64\u76f8\u4e92\u900f\u660e\uff08\u9690\u85cf\u5185\u90e8\u7ec6\u8282\uff09\uff0c\u901a\u8fc7 \u63a5\u53e3 \u6765\u8fdb\u884c\u4ea4\u4e92\u3002 NOTE: draft: 1\u3001\u5206\u89e3-\u300b\u5404\u4e2a\u90e8\u5206\u4e4b\u95f4\u9700\u8981\u7ea6\u5b9ainterface\uff0c\u56e0\u6b64interface\u662f\u9700\u8981\u5305\u542b\u975e\u5e38\u591a\u7684\u5185\u5bb9\u7684 2\u3001\u5206\u89e3\uff0c\u5404\u4e2a\u5c42\u6b21/\u90e8\u5206 \uff0c\u76f4\u63a5\u901a\u8fc7\u62bd\u8c61\u7684\u63a5\u53e3\u8fdb\u884c\u4ea4\u4e92","title":"Abstraction and architecture"},{"location":"1Design/Principle/Abstraction/Abstraction-in-software-design/#layer","text":"\u4e00\u79cd\u5e38\u89c1\u7684\u5206\u89e3\u65b9\u5f0f\u662f\uff1a\u5206\u5c42\u3002\u8fd9\u79cd\u67b6\u6784\u65b9\u5f0f\u666e\u904d\u5b58\u5728: 1\u3001\u5728 Software-design\\Design-pattern\\Architecture-pattern\\Multilayered-architecture \u4e2d\u8fdb\u884c\u4e86\u4e13\u95e8\u4ecb\u7ecd\u3002 2\u3001\u5728AOP\u4e2d\uff0c\u4e5f\u4ecb\u7ecd\u4e86layer\uff0c\u53c2\u89c1\u5de5\u7a0bprogramming-language\u7684 Theory\\Programming-paradigm\\Aspect-oriented-programming \u7ae0\u8282","title":"\u5206\u5c42/layer"},{"location":"1Design/Principle/Abstraction/Abstraction-in-software-design/#_1","text":"\u5728\u5de5\u7a0bprogramming language\u7684 Interface \u7ae0\u8282\u4e2d\u5bf9interface\u8fdb\u884c\u4e86\u5177\u4f53\u7684\u63cf\u8ff0\u3002","title":"\u63a5\u53e3"},{"location":"1Design/Principle/Control-theory/","text":"Control theory \u672c\u7ae0\u7684\u6807\u9898\u7684\u542b\u4e49\u662f\uff1a\u63a7\u5236\u8bba\u3002 control\u662f\u4e00\u4e2a\u975e\u5e38\u62bd\u8c61\u7684\u3001\u5bbd\u6cdb\u7684\u6982\u5ff5\uff0c\u6211\u662f\u5728\u5b66\u4e60 Inversion of control \u7684\u65f6\u5019\uff0c\u5f00\u59cb\u601d\u8003\u5b83\u7684\u3002\u4ece\u201ccontrol\u201d\u6982\u5ff5\u51fa\u53d1\uff0c\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u5f88\u591acomputer science\u4e2d\u7684\u95ee\u9898\uff0c\u66f4\u52a0\u91cd\u8981\u7684\u662f\uff1a\u5efa\u7acb\u8d77\u8fd9\u4e2a\u6982\u5ff5\uff0c\u80fd\u591f\u8ba9\u6211\u4eec\u4ece\u66f4\u52a0\u9ad8\u7684\u89d2\u5ea6\u6765\u601d\u8003\u6211\u4eec\u9047\u5230\u7684\u95ee\u9898\uff0c\u5728\u201cWhat is control\u201d\u4e2d\uff0c\u6211\u4eec\u5c06\u4ece\u201crelation\u201d\u7684\u89d2\u5ea6\u6765\u63cf\u8ff0\u201ccontrol\u201d\uff0c\u57fa\u4e8e\u201crelation\u201d\u7684\u63cf\u8ff0\uff0c\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u5206\u6790\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\u5404\u4e2a\u89d2\u8272\u4e4b\u95f4\u7684\u5173\u7cfb\u3001\u4ece\u800c\u505a\u51fa\u66f4\u597d\u7684\u8bbe\u8ba1\u3002 What is control ? \u8bed\u8a00\u7684\u8ff7\u60d1\u6027\u5728\u4e8e: \u540c\u4e00\u4e2a\u8bcd\u8bed\uff0c\u6709\u7684\u65f6\u5019\u8868\u793a\u7684\u662f\u52a8\u8bcd\uff0c\u6709\u7684\u65f6\u5019\u8868\u793a\u7684\u540d\u8bcd\uff1b\u201ccontrol\u201d\u8fd9\u4e2a\u8bcd\u8bed\u5c31\u662f\u8fd9\u6837\u7684: \u8bcd\u6027 \u89e3\u610f example \u540d\u8bcd power to direct or determine control flow \u3001 inversion of control \u52a8\u8bcd control the company \u4ecerelation\u7684\u89d2\u5ea6\u6765\u770b: control\uff08\u540d\u8bcd\uff09\u662f\u4e00\u79cd\u5173\u7cfb: \u63a7\u5236\u65b9---control----\u53d7\u63a7\u65b9 \u63a7\u5236\u65b9 \u62e5\u6709 \u7740 \u63a7\u5236\u6743 \u3002 \u201c\u53d7\u63a7\u4e8e\u201d\u3002 What is control theory ? \u672c\u6587\u6807\u9898\u7684control theory\u662f\u6211\u81ea\u5df1\u521b\u9020\u7684\u4e00\u4e2a\u540d\u8bcd\uff0c\u6211\u4ec5\u4ec5\u662f\u4e3a\u4e86\u4fbf\u4e8e\u540e\u7eed\u5728\u5176\u5b83\u7684\u6587\u7ae0\u4e2d\u5f15\u7528\u5b83\u3002\u540e\u6765Google\u540e\u624d\u53d1\u73b0: control theory \u5176\u5b9e\u662f\u4e00\u95e8\u5b66\u79d1\uff0c\u53c2\u89c1 wikipedia Control theory \u3002\u6211\u4e0d\u600e\u4e48\u4e25\u8c28\u7684\u8ba4\u4e3a\uff1a\u672c\u6587\u6240\u8ba8\u8bba\u7684control theory\u5176\u5b9e\u4e5f\u662f\u5c5e\u4e8e\u4e13\u4e1a\u9886\u57df\u7684control theory\u7684\u3002 Examples example explanation GC GC \u63a7\u5236\u7740 object\u7684lifetime wikipedia Garbage collection Scheduler Scheduler \u63a7\u5236\u7740 process\u7684\u6267\u884c wikipedia Scheduling(computing) DI container Container \u63a7\u5236\u7740 dependency\u7684injection wikipedia Dependency injection Event-driven framework Framework \u63a7\u5236\u7740 event\u548cevent handler\u4e4b\u95f4\u7684\u6620\u5c04 - wikipedia Event-driven architecture - wikipedia Event-driven programming Take control to make it computational \u5728\u5de5\u7a0bdiscrete\u7684 Relation-structure-computation\\Computation\\Make-it-computational \u7ae0\u8282\u4e2d\u8ba8\u8bba\u4e86\"make it computational\"\u3002 \u5bf9\u4e8e\u672a\u77e5\u7684\u3001\u65e0\u5e8f\u7684\u3001\u4e0d\u53ef\u9760\u7684\uff0c\u6211\u4eec\u4e0d\u53ef\u4f9d\u8d56\u4e8e\uff0c\u5b83\u4eec\u90fd\u662funcomputational\u7684\uff0c\u4e3a\u4e86make it computational\uff0c\u6211\u4eec\u8981\u8fdb\u884c\u663e\u5f0f\u7684\u3001\u53ef\u9760\u7684\u63a7\u5236(take control) 1) \u8981\u4e48IOC\uff0c\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9framework\uff0c\u7531\u5b83\u6765\u8fdb\u884c\u63a7\u5236; 2) \u8981\u4e48\u7531programmer\u4e3b\u52a8take control\uff0c\u52a0\u5165ordering\uff0c\u4ece\u800cmake it computational; Ordering Take control->\u4e3b\u52a8\u52a0\u5165ordering->make it computational\u3002 \u53c2\u89c1\u5de5\u7a0bdiscrete\u7684 Relation-structure-computation\\Computation\\Make-it-computational\\Ordering \u7ae0\u8282\u3002 Give control to programmer \"give control to programmer\"\u80fd\u591f\u89e3\u91cacomputer science\u4e2d\u7684\u975e\u5e38\u591a\u7684\u5185\u5bb9\u3002 Programming language\u7ed9\u4e88programmer\u5bf9computation\u7684\u63a7\u5236 Programming language\u63d0\u4f9b\u7684\u5404\u79cdspecifier\u3001language support library\u57fa\u4e8e\u4e86programmer\u5bf9computation\u7684\u63a7\u5236\uff0c\u5173\u4e8e\u8fd9\u4e2a\u89c2\u70b9\uff0c\u53c2\u89c1\u5de5\u7a0bprogramming-language\u7684 Theory\\Programming-language\\How-to-master-programming-language \u7ae0\u8282\u3002 Coroutine and cooperative-multitasking \"coroutine\"\u57fa\u4e8e\u4e86programmer schedule\u7684\u6743\u5229\u3002 OS kernel\u662fIOC\uff0c\u7531\u5b83\u6765\u63a7\u5236process\u7684schedule\u3002 \u6539\u53d8control relation \u5728\u4e00\u4e2asystem\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u5904\u4e8e\u5404\u79cd\u539f\u56e0\u9700\u8981\u6539\u53d8control relation\uff0c\u6539\u53d8control relation\u610f\u5473\u7740**\u63a7\u5236\u6743**\u7684\u79fb\u4ea4\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50: IOC IOC\u5c31\u662f\u5178\u578b\u7684\u6539\u53d8control relation\u7684\u4f8b\u5b50\uff1a\u5c06**\u63a7\u5236\u6743**\u79fb\u4ea4\u7ed9framework\u3002\u5c06\u5728\u4e0b\u4e00\u4e2a\u7ae0\u8282\u5bf9\u5b83\u8fdb\u884c\u4ecb\u7ecd\u3002 Automatic memory management automatic memory management\u5c31\u662f\u5178\u578b\u7684\u5c06memory management\u7684control\u79fb\u4ea4\u3002 GC std::shared_ptr Framework Event-driven framework event driven and call back draft \u63a7\u5236\u6743\uff0c\u638c\u63a7\u63a7\u5236\u6743\uff0cIOC\u5176\u5b9e\u51c6\u786e\u5730\u8bf4 \u63a7\u5236\u8bba\uff1aprocess\u7684\u6267\u884c\u6536scheduler\u7684\u63a7\u5236\uff0c\u5373\u53d7\u63a7\u4e8e\u3002 reverse of control\uff1a dependence injection \u4e3b\u52a8close network connection\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56\u4e8enetwork library \u63a7\u5236\u8bba\u5728computer science\u4e2d\u666e\u904d\u5b58\u5728\uff0c\u9700\u8981\u641e\u6e05\u695a\u53d7\u63a7\u65b9\u3001\u4e3b\u63a7\u65b9\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50: - IOC - GC - event driven and call back \u6709\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u9700\u8981\u53d6\u5f97\u63a7\u5236\u6743\u7684\uff0c\u6bd4\u5982\u4e4b\u524d\u7684network IO","title":"Introduction"},{"location":"1Design/Principle/Control-theory/#control#theory","text":"\u672c\u7ae0\u7684\u6807\u9898\u7684\u542b\u4e49\u662f\uff1a\u63a7\u5236\u8bba\u3002 control\u662f\u4e00\u4e2a\u975e\u5e38\u62bd\u8c61\u7684\u3001\u5bbd\u6cdb\u7684\u6982\u5ff5\uff0c\u6211\u662f\u5728\u5b66\u4e60 Inversion of control \u7684\u65f6\u5019\uff0c\u5f00\u59cb\u601d\u8003\u5b83\u7684\u3002\u4ece\u201ccontrol\u201d\u6982\u5ff5\u51fa\u53d1\uff0c\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u5f88\u591acomputer science\u4e2d\u7684\u95ee\u9898\uff0c\u66f4\u52a0\u91cd\u8981\u7684\u662f\uff1a\u5efa\u7acb\u8d77\u8fd9\u4e2a\u6982\u5ff5\uff0c\u80fd\u591f\u8ba9\u6211\u4eec\u4ece\u66f4\u52a0\u9ad8\u7684\u89d2\u5ea6\u6765\u601d\u8003\u6211\u4eec\u9047\u5230\u7684\u95ee\u9898\uff0c\u5728\u201cWhat is control\u201d\u4e2d\uff0c\u6211\u4eec\u5c06\u4ece\u201crelation\u201d\u7684\u89d2\u5ea6\u6765\u63cf\u8ff0\u201ccontrol\u201d\uff0c\u57fa\u4e8e\u201crelation\u201d\u7684\u63cf\u8ff0\uff0c\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u5206\u6790\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\u5404\u4e2a\u89d2\u8272\u4e4b\u95f4\u7684\u5173\u7cfb\u3001\u4ece\u800c\u505a\u51fa\u66f4\u597d\u7684\u8bbe\u8ba1\u3002","title":"Control theory"},{"location":"1Design/Principle/Control-theory/#what#is#control","text":"\u8bed\u8a00\u7684\u8ff7\u60d1\u6027\u5728\u4e8e: \u540c\u4e00\u4e2a\u8bcd\u8bed\uff0c\u6709\u7684\u65f6\u5019\u8868\u793a\u7684\u662f\u52a8\u8bcd\uff0c\u6709\u7684\u65f6\u5019\u8868\u793a\u7684\u540d\u8bcd\uff1b\u201ccontrol\u201d\u8fd9\u4e2a\u8bcd\u8bed\u5c31\u662f\u8fd9\u6837\u7684: \u8bcd\u6027 \u89e3\u610f example \u540d\u8bcd power to direct or determine control flow \u3001 inversion of control \u52a8\u8bcd control the company \u4ecerelation\u7684\u89d2\u5ea6\u6765\u770b: control\uff08\u540d\u8bcd\uff09\u662f\u4e00\u79cd\u5173\u7cfb: \u63a7\u5236\u65b9---control----\u53d7\u63a7\u65b9 \u63a7\u5236\u65b9 \u62e5\u6709 \u7740 \u63a7\u5236\u6743 \u3002 \u201c\u53d7\u63a7\u4e8e\u201d\u3002","title":"What is control ?"},{"location":"1Design/Principle/Control-theory/#what#is#control#theory","text":"\u672c\u6587\u6807\u9898\u7684control theory\u662f\u6211\u81ea\u5df1\u521b\u9020\u7684\u4e00\u4e2a\u540d\u8bcd\uff0c\u6211\u4ec5\u4ec5\u662f\u4e3a\u4e86\u4fbf\u4e8e\u540e\u7eed\u5728\u5176\u5b83\u7684\u6587\u7ae0\u4e2d\u5f15\u7528\u5b83\u3002\u540e\u6765Google\u540e\u624d\u53d1\u73b0: control theory \u5176\u5b9e\u662f\u4e00\u95e8\u5b66\u79d1\uff0c\u53c2\u89c1 wikipedia Control theory \u3002\u6211\u4e0d\u600e\u4e48\u4e25\u8c28\u7684\u8ba4\u4e3a\uff1a\u672c\u6587\u6240\u8ba8\u8bba\u7684control theory\u5176\u5b9e\u4e5f\u662f\u5c5e\u4e8e\u4e13\u4e1a\u9886\u57df\u7684control theory\u7684\u3002","title":"What is control theory ?"},{"location":"1Design/Principle/Control-theory/#examples","text":"example explanation GC GC \u63a7\u5236\u7740 object\u7684lifetime wikipedia Garbage collection Scheduler Scheduler \u63a7\u5236\u7740 process\u7684\u6267\u884c wikipedia Scheduling(computing) DI container Container \u63a7\u5236\u7740 dependency\u7684injection wikipedia Dependency injection Event-driven framework Framework \u63a7\u5236\u7740 event\u548cevent handler\u4e4b\u95f4\u7684\u6620\u5c04 - wikipedia Event-driven architecture - wikipedia Event-driven programming","title":"Examples"},{"location":"1Design/Principle/Control-theory/#take#control#to#make#it#computational","text":"\u5728\u5de5\u7a0bdiscrete\u7684 Relation-structure-computation\\Computation\\Make-it-computational \u7ae0\u8282\u4e2d\u8ba8\u8bba\u4e86\"make it computational\"\u3002 \u5bf9\u4e8e\u672a\u77e5\u7684\u3001\u65e0\u5e8f\u7684\u3001\u4e0d\u53ef\u9760\u7684\uff0c\u6211\u4eec\u4e0d\u53ef\u4f9d\u8d56\u4e8e\uff0c\u5b83\u4eec\u90fd\u662funcomputational\u7684\uff0c\u4e3a\u4e86make it computational\uff0c\u6211\u4eec\u8981\u8fdb\u884c\u663e\u5f0f\u7684\u3001\u53ef\u9760\u7684\u63a7\u5236(take control) 1) \u8981\u4e48IOC\uff0c\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9framework\uff0c\u7531\u5b83\u6765\u8fdb\u884c\u63a7\u5236; 2) \u8981\u4e48\u7531programmer\u4e3b\u52a8take control\uff0c\u52a0\u5165ordering\uff0c\u4ece\u800cmake it computational;","title":"Take control to make it computational"},{"location":"1Design/Principle/Control-theory/#ordering","text":"Take control->\u4e3b\u52a8\u52a0\u5165ordering->make it computational\u3002 \u53c2\u89c1\u5de5\u7a0bdiscrete\u7684 Relation-structure-computation\\Computation\\Make-it-computational\\Ordering \u7ae0\u8282\u3002","title":"Ordering"},{"location":"1Design/Principle/Control-theory/#give#control#to#programmer","text":"\"give control to programmer\"\u80fd\u591f\u89e3\u91cacomputer science\u4e2d\u7684\u975e\u5e38\u591a\u7684\u5185\u5bb9\u3002","title":"Give control to programmer"},{"location":"1Design/Principle/Control-theory/#programming#languageprogrammercomputation","text":"Programming language\u63d0\u4f9b\u7684\u5404\u79cdspecifier\u3001language support library\u57fa\u4e8e\u4e86programmer\u5bf9computation\u7684\u63a7\u5236\uff0c\u5173\u4e8e\u8fd9\u4e2a\u89c2\u70b9\uff0c\u53c2\u89c1\u5de5\u7a0bprogramming-language\u7684 Theory\\Programming-language\\How-to-master-programming-language \u7ae0\u8282\u3002","title":"Programming language\u7ed9\u4e88programmer\u5bf9computation\u7684\u63a7\u5236"},{"location":"1Design/Principle/Control-theory/#coroutine#and#cooperative-multitasking","text":"\"coroutine\"\u57fa\u4e8e\u4e86programmer schedule\u7684\u6743\u5229\u3002 OS kernel\u662fIOC\uff0c\u7531\u5b83\u6765\u63a7\u5236process\u7684schedule\u3002","title":"Coroutine and cooperative-multitasking"},{"location":"1Design/Principle/Control-theory/#control#relation","text":"\u5728\u4e00\u4e2asystem\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u5904\u4e8e\u5404\u79cd\u539f\u56e0\u9700\u8981\u6539\u53d8control relation\uff0c\u6539\u53d8control relation\u610f\u5473\u7740**\u63a7\u5236\u6743**\u7684\u79fb\u4ea4\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50:","title":"\u6539\u53d8control relation"},{"location":"1Design/Principle/Control-theory/#ioc","text":"IOC\u5c31\u662f\u5178\u578b\u7684\u6539\u53d8control relation\u7684\u4f8b\u5b50\uff1a\u5c06**\u63a7\u5236\u6743**\u79fb\u4ea4\u7ed9framework\u3002\u5c06\u5728\u4e0b\u4e00\u4e2a\u7ae0\u8282\u5bf9\u5b83\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"IOC"},{"location":"1Design/Principle/Control-theory/#automatic#memory#management","text":"automatic memory management\u5c31\u662f\u5178\u578b\u7684\u5c06memory management\u7684control\u79fb\u4ea4\u3002","title":"Automatic memory management"},{"location":"1Design/Principle/Control-theory/#gc","text":"","title":"GC"},{"location":"1Design/Principle/Control-theory/#stdshared_ptr","text":"","title":"std::shared_ptr"},{"location":"1Design/Principle/Control-theory/#framework","text":"","title":"Framework"},{"location":"1Design/Principle/Control-theory/#event-driven#framework","text":"event driven and call back","title":"Event-driven framework"},{"location":"1Design/Principle/Control-theory/#draft","text":"\u63a7\u5236\u6743\uff0c\u638c\u63a7\u63a7\u5236\u6743\uff0cIOC\u5176\u5b9e\u51c6\u786e\u5730\u8bf4 \u63a7\u5236\u8bba\uff1aprocess\u7684\u6267\u884c\u6536scheduler\u7684\u63a7\u5236\uff0c\u5373\u53d7\u63a7\u4e8e\u3002 reverse of control\uff1a dependence injection \u4e3b\u52a8close network connection\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56\u4e8enetwork library \u63a7\u5236\u8bba\u5728computer science\u4e2d\u666e\u904d\u5b58\u5728\uff0c\u9700\u8981\u641e\u6e05\u695a\u53d7\u63a7\u65b9\u3001\u4e3b\u63a7\u65b9\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50: - IOC - GC - event driven and call back \u6709\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u9700\u8981\u53d6\u5f97\u63a7\u5236\u6743\u7684\uff0c\u6bd4\u5982\u4e4b\u524d\u7684network IO","title":"draft"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/","text":"Inversion of control IoC\u662f\u4e00\u79cd\u601d\u60f3 \u201cinversion of control\u201d\u5373\u201c\u63a7\u5236\u53cd\u8f6c\u201d\u3002IoC\u662f\u4e00\u79cd\u601d\u60f3\uff08\u6216\u8005\u8bf4 \u7406\u5ff5\uff09\uff0cIoC\u7684\u5b9e\u73b0\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u5f88\u591aframework\u4e2d\u90fd\u91c7\u7528\u4e86IoC\u7684\u601d\u60f3\u6216\u53d7\u5230IoC\u7684\u5f71\u54cd\u3002\u6b63\u5982\u5728tutorialsteacher Inversion of Control \u4e2d\u6240\u603b\u7ed3\u7684 IoC is a principle, not a pattern. It just gives high-level design guidelines but does not give implementation details. You are free to implement the IoC principle the way you want. What is IoC? \u5173\u4e8e\u5b83\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u201cwhat aspect of control are they inverting\u201d\uff0c\u5373\u201c\u53cd\u8f6c\u7684\u662f\u4ec0\u4e48\u63a7\u5236\u201d\uff0c\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u7ed3\u5408\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u8fdb\u884c\u56de\u7b54\uff0c\u672c\u7ae0\u57fa\u4e8e\u5982\u4e0b\u6587\u7ae0\uff1a \u5165\u95e8\u8bfb\u7269\uff1amartinfowler Inversion of Control Containers and the Dependency Injection pattern \u603b\u7ed3\uff1a\u7ef4\u57fa\u767e\u79d1 Inversion of control \u603b\u7ed3\uff1astackoverflow What is Inversion of Control? IoC\u4e2d\u7684control\u662f\u4e00\u4e2a\u542b\u4e49\u975e\u5e38\u5bbd\u6cdb\u7684\u8bcd\u8bed\uff0c\u7ef4\u57fa\u767e\u79d1\u7ed9\u51fa\u7684\u89e3\u91ca\u662f Control flow \uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u89e3\u91ca\u662f\u6bd4\u8f83\u72ed\u9698\u7684\uff0c\u4ece\u5e7f\u4e49\u800c\u8a00\uff0c\u5b83\u53ef\u4ee5\u6307\u4ee3\uff1a 1) flow of control 2) dependency\u7684\u6ce8\u5165 3) \u5bf9object lifetime\u7684\u7ba1\u7406 4) event\u548cevent handler\u4e4b\u95f4\u7684\u6620\u5c04 ..... \u663e\u7136\u8fd9\u4e9b\u90fd\u662fcontrol\uff0c\u5982\u679c\u6211\u4eec\u4ece\u8fd9\u4e2a\u5bbd\u6cdb\u7684\u89d2\u5ea6\u51fa\u53d1\u6765\u7406\u89e3\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0\u8f6f\u4ef6\u5de5\u7a0b\u9886\u57df\u7684\u5f88\u591a\u5185\u5bb9\u90fd\u53ef\u4ee5\u5f52\u5165\u5230IoC\u4e2d\u3002\u539f\u672c\u8fd9\u4e9bcontrol\u662f\u7531programmer\u6765\u8fdb\u884c\u5b9e\u73b0\uff0c\u800cIoC\u5219\u542f\u53d1\u6211\u4eec\uff1a\u8fd9\u4e9bcontrol\u5e94\u8be5\u7531framework\u6765\u8fdb\u884c\u5b9e\u73b0\uff0c\u5373\u5c06**\u63a7\u5236\u6743**\u79fb\u4ea4\u7ed9**framework**\uff1b\u6b64\u5904\u7684framework\u7684\u542b\u4e49\u4e5f\u662f\u975e\u5e38\u5bbd\u6cdb\u7684\uff0c\u5b83\u53ef\u4ee5\u662f: 1\u3001\u7c7b\u4f3c\u4e8espring\u7684container 2\u3001\u7c7b\u4f3c\u4e8ereference counting\u8fd9\u6837\u7684\u903b\u8f91 \u663e\u7136IOC\u53ef\u4ee5\u7b80\u5355\u5730\u603b\u7ed3\u4e3a\uff1a \u975eIOC: \u7531programmer\u6765\u5b9e\u73b0control IOC: \u7531framework\u6765\u5b9e\u73b0control Examples \u76f8\u5bf9\u4e8emanual memory management\u800c\u8a00\uff0cGC\u662f\u4e00\u79cdIoC: \u7531GC\u6765\u7ba1\u7406object\u7684lifetime; \u76f8\u5bf9\u4e8erow pointer\u800c\u8a00\uff0csmart pointer\u662f\u4e00\u79cdIoC\uff1a shared_ptr \u7531reference count\u6765\u7ba1\u7406object\u7684lifetime\uff0c unique_ptr \u5219\u662fscope; DI(dependence injection)\u662f\u4e00\u79cdIoC\uff0c\u7531frameworker\u6765\u7ba1\u7406dependence\u5173\u7cfb; Event-driven model\u662f\u4e00\u79cdIoC\uff0c\u7531framework\u6765\u7ba1\u7406event\u548cevent handler\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u53c2\u89c1 Software-design\\Architecture\\Event-driven-model ; IoC\u7684\u4f18\u52bf/\u4ef7\u503c framework\u5b9e\u73b0\u4e86\u539f\u672c\u7531programmer\u6765\u5b9e\u73b0\u7684control\uff0c\u8fd9\u6837\u5c31\u51cf\u8f7b\u4e86\u7528\u6237\u7684\u8d1f\u62c5\uff1b\u8fd9\u6837\u505a\u7684\u4f18\u52bf\u8fd8\u6709\u5f88\u591a\uff0c\u6bd4\u5982: 1) decouple ...... TODO: IoC\u7684\u5b9e\u73b0\u65b9\u5f0f \u5728\u7ef4\u57fa\u767e\u79d1 Inversion of control \u4e2d\u8c08\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 martinfowler Inversion of Control Containers and the Dependency Injection pattern NOTE: \u8fd9\u7bc7\u6587\u7ae0\u7684\u82f1\u6587\u539f\u6587\u662f\u6bd4\u8f83\u4e0d\u597d\u7406\u89e3\u7684\uff0c\u597d\u5728\u5b83\u63d0\u4f9b\u4e86\u4e2d\u6587\u7248\uff0c\u7ffb\u8bd1\u8d28\u91cf\u8fd8\u53ef\u4ee5\u3002\u4e2d\u6587\u7248\u94fe\u63a5\uff1a https://insights.thoughtworks.cn/injection/ A number of frameworks have taken a stab at this problem, and several are branching out to provide a general capability to assemble components from different layers. These are often referred to as lightweight containers, examples include PicoContainer , and Spring . Underlying these containers are a number of interesting design principles , things that go beyond both these specific containers and indeed the Java platform. Here I want to start exploring some of these principles. The examples I use are in Java, but like most of my writing the principles are equally applicable to other OO environments, particularly .NET. NOTE: \u4f5c\u8005\u8fd9\u6bb5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u8fd9\u4e9bcontainer\u3001Java platform\u6240\u91c7\u7528\u7684**design principles**\uff0c\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u5b83\u4eec\uff0c\u5b83\u4eec\u540c\u6837\u9002\u7528\u4e8e\u5176\u4ed6 \u7684OO environment\u3002 Components and Services I use component to mean a glob of software that's intended to be used, without change, by an application that is out of the control of the writers of the component. By 'without change' I mean that the using application doesn't change the source code of the components, although they may alter the component's behavior by extending it in ways allowed by the component writers. A service is similar to a component in that it's used by foreign applications. The main difference is that I expect a component to be used locally (think jar file, assembly, dll, or a source import). A service will be used remotely through some remote interface, either synchronous or asynchronous (eg web service, messaging system, RPC, or socket.) I mostly use service in this article, but much of the same logic can be applied to local components too. Indeed often you need some kind of local component framework to easily access a remote service . But writing \"component or service\" is tiring to read and write, and services are much more fashionable at the moment. A Naive Example In this example I'm writing a component that provides a list of movies directed by a particular director. This stunningly useful function is implemented by a single method. class MovieLister ... public Movie [] moviesDirectedBy ( String arg ) { List allMovies = finder . findAll (); for ( Iterator it = allMovies . iterator (); it . hasNext ();) { Movie movie = ( Movie ) it . next (); if ( ! movie . getDirector (). equals ( arg )) it . remove (); } return ( Movie [] ) allMovies . toArray ( new Movie [ allMovies . size () ] ); } The implementation of this function is naive in the extreme, it asks a finder object (which we'll get to in a moment) to return every film it knows about. Then it just hunts through this list to return those directed by a particular director. This particular piece of naivety I'm not going to fix, since it's just the scaffolding\uff08\u811a\u624b\u67b6\uff09 for the real point of this article. The real point of this article is this finder object , or particularly how we connect the lister object with a particular finder object . The reason why this is interesting is that I want my wonderful moviesDirectedBy method to be completely independent of how all the movies are being stored. So all the method does is refer to a finder , and all that finder does is know how to respond to the findAll method. I can bring this out by defining an interface for the finder . public interface MovieFinder { List findAll (); } Now all of this is very well decoupled, but at some point I have to come up with a concrete class to actually come up with the movies. In this case I put the code for this in the constructor of my lister class. class MovieLister ... private MovieFinder finder ; public MovieLister () { finder = new ColonDelimitedMovieFinder ( \"movies1.txt\" ); } The name of the implementation class comes from the fact that I'm getting my list from a colon\uff08\u5192\u53f7\uff09 delimited text file. I'll spare you the details, after all the point is just that there's some implementation. Now if I'm using this class for just myself, this is all fine and dandy\uff08\u6781\u597d\u7684\uff09. But what happens when my friends are overwhelmed\uff08\u88ab\u6253\u5012\uff09 by a desire for this wonderful functionality and would like a copy of my program? If they also store their movie listings in a colon delimited text file called \"movies1.txt\" then everything is wonderful. If they have a different name for their movies file, then it's easy to put the name of the file in a properties file. But what if they have a completely different form of storing their movie listing: a SQL database, an XML file, a web service, or just another format of text file? In this case we need a different class to grab that data. Now because I've defined a MovieFinder interface, this won't alter my moviesDirectedBy method. But I still need to have some way to get an instance of the right finder implementation into place. Figure 1: The dependencies using a simple creation in the lister class Figure 1 shows the dependencies for this situation. The MovieLister class is dependent on both the MovieFinder interface and upon the implementation. We would prefer it if it were only dependent on the interface, but then how do we make an instance to work with? plugin In my book P of EAA , we described this situation as a Plugin . The implementation class for the finder isn't linked into the program at compile time, since I don't know what my friends are going to use. Instead we want my lister to work with any implementation, and for that implementation to be plugged in at some later point, out of my hands. The problem is how can I make that link so that my lister class is ignorant of the implementation class, but can still talk to an instance to do its work. Expanding this into a real system, we might have dozens of such services and components. In each case we can abstract our use of these components by talking to them through an interface (and using an adapter if the component isn't designed with an interface in mind). But if we wish to deploy this system in different ways, we need to use plugins to handle the interaction with these services so we can use different implementations in different deployments. So the core problem is how do we assemble these plugins into an application? This is one of the main problems that this new breed of lightweight containers face, and universally they all do it using Inversion of Control . Inversion of Control The question is: \"what aspect of control are they inverting?\" When I first ran into inversion of control , it was in the main control of a user interface. Early user interfaces were controlled by the application program. You would have a sequence of commands like \"Enter name\", \"enter address\"; your program would drive the prompts and pick up a response to each one. With graphical (or even screen based) UIs the UI framework would contain this main loop and your program instead provided event handlers for the various fields on the screen. The main control of the program was inverted, moved away from you to the framework . NOTE: \u5728UI framework\u4e2d\uff0c\u88abinvert\u7684control\u662fmain control\u3002\u5728\u666e\u901a\u7684application program\u4e2d\uff0cmain control\u662f\u7531application program\u63a7\u5236\uff1b\u5728UI framework\u4e2d\uff0cmain control\u7531UI framework\u63a7\u5236\u3002 For this new breed of containers the inversion is about how they lookup a plugin implementation . In my naive example the lister looked up the finder implementation by directly instantiating it. This stops the finder from being a plugin. The approach that these containers use is to ensure that any user of a plugin follows some convention that allows a separate assembler module to inject the implementation into the lister . As a result I think we need a more specific name for this pattern. Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates we settled on the name Dependency Injection . NOTE\uff1a\u5728DI\u4e2d\uff0c\u88abinvert\u7684\u662fhow to lookup dependency\u3002\u5728\u666e\u901a\u7684application program\u4e2d\uff0cdependency\u662f\u7531application program\u63a7\u5236\uff1b\u5728DI\u4e2d\uff0cdependency\u662f\u6709injector\u6765\u8fdb\u884cinject\u3002 I'm going to start by talking about the various forms of dependency injection , but I'll point out now that that's not the only way of removing the dependency from the application class to the plugin implementation . The other pattern you can use to do this is Service Locator , and I'll discuss that after I'm done with explaining Dependency Injection . Forms of Dependency Injection The basic idea of the Dependency Injection is to have a separate object, an assembler, that populates a field in the lister class with an appropriate implementation for the finder interface, resulting in a dependency diagram along the lines of Figure 2 Figure 2: The dependencies for a Dependency Injector There are three main styles of dependency injection . The names I'm using for them are Constructor Injection , Setter Injection , and Interface Injection . If you read about this stuff in the current discussions about Inversion of Control you'll hear these referred to as type 1 IoC (interface injection), type 2 IoC (setter injection) and type 3 IoC (constructor injection). I find numeric names rather hard to remember, which is why I've used the names I have here. Constructor Injection with PicoContainer Setter Injection with Spring The Spring framework is a wide ranging framework for enterprise Java development. It includes abstraction layers for transactions, persistence frameworks, web application development and JDBC. Like PicoContainer it supports both constructor and setter injection, but its developers tend to prefer setter injection - which makes it an appropriate choice for this example. Interface Injection","title":"Introduction"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#inversion#of#control","text":"","title":"Inversion of control"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#ioc","text":"\u201cinversion of control\u201d\u5373\u201c\u63a7\u5236\u53cd\u8f6c\u201d\u3002IoC\u662f\u4e00\u79cd\u601d\u60f3\uff08\u6216\u8005\u8bf4 \u7406\u5ff5\uff09\uff0cIoC\u7684\u5b9e\u73b0\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u5f88\u591aframework\u4e2d\u90fd\u91c7\u7528\u4e86IoC\u7684\u601d\u60f3\u6216\u53d7\u5230IoC\u7684\u5f71\u54cd\u3002\u6b63\u5982\u5728tutorialsteacher Inversion of Control \u4e2d\u6240\u603b\u7ed3\u7684 IoC is a principle, not a pattern. It just gives high-level design guidelines but does not give implementation details. You are free to implement the IoC principle the way you want.","title":"IoC\u662f\u4e00\u79cd\u601d\u60f3"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#what#is#ioc","text":"\u5173\u4e8e\u5b83\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u201cwhat aspect of control are they inverting\u201d\uff0c\u5373\u201c\u53cd\u8f6c\u7684\u662f\u4ec0\u4e48\u63a7\u5236\u201d\uff0c\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u7ed3\u5408\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u8fdb\u884c\u56de\u7b54\uff0c\u672c\u7ae0\u57fa\u4e8e\u5982\u4e0b\u6587\u7ae0\uff1a \u5165\u95e8\u8bfb\u7269\uff1amartinfowler Inversion of Control Containers and the Dependency Injection pattern \u603b\u7ed3\uff1a\u7ef4\u57fa\u767e\u79d1 Inversion of control \u603b\u7ed3\uff1astackoverflow What is Inversion of Control? IoC\u4e2d\u7684control\u662f\u4e00\u4e2a\u542b\u4e49\u975e\u5e38\u5bbd\u6cdb\u7684\u8bcd\u8bed\uff0c\u7ef4\u57fa\u767e\u79d1\u7ed9\u51fa\u7684\u89e3\u91ca\u662f Control flow \uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u89e3\u91ca\u662f\u6bd4\u8f83\u72ed\u9698\u7684\uff0c\u4ece\u5e7f\u4e49\u800c\u8a00\uff0c\u5b83\u53ef\u4ee5\u6307\u4ee3\uff1a 1) flow of control 2) dependency\u7684\u6ce8\u5165 3) \u5bf9object lifetime\u7684\u7ba1\u7406 4) event\u548cevent handler\u4e4b\u95f4\u7684\u6620\u5c04 ..... \u663e\u7136\u8fd9\u4e9b\u90fd\u662fcontrol\uff0c\u5982\u679c\u6211\u4eec\u4ece\u8fd9\u4e2a\u5bbd\u6cdb\u7684\u89d2\u5ea6\u51fa\u53d1\u6765\u7406\u89e3\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0\u8f6f\u4ef6\u5de5\u7a0b\u9886\u57df\u7684\u5f88\u591a\u5185\u5bb9\u90fd\u53ef\u4ee5\u5f52\u5165\u5230IoC\u4e2d\u3002\u539f\u672c\u8fd9\u4e9bcontrol\u662f\u7531programmer\u6765\u8fdb\u884c\u5b9e\u73b0\uff0c\u800cIoC\u5219\u542f\u53d1\u6211\u4eec\uff1a\u8fd9\u4e9bcontrol\u5e94\u8be5\u7531framework\u6765\u8fdb\u884c\u5b9e\u73b0\uff0c\u5373\u5c06**\u63a7\u5236\u6743**\u79fb\u4ea4\u7ed9**framework**\uff1b\u6b64\u5904\u7684framework\u7684\u542b\u4e49\u4e5f\u662f\u975e\u5e38\u5bbd\u6cdb\u7684\uff0c\u5b83\u53ef\u4ee5\u662f: 1\u3001\u7c7b\u4f3c\u4e8espring\u7684container 2\u3001\u7c7b\u4f3c\u4e8ereference counting\u8fd9\u6837\u7684\u903b\u8f91 \u663e\u7136IOC\u53ef\u4ee5\u7b80\u5355\u5730\u603b\u7ed3\u4e3a\uff1a \u975eIOC: \u7531programmer\u6765\u5b9e\u73b0control IOC: \u7531framework\u6765\u5b9e\u73b0control","title":"What is IoC?"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#examples","text":"\u76f8\u5bf9\u4e8emanual memory management\u800c\u8a00\uff0cGC\u662f\u4e00\u79cdIoC: \u7531GC\u6765\u7ba1\u7406object\u7684lifetime; \u76f8\u5bf9\u4e8erow pointer\u800c\u8a00\uff0csmart pointer\u662f\u4e00\u79cdIoC\uff1a shared_ptr \u7531reference count\u6765\u7ba1\u7406object\u7684lifetime\uff0c unique_ptr \u5219\u662fscope; DI(dependence injection)\u662f\u4e00\u79cdIoC\uff0c\u7531frameworker\u6765\u7ba1\u7406dependence\u5173\u7cfb; Event-driven model\u662f\u4e00\u79cdIoC\uff0c\u7531framework\u6765\u7ba1\u7406event\u548cevent handler\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u53c2\u89c1 Software-design\\Architecture\\Event-driven-model ;","title":"Examples"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#ioc_1","text":"framework\u5b9e\u73b0\u4e86\u539f\u672c\u7531programmer\u6765\u5b9e\u73b0\u7684control\uff0c\u8fd9\u6837\u5c31\u51cf\u8f7b\u4e86\u7528\u6237\u7684\u8d1f\u62c5\uff1b\u8fd9\u6837\u505a\u7684\u4f18\u52bf\u8fd8\u6709\u5f88\u591a\uff0c\u6bd4\u5982: 1) decouple ......","title":"IoC\u7684\u4f18\u52bf/\u4ef7\u503c"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#todo#ioc","text":"\u5728\u7ef4\u57fa\u767e\u79d1 Inversion of control \u4e2d\u8c08\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002","title":"TODO: IoC\u7684\u5b9e\u73b0\u65b9\u5f0f"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#martinfowler#inversion#of#control#containers#and#the#dependency#injection#pattern","text":"NOTE: \u8fd9\u7bc7\u6587\u7ae0\u7684\u82f1\u6587\u539f\u6587\u662f\u6bd4\u8f83\u4e0d\u597d\u7406\u89e3\u7684\uff0c\u597d\u5728\u5b83\u63d0\u4f9b\u4e86\u4e2d\u6587\u7248\uff0c\u7ffb\u8bd1\u8d28\u91cf\u8fd8\u53ef\u4ee5\u3002\u4e2d\u6587\u7248\u94fe\u63a5\uff1a https://insights.thoughtworks.cn/injection/ A number of frameworks have taken a stab at this problem, and several are branching out to provide a general capability to assemble components from different layers. These are often referred to as lightweight containers, examples include PicoContainer , and Spring . Underlying these containers are a number of interesting design principles , things that go beyond both these specific containers and indeed the Java platform. Here I want to start exploring some of these principles. The examples I use are in Java, but like most of my writing the principles are equally applicable to other OO environments, particularly .NET. NOTE: \u4f5c\u8005\u8fd9\u6bb5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u8fd9\u4e9bcontainer\u3001Java platform\u6240\u91c7\u7528\u7684**design principles**\uff0c\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u5b83\u4eec\uff0c\u5b83\u4eec\u540c\u6837\u9002\u7528\u4e8e\u5176\u4ed6 \u7684OO environment\u3002","title":"martinfowler Inversion of Control Containers and the Dependency Injection pattern"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#components#and#services","text":"I use component to mean a glob of software that's intended to be used, without change, by an application that is out of the control of the writers of the component. By 'without change' I mean that the using application doesn't change the source code of the components, although they may alter the component's behavior by extending it in ways allowed by the component writers. A service is similar to a component in that it's used by foreign applications. The main difference is that I expect a component to be used locally (think jar file, assembly, dll, or a source import). A service will be used remotely through some remote interface, either synchronous or asynchronous (eg web service, messaging system, RPC, or socket.) I mostly use service in this article, but much of the same logic can be applied to local components too. Indeed often you need some kind of local component framework to easily access a remote service . But writing \"component or service\" is tiring to read and write, and services are much more fashionable at the moment.","title":"Components and Services"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#a#naive#example","text":"In this example I'm writing a component that provides a list of movies directed by a particular director. This stunningly useful function is implemented by a single method. class MovieLister ... public Movie [] moviesDirectedBy ( String arg ) { List allMovies = finder . findAll (); for ( Iterator it = allMovies . iterator (); it . hasNext ();) { Movie movie = ( Movie ) it . next (); if ( ! movie . getDirector (). equals ( arg )) it . remove (); } return ( Movie [] ) allMovies . toArray ( new Movie [ allMovies . size () ] ); } The implementation of this function is naive in the extreme, it asks a finder object (which we'll get to in a moment) to return every film it knows about. Then it just hunts through this list to return those directed by a particular director. This particular piece of naivety I'm not going to fix, since it's just the scaffolding\uff08\u811a\u624b\u67b6\uff09 for the real point of this article. The real point of this article is this finder object , or particularly how we connect the lister object with a particular finder object . The reason why this is interesting is that I want my wonderful moviesDirectedBy method to be completely independent of how all the movies are being stored. So all the method does is refer to a finder , and all that finder does is know how to respond to the findAll method. I can bring this out by defining an interface for the finder . public interface MovieFinder { List findAll (); } Now all of this is very well decoupled, but at some point I have to come up with a concrete class to actually come up with the movies. In this case I put the code for this in the constructor of my lister class. class MovieLister ... private MovieFinder finder ; public MovieLister () { finder = new ColonDelimitedMovieFinder ( \"movies1.txt\" ); } The name of the implementation class comes from the fact that I'm getting my list from a colon\uff08\u5192\u53f7\uff09 delimited text file. I'll spare you the details, after all the point is just that there's some implementation. Now if I'm using this class for just myself, this is all fine and dandy\uff08\u6781\u597d\u7684\uff09. But what happens when my friends are overwhelmed\uff08\u88ab\u6253\u5012\uff09 by a desire for this wonderful functionality and would like a copy of my program? If they also store their movie listings in a colon delimited text file called \"movies1.txt\" then everything is wonderful. If they have a different name for their movies file, then it's easy to put the name of the file in a properties file. But what if they have a completely different form of storing their movie listing: a SQL database, an XML file, a web service, or just another format of text file? In this case we need a different class to grab that data. Now because I've defined a MovieFinder interface, this won't alter my moviesDirectedBy method. But I still need to have some way to get an instance of the right finder implementation into place. Figure 1: The dependencies using a simple creation in the lister class Figure 1 shows the dependencies for this situation. The MovieLister class is dependent on both the MovieFinder interface and upon the implementation. We would prefer it if it were only dependent on the interface, but then how do we make an instance to work with?","title":"A Naive Example"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#plugin","text":"In my book P of EAA , we described this situation as a Plugin . The implementation class for the finder isn't linked into the program at compile time, since I don't know what my friends are going to use. Instead we want my lister to work with any implementation, and for that implementation to be plugged in at some later point, out of my hands. The problem is how can I make that link so that my lister class is ignorant of the implementation class, but can still talk to an instance to do its work. Expanding this into a real system, we might have dozens of such services and components. In each case we can abstract our use of these components by talking to them through an interface (and using an adapter if the component isn't designed with an interface in mind). But if we wish to deploy this system in different ways, we need to use plugins to handle the interaction with these services so we can use different implementations in different deployments. So the core problem is how do we assemble these plugins into an application? This is one of the main problems that this new breed of lightweight containers face, and universally they all do it using Inversion of Control .","title":"plugin"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#inversion#of#control_1","text":"The question is: \"what aspect of control are they inverting?\" When I first ran into inversion of control , it was in the main control of a user interface. Early user interfaces were controlled by the application program. You would have a sequence of commands like \"Enter name\", \"enter address\"; your program would drive the prompts and pick up a response to each one. With graphical (or even screen based) UIs the UI framework would contain this main loop and your program instead provided event handlers for the various fields on the screen. The main control of the program was inverted, moved away from you to the framework . NOTE: \u5728UI framework\u4e2d\uff0c\u88abinvert\u7684control\u662fmain control\u3002\u5728\u666e\u901a\u7684application program\u4e2d\uff0cmain control\u662f\u7531application program\u63a7\u5236\uff1b\u5728UI framework\u4e2d\uff0cmain control\u7531UI framework\u63a7\u5236\u3002 For this new breed of containers the inversion is about how they lookup a plugin implementation . In my naive example the lister looked up the finder implementation by directly instantiating it. This stops the finder from being a plugin. The approach that these containers use is to ensure that any user of a plugin follows some convention that allows a separate assembler module to inject the implementation into the lister . As a result I think we need a more specific name for this pattern. Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates we settled on the name Dependency Injection . NOTE\uff1a\u5728DI\u4e2d\uff0c\u88abinvert\u7684\u662fhow to lookup dependency\u3002\u5728\u666e\u901a\u7684application program\u4e2d\uff0cdependency\u662f\u7531application program\u63a7\u5236\uff1b\u5728DI\u4e2d\uff0cdependency\u662f\u6709injector\u6765\u8fdb\u884cinject\u3002 I'm going to start by talking about the various forms of dependency injection , but I'll point out now that that's not the only way of removing the dependency from the application class to the plugin implementation . The other pattern you can use to do this is Service Locator , and I'll discuss that after I'm done with explaining Dependency Injection .","title":"Inversion of Control"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#forms#of#dependency#injection","text":"The basic idea of the Dependency Injection is to have a separate object, an assembler, that populates a field in the lister class with an appropriate implementation for the finder interface, resulting in a dependency diagram along the lines of Figure 2 Figure 2: The dependencies for a Dependency Injector There are three main styles of dependency injection . The names I'm using for them are Constructor Injection , Setter Injection , and Interface Injection . If you read about this stuff in the current discussions about Inversion of Control you'll hear these referred to as type 1 IoC (interface injection), type 2 IoC (setter injection) and type 3 IoC (constructor injection). I find numeric names rather hard to remember, which is why I've used the names I have here.","title":"Forms of Dependency Injection"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#constructor#injection#with#picocontainer","text":"","title":"Constructor Injection with PicoContainer"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#setter#injection#with#spring","text":"The Spring framework is a wide ranging framework for enterprise Java development. It includes abstraction layers for transactions, persistence frameworks, web application development and JDBC. Like PicoContainer it supports both constructor and setter injection, but its developers tend to prefer setter injection - which makes it an appropriate choice for this example.","title":"Setter Injection with Spring"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/#interface#injection","text":"","title":"Interface Injection"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/tutorialsteacher-Inversion-of-Control/","text":"tutorialsteacher Inversion of Control NOTE: \u4e0a\u9762\u63cf\u8ff0\u4e86\u5b9e\u73b0IoC\u7684\u591a\u79cd\u65b9\u5f0f\uff0c\u5b83\u4eec\u662f\u9012\u8fdb\u5173\u7cfb\u3002 Inversion of Control (IoC) is a design principle (although, some people refer to it as a pattern). As the name suggests, it is used to invert different kinds of controls in object-oriented design to achieve loose coupling. Here, controls refer to any additional responsibilities a class has, other than its main responsibility. This include control over the flow of an application, and control over the flow of an object creation or dependent object creation and binding. NOTE: \u6709\u4e86martinfowler Inversion of Control Containers and the Dependency Injection pattern \u4e2d\u7684\u89e3\u91ca\uff0c\u518d\u6765\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u8bdd\uff0c\u5c31\u975e\u5e38\u4efb\u610f\u7406\u89e3\u4e86\u3002 Let's understand how IoC inverts the different kinds of control. Control Over the Flow of a Program NOTE: \u8fd9\u4e00\u6bb5\u4e2d\u6240\u5217\u4e3e\u7684\u4f8b\u5b50\u5728martinfowler Inversion of Control Containers and the Dependency Injection pattern \u7684Inversion of Control\u6bb5\u4e2d\u5df2\u7ecf\u8bf4\u660e\u4e86\uff0c\u6b64\u5904\u7701\u7565\u3002 Control Over the Dependent Object Creation NOTE: \u8fd9\u4e00\u6bb5\u4e2d\u6240\u8bf4\u660e\u7684\u5176\u5b9e\u5c31\u662fdependency injection\uff0c\u8fd9\u5728martinfowler Inversion of Control Containers and the Dependency Injection pattern \u4e2d\u5df2\u7ecf\u8bf4\u660e\u4e86\u3002 IoC can also be applied when we create objects of a dependent class. First of all, let's understand what we mean by dependency here. public class A { B b ; public A () { b = new B (); } public void Task1 () { // do something here.. b . SomeMethod (); // do something here.. } } public class B { public void SomeMethod () { //doing something.. } } In the above example, class A calls b.SomeMethod() to complete its task1 . Class A cannot complete its task without class B and so you can say that \"Class A is dependent on class B\" or \"class B is a dependency of class A\". In the object-oriented design approach, classes need to interact with each other in order to complete one or more functionalities of an application, such as in the above example - classes A and B . Class A creates and manages the life time of an object of class B . Essentially, it controls the creation and life time of objects of the dependency class. The IoC principle suggests to invert the control. This means to delegate the control to another class. In other words, invert the dependency creation control from class A to another class, as shown below. NOTE: \u7531\u53e6\u5916\u7684\u4e00\u4e2aclass\u6765\u5b9e\u73b0control\uff0c\u8fd9\u5176\u5b9e\u662f\u5f15\u5165\u4e86\u4e00\u5c42indirection\uff0c\u6700\u6700\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662ffactory class\u3001framework\u3001container \u3002 public class A { B b ; public A () { b = Factory . GetObjectOfB (); } public void Task1 () { // do something here.. b . SomeMethod (); // do something here.. } } public class Factory { public static B GetObjectOfB () { return new B (); } } As you can see above, class A uses Factory class to get an object of class B . Thus, we have inverted the dependent object creation from class A to Factory. Class A no longer creates an object of class B , instead it uses the factory class to get the object of class B . Let's understand this using a more practical example. In an object-oriented design, classes should be designed in a loosely coupled way. Loosely coupled means changes in one class should not force other classes to change, so the whole application can become maintainable and extensible . Let's understand this by using typical n-tier architecture as depicted by the following figure: In the typical n-tier architecture, the User Interface (UI) uses Service layer to retrieve or save data. The Service layer uses the BusinessLogic class to apply business rules on the data. The BusinessLogic class depends on the DataAccess class which retrieves or saves the data to the underlying database. This is simple n-tier architecture design. Let's focus on the BusinessLogic and DataAccess classes to understand IoC. The following is an example of BusinessLogic and DataAccess classes for a customer. public class CustomerBusinessLogic { DataAccess _dataAccess ; public CustomerBusinessLogic () { _dataAccess = new DataAccess (); } public string GetCustomerName ( int id ) { return _dataAccess . GetCustomerName ( id ); } } public class DataAccess { public DataAccess () { } public string GetCustomerName ( int id ) { return \"Dummy Customer Name\" ; // get it from DB in real app } } As you can see in the above example, the CustomerBusinessLogic class depends on the DataAccess class. It creates an object of the DataAccess class to get the customer data. Now, let's understand what's wrong with the above classes. In the above example, CustomerBusinessLogic and DataAccess are tightly coupled classes because the CustomerBusinessLogic class includes the reference of the concrete DataAccess class. It also creates an object of DataAccess class and manages the lifetime of the object. Problems in the above example classes: CustomerBusinessLogic and DataAccess classes are tightly coupled classes. So, changes in the DataAccess class will lead to changes in the CustomerBusinessLogic class. For example, if we add, remove or rename any method in the DataAccess class then we need to change the CustomerBusinessLogic class accordingly. Suppose the customer data comes from different databases or web services and, in the future, we may need to create different classes, so this will lead to changes in the CustomerBusinessLogic class. The CustomerBusinessLogic class creates an object of the DataAccess class using the new keyword. There may be multiple classes which use the DataAccess class and create its objects. So, if you change the name of the class, then you need to find all the places in your source code where you created objects of DataAccess and make the changes throughout the code. This is repetitive code for creating objects of the same class and maintaining their dependencies. Because the CustomerBusinessLogic class creates an object of the concrete DataAccess class, it cannot be tested independently (TDD). The DataAccess class cannot be replaced with a mock class. NOTE: \u4e0a\u8ff0\u603b\u7ed3\u7684\u95ee\u9898\u975e\u5e38\u503c\u5f97\u5b66\u4e60 To solve all of the above problems and get a loosely coupled design, we can use the IoC and DIP principles together. Remember, IoC is a principle, not a pattern. It just gives high-level design guidelines but does not give implementation details. You are free to implement the IoC principle the way you want. The following pattern (but not limited) implements the IoC principle. Let's use the Factory pattern to implement IoC in the above example, as the first step towards attaining loosely coupled classes. public class DataAccessFactory { public static DataAccess GetDataAccessObj () { return new DataAccess (); } } Dependency Inversion Principle NOTE: \u672c\u8282\u5bf9\u5e94\u7684\u662f\u7b2c\u4e00\u8282\u4e2d\u7ed9\u51fa\u7684\u6d41\u7a0b\u56fe\u4e2d\u7684\u201cImplement DIP by creating abstraction\u201d First, let's understand what is Dependency Inversion Principle (DIP)? DIP is one of the SOLID object-oriented principle invented by Robert Martin (a.k.a. Uncle Bob) DIP Definition NOTE: \u5728\u7ef4\u57fa\u767e\u79d1 Dependency inversion principle \u4e2d\u4e5f\u7ed9\u51fa\u4e86\u76f8\u540c\u7684\u5b9a\u4e49 What is an Abstraction? Dependency Injection NOTE: \u672c\u8282\u5bf9\u5e94\u7684\u662f\u7b2c\u4e00\u8282\u4e2d\u7ed9\u51fa\u7684\u6d41\u7a0b\u56fe\u4e2d\u7684\u201cImplement DI\u201d","title":"tutorialsteacher-Inversion-of-Control"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/tutorialsteacher-Inversion-of-Control/#tutorialsteacher#inversion#of#control","text":"NOTE: \u4e0a\u9762\u63cf\u8ff0\u4e86\u5b9e\u73b0IoC\u7684\u591a\u79cd\u65b9\u5f0f\uff0c\u5b83\u4eec\u662f\u9012\u8fdb\u5173\u7cfb\u3002 Inversion of Control (IoC) is a design principle (although, some people refer to it as a pattern). As the name suggests, it is used to invert different kinds of controls in object-oriented design to achieve loose coupling. Here, controls refer to any additional responsibilities a class has, other than its main responsibility. This include control over the flow of an application, and control over the flow of an object creation or dependent object creation and binding. NOTE: \u6709\u4e86martinfowler Inversion of Control Containers and the Dependency Injection pattern \u4e2d\u7684\u89e3\u91ca\uff0c\u518d\u6765\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u8bdd\uff0c\u5c31\u975e\u5e38\u4efb\u610f\u7406\u89e3\u4e86\u3002 Let's understand how IoC inverts the different kinds of control.","title":"tutorialsteacher Inversion of Control"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/tutorialsteacher-Inversion-of-Control/#control#over#the#flow#of#a#program","text":"NOTE: \u8fd9\u4e00\u6bb5\u4e2d\u6240\u5217\u4e3e\u7684\u4f8b\u5b50\u5728martinfowler Inversion of Control Containers and the Dependency Injection pattern \u7684Inversion of Control\u6bb5\u4e2d\u5df2\u7ecf\u8bf4\u660e\u4e86\uff0c\u6b64\u5904\u7701\u7565\u3002","title":"Control Over the Flow of a Program"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/tutorialsteacher-Inversion-of-Control/#control#over#the#dependent#object#creation","text":"NOTE: \u8fd9\u4e00\u6bb5\u4e2d\u6240\u8bf4\u660e\u7684\u5176\u5b9e\u5c31\u662fdependency injection\uff0c\u8fd9\u5728martinfowler Inversion of Control Containers and the Dependency Injection pattern \u4e2d\u5df2\u7ecf\u8bf4\u660e\u4e86\u3002 IoC can also be applied when we create objects of a dependent class. First of all, let's understand what we mean by dependency here. public class A { B b ; public A () { b = new B (); } public void Task1 () { // do something here.. b . SomeMethod (); // do something here.. } } public class B { public void SomeMethod () { //doing something.. } } In the above example, class A calls b.SomeMethod() to complete its task1 . Class A cannot complete its task without class B and so you can say that \"Class A is dependent on class B\" or \"class B is a dependency of class A\". In the object-oriented design approach, classes need to interact with each other in order to complete one or more functionalities of an application, such as in the above example - classes A and B . Class A creates and manages the life time of an object of class B . Essentially, it controls the creation and life time of objects of the dependency class. The IoC principle suggests to invert the control. This means to delegate the control to another class. In other words, invert the dependency creation control from class A to another class, as shown below. NOTE: \u7531\u53e6\u5916\u7684\u4e00\u4e2aclass\u6765\u5b9e\u73b0control\uff0c\u8fd9\u5176\u5b9e\u662f\u5f15\u5165\u4e86\u4e00\u5c42indirection\uff0c\u6700\u6700\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662ffactory class\u3001framework\u3001container \u3002 public class A { B b ; public A () { b = Factory . GetObjectOfB (); } public void Task1 () { // do something here.. b . SomeMethod (); // do something here.. } } public class Factory { public static B GetObjectOfB () { return new B (); } } As you can see above, class A uses Factory class to get an object of class B . Thus, we have inverted the dependent object creation from class A to Factory. Class A no longer creates an object of class B , instead it uses the factory class to get the object of class B . Let's understand this using a more practical example. In an object-oriented design, classes should be designed in a loosely coupled way. Loosely coupled means changes in one class should not force other classes to change, so the whole application can become maintainable and extensible . Let's understand this by using typical n-tier architecture as depicted by the following figure: In the typical n-tier architecture, the User Interface (UI) uses Service layer to retrieve or save data. The Service layer uses the BusinessLogic class to apply business rules on the data. The BusinessLogic class depends on the DataAccess class which retrieves or saves the data to the underlying database. This is simple n-tier architecture design. Let's focus on the BusinessLogic and DataAccess classes to understand IoC. The following is an example of BusinessLogic and DataAccess classes for a customer. public class CustomerBusinessLogic { DataAccess _dataAccess ; public CustomerBusinessLogic () { _dataAccess = new DataAccess (); } public string GetCustomerName ( int id ) { return _dataAccess . GetCustomerName ( id ); } } public class DataAccess { public DataAccess () { } public string GetCustomerName ( int id ) { return \"Dummy Customer Name\" ; // get it from DB in real app } } As you can see in the above example, the CustomerBusinessLogic class depends on the DataAccess class. It creates an object of the DataAccess class to get the customer data. Now, let's understand what's wrong with the above classes. In the above example, CustomerBusinessLogic and DataAccess are tightly coupled classes because the CustomerBusinessLogic class includes the reference of the concrete DataAccess class. It also creates an object of DataAccess class and manages the lifetime of the object. Problems in the above example classes: CustomerBusinessLogic and DataAccess classes are tightly coupled classes. So, changes in the DataAccess class will lead to changes in the CustomerBusinessLogic class. For example, if we add, remove or rename any method in the DataAccess class then we need to change the CustomerBusinessLogic class accordingly. Suppose the customer data comes from different databases or web services and, in the future, we may need to create different classes, so this will lead to changes in the CustomerBusinessLogic class. The CustomerBusinessLogic class creates an object of the DataAccess class using the new keyword. There may be multiple classes which use the DataAccess class and create its objects. So, if you change the name of the class, then you need to find all the places in your source code where you created objects of DataAccess and make the changes throughout the code. This is repetitive code for creating objects of the same class and maintaining their dependencies. Because the CustomerBusinessLogic class creates an object of the concrete DataAccess class, it cannot be tested independently (TDD). The DataAccess class cannot be replaced with a mock class. NOTE: \u4e0a\u8ff0\u603b\u7ed3\u7684\u95ee\u9898\u975e\u5e38\u503c\u5f97\u5b66\u4e60 To solve all of the above problems and get a loosely coupled design, we can use the IoC and DIP principles together. Remember, IoC is a principle, not a pattern. It just gives high-level design guidelines but does not give implementation details. You are free to implement the IoC principle the way you want. The following pattern (but not limited) implements the IoC principle. Let's use the Factory pattern to implement IoC in the above example, as the first step towards attaining loosely coupled classes. public class DataAccessFactory { public static DataAccess GetDataAccessObj () { return new DataAccess (); } }","title":"Control Over the Dependent Object Creation"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/tutorialsteacher-Inversion-of-Control/#dependency#inversion#principle","text":"NOTE: \u672c\u8282\u5bf9\u5e94\u7684\u662f\u7b2c\u4e00\u8282\u4e2d\u7ed9\u51fa\u7684\u6d41\u7a0b\u56fe\u4e2d\u7684\u201cImplement DIP by creating abstraction\u201d First, let's understand what is Dependency Inversion Principle (DIP)? DIP is one of the SOLID object-oriented principle invented by Robert Martin (a.k.a. Uncle Bob)","title":"Dependency Inversion Principle"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/tutorialsteacher-Inversion-of-Control/#dip#definition","text":"NOTE: \u5728\u7ef4\u57fa\u767e\u79d1 Dependency inversion principle \u4e2d\u4e5f\u7ed9\u51fa\u4e86\u76f8\u540c\u7684\u5b9a\u4e49","title":"DIP Definition"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/tutorialsteacher-Inversion-of-Control/#what#is#an#abstraction","text":"","title":"What is an Abstraction?"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/tutorialsteacher-Inversion-of-Control/#dependency#injection","text":"NOTE: \u672c\u8282\u5bf9\u5e94\u7684\u662f\u7b2c\u4e00\u8282\u4e2d\u7ed9\u51fa\u7684\u6d41\u7a0b\u56fe\u4e2d\u7684\u201cImplement DI\u201d","title":"Dependency Injection"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/wikipedia-Inversion-of-control/","text":"wikipedia Inversion of control In software engineering , inversion of control ( IoC ) is a design principle in which custom-written portions of a computer program receive the flow of control from a generic framework . A software architecture with this design inverts\uff08\u98a0\u5012\uff09 control as compared to traditional procedural programming : in traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code. NOTE: call into\u7684\u542b\u4e49\u662f\u201c\u8c03\u7528\u201d Inversion of control is used to increase modularity of the program and make it extensible ,[ 1] and has applications in object-oriented programming and other programming paradigms . The term was used by Michael Mattsson in a thesis[ 2] , taken from there[ 3] by Stefano Mazzocchi and popularized by him in 1999 in a defunct Apache Software Foundation project, Avalon , then further popularized in 2004 by Robert C. Martin and Martin Fowler . The term is related to, but different from, the dependency inversion principle , which concerns itself with decoupling dependencies between high-level and low-level layers through shared abstractions . The general concept is also related to event-driven programming in that it is often implemented using IoC, so that the custom code is commonly only concerned with the handling of events, whereas the event loop and dispatch of events/messages is handled by the framework or the runtime environment. Overview As an example, with traditional programming, the main function of an application might make function calls into a menu library to display a list of available commands and query the user to select one.[ 4] The library thus would return the chosen option as the value of the function call, and the main function uses this value to execute the associated command. This style was common in text based interfaces . For example, an email client may show a screen with commands to load new mails, answer the current mail, start a new mail, etc., and the program execution would block until the user presses a key to select a command. With inversion of control , on the other hand, the program would be written using a software framework that knows common behavioral and graphical elements, such as windowing systems , menus, controlling the mouse, and so on. The custom code \"fills in the blanks\" for the framework , such as supplying a table of menu items and registering a code subroutine for each item, but it is the framework that monitors the user's actions and invokes the subroutine when a menu item is selected. In the mail client example, the framework could follow both the keyboard and mouse inputs and call the command invoked by the user by either means, and at the same time monitor the network interface to find out if new messages arrive and refresh the screen when some network activity is detected. The same framework could be used as the skeleton(\u6846\u67b6) for a spreadsheet program or a text editor. Conversely, the framework knows nothing about Web browsers, spreadsheets or text editors; implementing their functionality takes custom code. Inversion of control carries\uff08\u643a\u5e26\uff0c\u8fd0\u8f93\uff0c\u4f20\u9012\uff09 the strong connotation\uff08\u5185\u6db5\uff09 that the reusable code and the problem-specific code are developed independently even though they operate together in an application. Software frameworks , callbacks , schedulers , event loops , dependency injection , and the template method are examples of design patterns that follow the inversion of control principle, although the term is most commonly used in the context of object-oriented programming . Inversion of control serves the following design purposes: To decouple the execution of a task from implementation. To focus a module on the task it is designed for. To free modules from assumptions about how other systems do what they do and instead rely on contracts . To prevent side effects when replacing a module. Inversion of control is sometimes facetiously referred to as the \"Hollywood Principle: Don't call us, we'll call you\". Description In traditional programming, the flow of the business logic is determined by objects that are statically bound to one another. With inversion of control, the flow depends on the object graph that is built up during program execution. Such a dynamic flow is made possible by object interactions that are defined through abstractions. This run-time binding is achieved by mechanisms such as dependency injection or a service locator . In IoC, the code could also be linked statically during compilation, but finding the code to execute by reading its description from external configuration instead of with a direct reference in the code itself. In dependency injection, a dependent object or module is coupled to the object it needs at run time . Which particular object will satisfy the dependency during program execution typically cannot be known at compile time using static analysis . While described in terms of object interaction here, the principle can apply to other programming methodologies besides object-oriented programming . In order for the running program to bind objects to one another, the objects must possess compatible interfaces . For example, class A may delegate behavior to interface I which is implemented by class B ; the program instantiates A and B , and then injects B into A . NOTE:\u8981\u60f3\u5b9e\u73b0\u5728 Overview \u4e2d\u63cf\u8ff0\u7684\u601d\u60f3\uff0c\u9700\u8981\u91c7\u7528\u4e0a\u9762\u8fd9\u6bb5\u8bdd\u4e2d\u63cf\u8ff0\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 Implementation techniques In object-oriented programming , there are several basic techniques to implement inversion of control. These are: 1\u3001Using a service locator pattern 2\u3001Using dependency injection , for example Constructor injection Parameter injection Setter injection Interface injection 3\u3001Using a contextualized lookup 4\u3001Using template method design pattern 5\u3001Using strategy design pattern In an original article by Martin Fowler,[ 9] the first three different techniques are discussed. In a description about inversion of control types,[ 10] the last one is mentioned. Often the contextualized lookup will be accomplished using a service locator\u3002","title":"wikipedia-Inversion-of-control"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/wikipedia-Inversion-of-control/#wikipedia#inversion#of#control","text":"In software engineering , inversion of control ( IoC ) is a design principle in which custom-written portions of a computer program receive the flow of control from a generic framework . A software architecture with this design inverts\uff08\u98a0\u5012\uff09 control as compared to traditional procedural programming : in traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code. NOTE: call into\u7684\u542b\u4e49\u662f\u201c\u8c03\u7528\u201d Inversion of control is used to increase modularity of the program and make it extensible ,[ 1] and has applications in object-oriented programming and other programming paradigms . The term was used by Michael Mattsson in a thesis[ 2] , taken from there[ 3] by Stefano Mazzocchi and popularized by him in 1999 in a defunct Apache Software Foundation project, Avalon , then further popularized in 2004 by Robert C. Martin and Martin Fowler . The term is related to, but different from, the dependency inversion principle , which concerns itself with decoupling dependencies between high-level and low-level layers through shared abstractions . The general concept is also related to event-driven programming in that it is often implemented using IoC, so that the custom code is commonly only concerned with the handling of events, whereas the event loop and dispatch of events/messages is handled by the framework or the runtime environment.","title":"wikipedia Inversion of control"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/wikipedia-Inversion-of-control/#overview","text":"As an example, with traditional programming, the main function of an application might make function calls into a menu library to display a list of available commands and query the user to select one.[ 4] The library thus would return the chosen option as the value of the function call, and the main function uses this value to execute the associated command. This style was common in text based interfaces . For example, an email client may show a screen with commands to load new mails, answer the current mail, start a new mail, etc., and the program execution would block until the user presses a key to select a command. With inversion of control , on the other hand, the program would be written using a software framework that knows common behavioral and graphical elements, such as windowing systems , menus, controlling the mouse, and so on. The custom code \"fills in the blanks\" for the framework , such as supplying a table of menu items and registering a code subroutine for each item, but it is the framework that monitors the user's actions and invokes the subroutine when a menu item is selected. In the mail client example, the framework could follow both the keyboard and mouse inputs and call the command invoked by the user by either means, and at the same time monitor the network interface to find out if new messages arrive and refresh the screen when some network activity is detected. The same framework could be used as the skeleton(\u6846\u67b6) for a spreadsheet program or a text editor. Conversely, the framework knows nothing about Web browsers, spreadsheets or text editors; implementing their functionality takes custom code. Inversion of control carries\uff08\u643a\u5e26\uff0c\u8fd0\u8f93\uff0c\u4f20\u9012\uff09 the strong connotation\uff08\u5185\u6db5\uff09 that the reusable code and the problem-specific code are developed independently even though they operate together in an application. Software frameworks , callbacks , schedulers , event loops , dependency injection , and the template method are examples of design patterns that follow the inversion of control principle, although the term is most commonly used in the context of object-oriented programming . Inversion of control serves the following design purposes: To decouple the execution of a task from implementation. To focus a module on the task it is designed for. To free modules from assumptions about how other systems do what they do and instead rely on contracts . To prevent side effects when replacing a module. Inversion of control is sometimes facetiously referred to as the \"Hollywood Principle: Don't call us, we'll call you\".","title":"Overview"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/wikipedia-Inversion-of-control/#description","text":"In traditional programming, the flow of the business logic is determined by objects that are statically bound to one another. With inversion of control, the flow depends on the object graph that is built up during program execution. Such a dynamic flow is made possible by object interactions that are defined through abstractions. This run-time binding is achieved by mechanisms such as dependency injection or a service locator . In IoC, the code could also be linked statically during compilation, but finding the code to execute by reading its description from external configuration instead of with a direct reference in the code itself. In dependency injection, a dependent object or module is coupled to the object it needs at run time . Which particular object will satisfy the dependency during program execution typically cannot be known at compile time using static analysis . While described in terms of object interaction here, the principle can apply to other programming methodologies besides object-oriented programming . In order for the running program to bind objects to one another, the objects must possess compatible interfaces . For example, class A may delegate behavior to interface I which is implemented by class B ; the program instantiates A and B , and then injects B into A . NOTE:\u8981\u60f3\u5b9e\u73b0\u5728 Overview \u4e2d\u63cf\u8ff0\u7684\u601d\u60f3\uff0c\u9700\u8981\u91c7\u7528\u4e0a\u9762\u8fd9\u6bb5\u8bdd\u4e2d\u63cf\u8ff0\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002","title":"Description"},{"location":"1Design/Principle/Control-theory/Inversion-of-control/wikipedia-Inversion-of-control/#implementation#techniques","text":"In object-oriented programming , there are several basic techniques to implement inversion of control. These are: 1\u3001Using a service locator pattern 2\u3001Using dependency injection , for example Constructor injection Parameter injection Setter injection Interface injection 3\u3001Using a contextualized lookup 4\u3001Using template method design pattern 5\u3001Using strategy design pattern In an original article by Martin Fowler,[ 9] the first three different techniques are discussed. In a description about inversion of control types,[ 10] the last one is mentioned. Often the contextualized lookup will be accomplished using a service locator\u3002","title":"Implementation techniques"},{"location":"1Design/Principle/Control-theory/TODO-Control-dependency/","text":"Control dependency \u7ecf\u5e38\u78b0\u5230\u7684\u4e00\u79cd\u8bf4\u6cd5\u3002 sciencedirect Control Dependency wikipedia Dependence analysis","title":"Introduction"},{"location":"1Design/Principle/Control-theory/TODO-Control-dependency/#control#dependency","text":"\u7ecf\u5e38\u78b0\u5230\u7684\u4e00\u79cd\u8bf4\u6cd5\u3002","title":"Control dependency"},{"location":"1Design/Principle/Control-theory/TODO-Control-dependency/#sciencedirect#control#dependency","text":"","title":"sciencedirect Control Dependency"},{"location":"1Design/Principle/Control-theory/TODO-Control-dependency/#wikipedia#dependence#analysis","text":"","title":"wikipedia Dependence analysis"},{"location":"1Design/Principle/Information-hiding/","text":"Information hiding wikipedia Information hiding In computer science , information hiding is the principle of segregation of the design decisions in a computer program that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable interface which protects the remainder of the program from the implementation (the details that are most likely to change). NOTE: \u901a\u8fc7\u63d0\u9ad8abstract interface\u6765\u5b9e\u73b0information hiding Written another way, information hiding is the ability to prevent certain aspects of a class or software component from being accessible to its clients , using either programming language features (like private variables) or an explicit exporting policy.","title":"Introduction"},{"location":"1Design/Principle/Information-hiding/#information#hiding","text":"","title":"Information hiding"},{"location":"1Design/Principle/Information-hiding/#wikipedia#information#hiding","text":"In computer science , information hiding is the principle of segregation of the design decisions in a computer program that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable interface which protects the remainder of the program from the implementation (the details that are most likely to change). NOTE: \u901a\u8fc7\u63d0\u9ad8abstract interface\u6765\u5b9e\u73b0information hiding Written another way, information hiding is the ability to prevent certain aspects of a class or software component from being accessible to its clients , using either programming language features (like private variables) or an explicit exporting policy.","title":"wikipedia Information hiding"},{"location":"1Design/Principle/Information-hiding/Transparency/","text":"Transparency \u5e95\u5c42\u7684\u6539\u53d8\u4e0d\u4f1a\u5f15\u8d77\u4e0a\u5c42\u7684\u53d8\u52a8\uff0c\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u597d\u7684\u6027\u8d28\u3002\u6700\u80fd\u591f\u4f53\u73b0\"transparency\"\u4f18\u52bf\u7684\u662fvirtual memory\uff0c\u53c2\u89c1\u5de5\u7a0bLinux-OS\u7684 Kernel\\Guide\\Memory-management\\Virtual-memory \u7ae0\u8282\u3002 wikipedia Transparency (human\u2013computer interaction) NOTE: \u867d\u7136\u6807\u9898\u4e2d\uff0c\u5e26\u6709human-computer interaction\uff0c\u4f46\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u4e3b\u8981\u5185\u5bb9\u5176\u5b9e\u8fd8\u662f\u5728transparency\uff0c\u5b83\u5e76\u6ca1\u6709human-computer interaction\u7684\u5185\u5bb9\uff1b\u8fd9\u7bc7\u6587\u7ae0\u7684\u5185\u5bb9\u975e\u5e38\u597d\uff0c\u8bb2\u5230\u4e86transparency\u7684\u7cbe\u9ad3\u3002 Any change in a computing system, such as a new feature or new component, is transparent if the system after change adheres to previous external interface as much as possible while changing its internal behaviour. The purpose is to shield(\u9632\u6b62) from change all systems (or human users) on the other end of the interface. NOTE: \u8fd9\u6bb5\u7684\u603b\u7ed3\u662f\u975e\u5e38\u597d\u7684 The term is used particularly often with regard to an abstraction layer that is invisible either from its upper or lower neighbouring layer. Transparencies A transparency is some aspect of the distributed system that is hidden from the user (programmer, system developer, user or application program). Transparency and decouple TODO","title":"Introduction"},{"location":"1Design/Principle/Information-hiding/Transparency/#transparency","text":"\u5e95\u5c42\u7684\u6539\u53d8\u4e0d\u4f1a\u5f15\u8d77\u4e0a\u5c42\u7684\u53d8\u52a8\uff0c\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u597d\u7684\u6027\u8d28\u3002\u6700\u80fd\u591f\u4f53\u73b0\"transparency\"\u4f18\u52bf\u7684\u662fvirtual memory\uff0c\u53c2\u89c1\u5de5\u7a0bLinux-OS\u7684 Kernel\\Guide\\Memory-management\\Virtual-memory \u7ae0\u8282\u3002","title":"Transparency"},{"location":"1Design/Principle/Information-hiding/Transparency/#wikipedia#transparency#humancomputer#interaction","text":"NOTE: \u867d\u7136\u6807\u9898\u4e2d\uff0c\u5e26\u6709human-computer interaction\uff0c\u4f46\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u4e3b\u8981\u5185\u5bb9\u5176\u5b9e\u8fd8\u662f\u5728transparency\uff0c\u5b83\u5e76\u6ca1\u6709human-computer interaction\u7684\u5185\u5bb9\uff1b\u8fd9\u7bc7\u6587\u7ae0\u7684\u5185\u5bb9\u975e\u5e38\u597d\uff0c\u8bb2\u5230\u4e86transparency\u7684\u7cbe\u9ad3\u3002 Any change in a computing system, such as a new feature or new component, is transparent if the system after change adheres to previous external interface as much as possible while changing its internal behaviour. The purpose is to shield(\u9632\u6b62) from change all systems (or human users) on the other end of the interface. NOTE: \u8fd9\u6bb5\u7684\u603b\u7ed3\u662f\u975e\u5e38\u597d\u7684 The term is used particularly often with regard to an abstraction layer that is invisible either from its upper or lower neighbouring layer.","title":"wikipedia Transparency (human\u2013computer interaction)"},{"location":"1Design/Principle/Information-hiding/Transparency/#transparencies","text":"A transparency is some aspect of the distributed system that is hidden from the user (programmer, system developer, user or application program).","title":"Transparencies"},{"location":"1Design/Principle/Information-hiding/Transparency/#transparency#and#decouple","text":"TODO","title":"Transparency and decouple"},{"location":"1Design/UML/","text":"Unified Modeling Language wikipedia Unified Modeling Language","title":"Introduction"},{"location":"1Design/UML/#unified#modeling#language","text":"","title":"Unified Modeling Language"},{"location":"1Design/UML/#wikipedia#unified#modeling#language","text":"","title":"wikipedia Unified Modeling Language"},{"location":"2Development/","text":"\u5173\u4e8e\u672c\u7ae0 \u4f5c\u4e3aprogrammer\uff0c\u6211\u4eec\u4f7f\u7528programming language\u8fdb\u884cdevelop\uff0c\u672c\u6587\u5bf9\u7814\u53d1\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002 Software development\u662f\u6700\u6700\u6838\u5fc3\u7684\u6d3b\u52a8\u3002 wikipedia Software development Programming language \u9700\u8981\u9009\u62e9\u5408\u9002\u7684programming language\uff0c\u53c2\u89c1\u5de5\u7a0b programming-language \u3002 Common in development \u4e0b\u9762\u7f57\u5217\u4e86\u5728\u8fdb\u884cdevelopment\u4e2d\u4f1a\u6d89\u53ca\u5230\u7684\u4e00\u7cfb\u5217\u95ee\u9898\uff1a Design pattern design pattern\u662f\u524d\u4eba\u6240\u603b\u7ed3\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u4e0d\u7ba1\u662f\u54ea\u79cdprogramming language\uff0c\u90fd\u53ef\u4ee5\u8fd0\u7528\u5b83\uff0c\u5173\u4e8edesign pattern\uff0c\u53c2\u89c1 Design-pattern \u3002 Resource-management \u4e0d\u7ba1\u4f7f\u7528\u54ea\u79cdprogramming language\uff0c\u90fd\u4f1a\u6d89\u53ca\u90fdresource management\u7684\u95ee\u9898\uff0c\u53c2\u89c1 Resource-management \u3002 \u6ce8\u91ca \u5982\u4f55\u8fdb\u884c\u6ce8\u91ca\uff1f\u5982\u4f55\u751f\u6210document\uff1f\u5404\u79cdprogramming language\u5728\u8fd9\u65b9\u9762\u90fd\u505a\u4e86\u5404\u81ea\u7684\u52aa\u529b\uff0c\u4e5f\u6709\u5404\u81ea\u7684\u5b9e\u73b0\uff0c\u540e\u9762\u5728\u8ba8\u8bba\u5177\u4f53\u7684programming language\u7684\u65f6\u5019\u518d\u8fdb\u884c\u8bf4\u660e\u3002 \u6d4b\u8bd5 \u5982\u4f55\u8fdb\u884c\u6d4b\u8bd5\uff1f \u4ee3\u7801\u8986\u76d6\u7387 \u5982\u4f55\u7edf\u8ba1\u4ee3\u7801\u8986\u76d6\u7387\uff1f Profile \u5982\u4f55\u8fdb\u884cprofile\uff1f Linter \u5982\u4f55\u8fdb\u884clint\uff1f wikipedia Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing","title":"Introduction"},{"location":"2Development/#_1","text":"\u4f5c\u4e3aprogrammer\uff0c\u6211\u4eec\u4f7f\u7528programming language\u8fdb\u884cdevelop\uff0c\u672c\u6587\u5bf9\u7814\u53d1\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9\u8fdb\u884c\u603b\u7ed3\u3002 Software development\u662f\u6700\u6700\u6838\u5fc3\u7684\u6d3b\u52a8\u3002","title":"\u5173\u4e8e\u672c\u7ae0"},{"location":"2Development/#wikipedia#software#development","text":"","title":"wikipedia Software development"},{"location":"2Development/#programming#language","text":"\u9700\u8981\u9009\u62e9\u5408\u9002\u7684programming language\uff0c\u53c2\u89c1\u5de5\u7a0b programming-language \u3002","title":"Programming language"},{"location":"2Development/#common#in#development","text":"\u4e0b\u9762\u7f57\u5217\u4e86\u5728\u8fdb\u884cdevelopment\u4e2d\u4f1a\u6d89\u53ca\u5230\u7684\u4e00\u7cfb\u5217\u95ee\u9898\uff1a","title":"Common in development"},{"location":"2Development/#design#pattern","text":"design pattern\u662f\u524d\u4eba\u6240\u603b\u7ed3\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u4e0d\u7ba1\u662f\u54ea\u79cdprogramming language\uff0c\u90fd\u53ef\u4ee5\u8fd0\u7528\u5b83\uff0c\u5173\u4e8edesign pattern\uff0c\u53c2\u89c1 Design-pattern \u3002","title":"Design pattern"},{"location":"2Development/#resource-management","text":"\u4e0d\u7ba1\u4f7f\u7528\u54ea\u79cdprogramming language\uff0c\u90fd\u4f1a\u6d89\u53ca\u90fdresource management\u7684\u95ee\u9898\uff0c\u53c2\u89c1 Resource-management \u3002","title":"Resource-management"},{"location":"2Development/#_2","text":"\u5982\u4f55\u8fdb\u884c\u6ce8\u91ca\uff1f\u5982\u4f55\u751f\u6210document\uff1f\u5404\u79cdprogramming language\u5728\u8fd9\u65b9\u9762\u90fd\u505a\u4e86\u5404\u81ea\u7684\u52aa\u529b\uff0c\u4e5f\u6709\u5404\u81ea\u7684\u5b9e\u73b0\uff0c\u540e\u9762\u5728\u8ba8\u8bba\u5177\u4f53\u7684programming language\u7684\u65f6\u5019\u518d\u8fdb\u884c\u8bf4\u660e\u3002","title":"\u6ce8\u91ca"},{"location":"2Development/#_3","text":"\u5982\u4f55\u8fdb\u884c\u6d4b\u8bd5\uff1f","title":"\u6d4b\u8bd5"},{"location":"2Development/#_4","text":"\u5982\u4f55\u7edf\u8ba1\u4ee3\u7801\u8986\u76d6\u7387\uff1f","title":"\u4ee3\u7801\u8986\u76d6\u7387"},{"location":"2Development/#profile","text":"\u5982\u4f55\u8fdb\u884cprofile\uff1f","title":"Profile"},{"location":"2Development/#linter","text":"\u5982\u4f55\u8fdb\u884clint\uff1f","title":"Linter"},{"location":"2Development/#wikipedia#tools","text":"Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing","title":"wikipedia Tools"},{"location":"2Development/Configuration-management/","text":"Software configuration management \u5728\u8f6f\u4ef6\u516c\u53f8\uff0c\u4e00\u822c\u90fd\u4f1a\u6709\u914d\u7ba1\u7684\u89d2\u8272\u3002 version control \u53ef\u4ee5\u4f7f\u7528\u7684\u5de5\u5177\uff1a git svn wikipedia Software configuration management In software engineering , software configuration management ( SCM or S/W CM ) is the task of tracking and controlling changes in the software, part of the larger cross-disciplinary field of configuration management . SCM practices include revision control and the establishment of baselines . If something goes wrong, SCM can determine what was changed and who changed it. If a configuration is working well, SCM can determine how to replicate it across many hosts. The acronym \"SCM\" is also expanded as source configuration management process and software change and configuration management . Purposes The goals of SCM are generally: Configuration identification - Identifying configurations, configuration items and baselines . Configuration control - Implementing a controlled change process. This is usually achieved by setting up a change control board whose primary function is to approve or reject all change requests that are sent against any baseline. Configuration status accounting - Recording and reporting all the necessary information on the status of the development process. Configuration auditing - Ensuring that configurations contain all their intended parts and are sound with respect to their specifying documents, including requirements, architectural specifications and user manuals. Build management - Managing the process and tools used for builds. Process management - Ensuring adherence to the organization's development process. Environment management - Managing the software and hardware that host the system. Teamwork - Facilitate team interactions related to the process. Defect tracking - Making sure every defect has traceability back to the source. With the introduction of cloud computing the purposes of SCM tools have become merged in some cases. The SCM tools themselves have become virtual appliances that can be instantiated as virtual machines and saved with state and version. The tools can model and manage cloud-based virtual resources, including virtual appliances, storage units, and software bundles. The roles and responsibilities of the actors have become merged as well with developers now being able to dynamically instantiate virtual servers and related resources.","title":"Introduction"},{"location":"2Development/Configuration-management/#software#configuration#management","text":"\u5728\u8f6f\u4ef6\u516c\u53f8\uff0c\u4e00\u822c\u90fd\u4f1a\u6709\u914d\u7ba1\u7684\u89d2\u8272\u3002","title":"Software configuration management"},{"location":"2Development/Configuration-management/#version#control","text":"\u53ef\u4ee5\u4f7f\u7528\u7684\u5de5\u5177\uff1a git svn","title":"version control"},{"location":"2Development/Configuration-management/#wikipedia#software#configuration#management","text":"In software engineering , software configuration management ( SCM or S/W CM ) is the task of tracking and controlling changes in the software, part of the larger cross-disciplinary field of configuration management . SCM practices include revision control and the establishment of baselines . If something goes wrong, SCM can determine what was changed and who changed it. If a configuration is working well, SCM can determine how to replicate it across many hosts. The acronym \"SCM\" is also expanded as source configuration management process and software change and configuration management .","title":"wikipedia Software configuration management"},{"location":"2Development/Configuration-management/#purposes","text":"The goals of SCM are generally: Configuration identification - Identifying configurations, configuration items and baselines . Configuration control - Implementing a controlled change process. This is usually achieved by setting up a change control board whose primary function is to approve or reject all change requests that are sent against any baseline. Configuration status accounting - Recording and reporting all the necessary information on the status of the development process. Configuration auditing - Ensuring that configurations contain all their intended parts and are sound with respect to their specifying documents, including requirements, architectural specifications and user manuals. Build management - Managing the process and tools used for builds. Process management - Ensuring adherence to the organization's development process. Environment management - Managing the software and hardware that host the system. Teamwork - Facilitate team interactions related to the process. Defect tracking - Making sure every defect has traceability back to the source. With the introduction of cloud computing the purposes of SCM tools have become merged in some cases. The SCM tools themselves have become virtual appliances that can be instantiated as virtual machines and saved with state and version. The tools can model and manage cloud-based virtual resources, including virtual appliances, storage units, and software bundles. The roles and responsibilities of the actors have become merged as well with developers now being able to dynamically instantiate virtual servers and related resources.","title":"Purposes"},{"location":"2Development/Configuration-management/git/Error-Cannot-lock-ref-%27refs-remotes-origin-master%27/","text":"Cannot lock ref 'refs/remotes/origin/master' github desktop / desktop / Error: Cannot lock ref 'refs/remotes/origin/master' #6121 A rm .git/refs/remotes/origin/master git fetch git branch --set-upstream-to = origin/master NOTE: \u80fd\u591f\u6210\u529f\u89e3\u51b3\u95ee\u9898 Let me know if that doesn't get things working. stackoverflow cannot lock ref 'refs/remotes/origin/master' A $ git update-ref -d refs/remotes/origin/ [ locked branch name ] NOTE: \u5e76\u6ca1\u6709\u7528","title":"Cannot lock ref 'refs/remotes/origin/master'"},{"location":"2Development/Configuration-management/git/Error-Cannot-lock-ref-%27refs-remotes-origin-master%27/#cannot#lock#ref#refsremotesoriginmaster","text":"","title":"Cannot lock ref 'refs/remotes/origin/master'"},{"location":"2Development/Configuration-management/git/Error-Cannot-lock-ref-%27refs-remotes-origin-master%27/#github#desktopdesktoperror#cannot#lock#ref#refsremotesoriginmaster#6121","text":"","title":"github desktop/desktop/Error: Cannot lock ref 'refs/remotes/origin/master' #6121"},{"location":"2Development/Configuration-management/git/Error-Cannot-lock-ref-%27refs-remotes-origin-master%27/#a","text":"rm .git/refs/remotes/origin/master git fetch git branch --set-upstream-to = origin/master NOTE: \u80fd\u591f\u6210\u529f\u89e3\u51b3\u95ee\u9898 Let me know if that doesn't get things working.","title":"A"},{"location":"2Development/Configuration-management/git/Error-Cannot-lock-ref-%27refs-remotes-origin-master%27/#stackoverflow#cannot#lock#ref#refsremotesoriginmaster","text":"","title":"stackoverflow cannot lock ref 'refs/remotes/origin/master'"},{"location":"2Development/Configuration-management/git/Error-Cannot-lock-ref-%27refs-remotes-origin-master%27/#a_1","text":"$ git update-ref -d refs/remotes/origin/ [ locked branch name ] NOTE: \u5e76\u6ca1\u6709\u7528","title":"A"},{"location":"2Development/Development-process/","text":"Software development process wikipedia Software development process","title":"Introduction"},{"location":"2Development/Development-process/#software#development#process","text":"","title":"Software development process"},{"location":"2Development/Development-process/#wikipedia#software#development#process","text":"","title":"wikipedia Software development process"},{"location":"2Development/Development-process/TDD%26BDD/","text":"TDD && BDD \u4e00\u3001TDD\u3001BDD\u4e24\u8005\u6240\u5f3a\u8c03\u7684\u91cd\u70b9\u662f\u4e0d\u540c\u7684\u3001\u4e24\u8005\u662f\u76f8\u4e92\u8865\u5145\u7684\uff0c\u5e76\u4e0d\u77db\u76fe\uff0c\u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u7814\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u8005\u662f\u53ef\u4ee5\u540c\u65f6\u8fd0\u7528\u7684 zhihu TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54 NOTE: \u975e\u5e38\u597d\u5730\u4ecb\u7ecd\u4e86TDD\u3001BDD TDD \uff08Test-Driven Development) \u6982\u62ec\u6765\u8bf4\uff0c\u662f\u5148\u5199\u4e00\u5c0f\u6bb5\u67d0\u4e2a\u529f\u80fd\u7684\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6d4b\u8bd5\u5931\u8d25\uff0c\u518d\u5199\u5b9e\u73b0\u4ee3\u7801\uff0c\u6d4b\u8bd5\u6210\u529f\uff0c\u518d\u8fed\u4ee3\u4e0b\u4e00\u4e2a\u529f\u80fd\u3002 \u8fd9\u5bf9\u4e8e\u5355\u5143\u6d4b\u8bd5\u4e0e\u5f00\u53d1\u662f\u5f88\u6709\u7528\u7684\u4e00\u79cd\u5b9e\u8df5\u3002\u56e0\u4e3aTDD\u662f\u8981\u6c42\u5728\u5199\u4ee3\u7801\u4e4b\u524d\u5c31\u8981\u60f3\u597d\u600e\u4e48\u6d4b\uff0c\u6d4b\u4ec0\u4e48\uff0c\u8fd9\u89e3\u51b3\u4e86\u53ef\u6d4b\u6027\u4f4e\u7684\u95ee\u9898\u3002\u53e6\u5916\uff0cTDD\u8fd8\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\uff0c\u4ee4bug\u5728\u7f16\u7801\u9636\u6bb5\u5c31\u80fd\u88ab\u53d1\u73b0\u3002\u51cf\u5c11\u4e0a\u7ebf\u540e\u53d1\u73b0\u95ee\u9898\uff0c\u4fee\u590d\u95ee\u9898\u7684\u6307\u6570\u7ea7\u589e\u957f\u6210\u672c\u3002 NOTE: \u975e\u5e38\u597d\u7684\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u9700\u8981\u4f7f\u7528TDD \u7136\u800c\uff0c TDD\u4e5f\u6709\u5b83\u7684\u4e0d\u8db3\uff1a 1\u3001\u5b83\u89e3\u51b3\u7684\u662f\u4ee3\u7801\u7ea7\u7684\u9a8c\u8bc1\uff0c\u4f46\u662f\u6d4b\u8bd5\u4ee3\u7801\u4e0e\u9700\u6c42\u7684\u7b26\u5408\u95ee\u9898\u89e3\u51b3\u5f97\u4e0d\u662f\u5f88\u597d\uff0c\u975e\u6280\u672f\u4eba\u5458\u3001\u5ba2\u6237\u770b\u4e0d\u61c2\u4ee3\u7801\uff0c\u65e0\u6cd5\u8bc4\u5ba1\u6d4b\u8bd5\u662f\u5426\u7b26\u5408\u9700\u6c42\u3002 2\u3001\u6d4b\u8bd5\u4ee3\u7801\u53ef\u80fd\u5199\u5f97\u592a\u5927\u6216\u8005\u592a\u5c0f\uff0c\u4ee4\u5f00\u53d1\u4eba\u5458\u6548\u7387\u4e0b\u964d\u3002\u8fd9\u4e0e\u6d4b\u8bd5\u4ee3\u7801\u4e0e\u529f\u80fd\u5bf9\u5e94\u4e0d\u8d77\u6765\u6709\u5f88\u5927\u5173\u7cfb\u3002 \u4e8e\u662f\uff0c\u6709\u4e00\u4e9b\u4eba\u6269\u5c55\u4e86TDD\uff0c\u63d0\u51fa\u4e86BBD\u3002 BDD\uff08 Behaviour-Driven Development) \u4ed6\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u81ea\u7136\u8bed\u8a00\u6309\u7167\u4e00\u4e9b\u7b80\u5355\u8bed\u6cd5\u7ec4\u7ec7\u8d77\u6765\uff0c\u4ee3\u7801\u5c06\u4f1a\u975e\u5e38\u5bb9\u6613\u89e3\u91ca\u4e0e\u5904\u7406\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u975e\u6280\u672f\u4eba\u5458\u3001\u5ba2\u6237\u53ef\u4ee5\u53c2\u4e0e\u5230\u9700\u6c42\u7684\u786e\u8ba4\u4e0e\u9a8c\u6536\u5f53\u4e2d\u3002 \u6211\u4eec\u770b\u4e00\u4e0b\u4e24\u4e2a\u4f8b\u5b50 Scenario: Refunded items should be returned to stock Given a customer bought a black sweater from me and I have three black sweaters left in stock. When he returns the sweater for a refund then I should have four black sweaters in stock. \u573a\u666f\uff1a \u5fae\u4fe1\u804a\u5929 \u5047\u5982 \u624b\u673a\u5b89\u88c5\u4e86\u5fae\u4fe1 \u5f53 \u7528\u6237\u6253\u5f00\u5fae\u4fe1 \u90a3\u4e48 \u624b\u673a\u4f1a\u51fa\u73b0\u7528\u6237\u7684\u5fae\u4fe1\u804a\u5929\u754c\u9762 \u4ee5\u4e0a\u5c31\u662fBDD\u4f7f\u7528\u7684\u53eb\u505aGherkin\u7684\u8bed\u8a00\uff0c\u5b83\u7684\u7406\u5ff5\u662f\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u6765\u63cf\u8ff0\u529f\u80fd\uff0c\u800c\u4e14\u5f3a\u8c03\u7684\u662f\u4f7f\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\u9700\u6c42\u529f\u80fd\u3002\u662f\u4e0d\u662f\u8ddf\u654f\u6377\u5f00\u53d1\u4e2d\u7684\u7528\u6237\u6545\u4e8b(User Story)\u5f88\u50cf\uff1f\u55ef\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u4e00\u4e2a\u5988\u751f\u7684\u3002 \u5176\u5b9e\u53ea\u8981\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u654f\u6377\u5ba3\u8a00\uff0c\u5c31\u4f1a\u53d1\u73b0\uff0c\u903c\u5f1f\u5f1f\u5e72\u7684\u4e8b\u5c31\u662f\u89e3\u51b3\u4e2a\u4f53\u4e4b\u95f4\u4e92\u52a8\u4e0e\u5ba2\u6237\u534f\u4f5c\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002 NOTE: BDD\u53ef\u4ee5\u5b9e\u73b0\u654f\u6377\u5f00\u53d1 BDD\u7684\u9700\u6c42\u7814\u8ba8\u4f1a(Specification Workshops) \u90a3\u4e48\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u79cd\u8bed\u8a00\uff0c\u628a\u9700\u6c42\u4e00\u4e2a\u4e2a\u7528\u4f8b\u5b50\u5217\u51fa\u6765\uff0c\u5ba2\u6237/\u4ea7\u54c1\u3001\u5f00\u53d1\u3001\u6d4b\u8bd5\u4e09\u65b9\u4e00\u8d77\u8ba8\u8bba\u4e0e\u786e\u8ba4\u3002 NOTE: \u4e09\u65b9\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u534f\u4f5c\uff0c\u8fd9\u662fBDD\u7684\u4f18\u52bf BDD\u7684\u7531\u5916\u800c\u5185\u7684\u5f00\u53d1\u6a21\u5f0f(Outside-In Development) \u7136\u540e\uff0c\u5f00\u53d1\u4eba\u5458\u4f7f\u7528BDD\u5de5\u5177(JBehave, Cucumber, Behave)\u53bb\u8fd0\u884c\u3001\u5b9e\u73b0\u6d4b\u8bd5\u811a\u672c\u3002\u518d\u4e00\u70b9\u70b9\u7f16\u5199\u5b9e\u73b0\u529f\u80fd\u4ee3\u7801\uff0c\u8d70\u5230\u6240\u6709\u7684\u529f\u80fd\u90fd\u8fd0\u884c\u901a\u8fc7\u3002 \u7531\u4e8e\u5f00\u53d1\u7684\u8fc7\u7a0b\u662f\u4ece\u6700\u63a5\u8fd1\u7528\u6237\u7684UI\u754c\u9762\u5f00\u59cb\uff0c\u518d\u60f3\u5230\u5185\u90e8\u8bbe\u8ba1\uff0c\u56e0\u6b64\u5b83\u79f0\u4e3a\u7531\u5916\u800c\u5185\u7684\u5f00\u53d1\u6a21\u5f0f\u3002\u5982\u679c\u518d\u52a0\u4e0a\u7531\u5185\u800c\u5916\u7684\u8fc7\u7a0b\uff0c\u55ef\uff0c\u300a\u5f00\u53d1\u4eba\u5458\u7684\u81ea\u6211\u4fee\u517b\u300b\u5c31\u7b49\u7740\u4f60\u6765\u5199\u4e86\uff0c\u4f60\u53eb\u53f2\u5766\u5c3c\u65af\u62c9\u592b\u65af\u57fa\u5bf9\u5427\uff1f \u56de\u5230Gherkin\u8bed\u8a00\uff0c\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u5b83\u9700\u8981\u9075\u5faa\u4e00\u5b9a\u7684\u7b80\u5355\u8bed\u6cd5 Scenario(\u573a\u666f)\uff0c\u8bf4\u660e\u529f\u80fd\u7684\u4f8b\u5b50 Given(\u5047\u5982)\uff0c\u6784\u9020\u6d4b\u8bd5\u7684\u73af\u5883\u6761\u4ef6 When(\u5f53)\uff0c\u7ed9\u4e88\u7684\u8f93\u5165\uff0c\u53ef\u4ee5\u662f\u7528\u6237\uff0c\u4e5f\u53ef\u4ee5\u662f\u5916\u90e8\u7cfb\u7edf\uff0c\u4e5f\u53ef\u4ee5\u662f\u7cfb\u7edf\u672c\u8eab\u5b9a\u65f6/\u6761\u4ef6\u89e6\u53d1\u7684 Then(\u90a3\u4e48)\uff0c\u7cfb\u7edf\u7684\u8f93\u51fa\uff0c\u6216\u8005\u8bf4\u884c\u4e3a \u82e5\u5e72\u4e2aGiven,When,Then\u6784\u6210\u4e00\u4e2aScenario\uff0c\u82e5\u5e72\u4e2aScenario\u6784\u6210\u4e00\u4e2aFeature\uff0c\u82e5\u5e72\u4e2aFeature\u6700\u7ec8\u6784\u6210\u4e00\u4e2a\u7cfb\u7edf\u7684\u5b8c\u6574\u529f\u80fd\u9700\u6c42\u3002 \u5218\u6587\u9f99\u7684\u56de\u7b54 BDD\u7684\u6838\u5fc3\u4ef7\u503c\u662f\u4f53\u73b0\u5728\u6b63\u786e\u7684\u5bf9\u7cfb\u7edf\u884c\u4e3a\u8fdb\u884c\u8bbe\u8ba1\uff0c\u6240\u4ee5\u5b83\u5e76\u975e\u4e00\u79cd\u884c\u4e4b\u6709\u6548\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002\u5b83\u5f3a\u8c03\u7684\u662f\u7cfb\u7edf\u6700\u7ec8\u7684\u5b9e\u73b0\u4e0e\u7528\u6237\u671f\u671b\u7684\u884c\u4e3a\u662f\u4e00\u81f4\u7684\u3001\u9a8c\u8bc1\u4ee3\u7801\u5b9e\u73b0\u662f\u5426\u7b26\u5408\u8bbe\u8ba1\u76ee\u6807\u3002\u4f46\u662f\u5b83\u672c\u8eab\u5e76\u4e0d\u5f3a\u8c03\u5bf9\u7cfb\u7edf\u529f\u80fd\u3001\u6027\u80fd\u4ee5\u53ca\u8fb9\u754c\u503c\u7b49\u7684\u5065\u5168\u6027\u505a\u4fdd\u8bc1\uff0c\u65e0\u6cd5\u50cf\u5b8c\u6574\u7684\u6d4b\u8bd5\u4e00\u6837\u53d1\u73b0\u7cfb\u7edf\u7684\u5404\u79cd\u95ee\u9898\u3002\u4f46BDD\u5021\u5bfc\u7684\u7528\u7b80\u6d01\u7684\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u7cfb\u7edf\u884c\u4e3a\u7684\u7406\u5ff5\uff0c\u53ef\u4ee5\u660e\u786e\u7684\u6839\u636e\u8bbe\u8ba1\u4ea7\u751f\u6d4b\u8bd5\uff0c\u5e76\u4fdd\u969c\u6d4b\u8bd5\u7528\u4f8b\u7684\u8d28\u91cf\u3002 NOTE: BDD\u5f3a\u8c03\u7684\u548cTDD\u662f\u4e0d\u540c\u7684","title":"Introduction"},{"location":"2Development/Development-process/TDD%26BDD/#tdd#bdd","text":"\u4e00\u3001TDD\u3001BDD\u4e24\u8005\u6240\u5f3a\u8c03\u7684\u91cd\u70b9\u662f\u4e0d\u540c\u7684\u3001\u4e24\u8005\u662f\u76f8\u4e92\u8865\u5145\u7684\uff0c\u5e76\u4e0d\u77db\u76fe\uff0c\u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u7814\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u8005\u662f\u53ef\u4ee5\u540c\u65f6\u8fd0\u7528\u7684","title":"TDD &amp;&amp; BDD"},{"location":"2Development/Development-process/TDD%26BDD/#zhihu#tdd#bdd","text":"","title":"zhihu TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f"},{"location":"2Development/Development-process/TDD%26BDD/#_1","text":"NOTE: \u975e\u5e38\u597d\u5730\u4ecb\u7ecd\u4e86TDD\u3001BDD","title":"\u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54"},{"location":"2Development/Development-process/TDD%26BDD/#tdd#test-driven#development","text":"\u6982\u62ec\u6765\u8bf4\uff0c\u662f\u5148\u5199\u4e00\u5c0f\u6bb5\u67d0\u4e2a\u529f\u80fd\u7684\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6d4b\u8bd5\u5931\u8d25\uff0c\u518d\u5199\u5b9e\u73b0\u4ee3\u7801\uff0c\u6d4b\u8bd5\u6210\u529f\uff0c\u518d\u8fed\u4ee3\u4e0b\u4e00\u4e2a\u529f\u80fd\u3002 \u8fd9\u5bf9\u4e8e\u5355\u5143\u6d4b\u8bd5\u4e0e\u5f00\u53d1\u662f\u5f88\u6709\u7528\u7684\u4e00\u79cd\u5b9e\u8df5\u3002\u56e0\u4e3aTDD\u662f\u8981\u6c42\u5728\u5199\u4ee3\u7801\u4e4b\u524d\u5c31\u8981\u60f3\u597d\u600e\u4e48\u6d4b\uff0c\u6d4b\u4ec0\u4e48\uff0c\u8fd9\u89e3\u51b3\u4e86\u53ef\u6d4b\u6027\u4f4e\u7684\u95ee\u9898\u3002\u53e6\u5916\uff0cTDD\u8fd8\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\uff0c\u4ee4bug\u5728\u7f16\u7801\u9636\u6bb5\u5c31\u80fd\u88ab\u53d1\u73b0\u3002\u51cf\u5c11\u4e0a\u7ebf\u540e\u53d1\u73b0\u95ee\u9898\uff0c\u4fee\u590d\u95ee\u9898\u7684\u6307\u6570\u7ea7\u589e\u957f\u6210\u672c\u3002 NOTE: \u975e\u5e38\u597d\u7684\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u9700\u8981\u4f7f\u7528TDD \u7136\u800c\uff0c TDD\u4e5f\u6709\u5b83\u7684\u4e0d\u8db3\uff1a 1\u3001\u5b83\u89e3\u51b3\u7684\u662f\u4ee3\u7801\u7ea7\u7684\u9a8c\u8bc1\uff0c\u4f46\u662f\u6d4b\u8bd5\u4ee3\u7801\u4e0e\u9700\u6c42\u7684\u7b26\u5408\u95ee\u9898\u89e3\u51b3\u5f97\u4e0d\u662f\u5f88\u597d\uff0c\u975e\u6280\u672f\u4eba\u5458\u3001\u5ba2\u6237\u770b\u4e0d\u61c2\u4ee3\u7801\uff0c\u65e0\u6cd5\u8bc4\u5ba1\u6d4b\u8bd5\u662f\u5426\u7b26\u5408\u9700\u6c42\u3002 2\u3001\u6d4b\u8bd5\u4ee3\u7801\u53ef\u80fd\u5199\u5f97\u592a\u5927\u6216\u8005\u592a\u5c0f\uff0c\u4ee4\u5f00\u53d1\u4eba\u5458\u6548\u7387\u4e0b\u964d\u3002\u8fd9\u4e0e\u6d4b\u8bd5\u4ee3\u7801\u4e0e\u529f\u80fd\u5bf9\u5e94\u4e0d\u8d77\u6765\u6709\u5f88\u5927\u5173\u7cfb\u3002 \u4e8e\u662f\uff0c\u6709\u4e00\u4e9b\u4eba\u6269\u5c55\u4e86TDD\uff0c\u63d0\u51fa\u4e86BBD\u3002","title":"TDD \uff08Test-Driven Development)"},{"location":"2Development/Development-process/TDD%26BDD/#bdd#behaviour-driven#development","text":"\u4ed6\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u81ea\u7136\u8bed\u8a00\u6309\u7167\u4e00\u4e9b\u7b80\u5355\u8bed\u6cd5\u7ec4\u7ec7\u8d77\u6765\uff0c\u4ee3\u7801\u5c06\u4f1a\u975e\u5e38\u5bb9\u6613\u89e3\u91ca\u4e0e\u5904\u7406\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u975e\u6280\u672f\u4eba\u5458\u3001\u5ba2\u6237\u53ef\u4ee5\u53c2\u4e0e\u5230\u9700\u6c42\u7684\u786e\u8ba4\u4e0e\u9a8c\u6536\u5f53\u4e2d\u3002 \u6211\u4eec\u770b\u4e00\u4e0b\u4e24\u4e2a\u4f8b\u5b50 Scenario: Refunded items should be returned to stock Given a customer bought a black sweater from me and I have three black sweaters left in stock. When he returns the sweater for a refund then I should have four black sweaters in stock. \u573a\u666f\uff1a \u5fae\u4fe1\u804a\u5929 \u5047\u5982 \u624b\u673a\u5b89\u88c5\u4e86\u5fae\u4fe1 \u5f53 \u7528\u6237\u6253\u5f00\u5fae\u4fe1 \u90a3\u4e48 \u624b\u673a\u4f1a\u51fa\u73b0\u7528\u6237\u7684\u5fae\u4fe1\u804a\u5929\u754c\u9762 \u4ee5\u4e0a\u5c31\u662fBDD\u4f7f\u7528\u7684\u53eb\u505aGherkin\u7684\u8bed\u8a00\uff0c\u5b83\u7684\u7406\u5ff5\u662f\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u6765\u63cf\u8ff0\u529f\u80fd\uff0c\u800c\u4e14\u5f3a\u8c03\u7684\u662f\u4f7f\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\u9700\u6c42\u529f\u80fd\u3002\u662f\u4e0d\u662f\u8ddf\u654f\u6377\u5f00\u53d1\u4e2d\u7684\u7528\u6237\u6545\u4e8b(User Story)\u5f88\u50cf\uff1f\u55ef\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u4e00\u4e2a\u5988\u751f\u7684\u3002 \u5176\u5b9e\u53ea\u8981\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u654f\u6377\u5ba3\u8a00\uff0c\u5c31\u4f1a\u53d1\u73b0\uff0c\u903c\u5f1f\u5f1f\u5e72\u7684\u4e8b\u5c31\u662f\u89e3\u51b3\u4e2a\u4f53\u4e4b\u95f4\u4e92\u52a8\u4e0e\u5ba2\u6237\u534f\u4f5c\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002 NOTE: BDD\u53ef\u4ee5\u5b9e\u73b0\u654f\u6377\u5f00\u53d1 BDD\u7684\u9700\u6c42\u7814\u8ba8\u4f1a(Specification Workshops) \u90a3\u4e48\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u79cd\u8bed\u8a00\uff0c\u628a\u9700\u6c42\u4e00\u4e2a\u4e2a\u7528\u4f8b\u5b50\u5217\u51fa\u6765\uff0c\u5ba2\u6237/\u4ea7\u54c1\u3001\u5f00\u53d1\u3001\u6d4b\u8bd5\u4e09\u65b9\u4e00\u8d77\u8ba8\u8bba\u4e0e\u786e\u8ba4\u3002 NOTE: \u4e09\u65b9\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u534f\u4f5c\uff0c\u8fd9\u662fBDD\u7684\u4f18\u52bf BDD\u7684\u7531\u5916\u800c\u5185\u7684\u5f00\u53d1\u6a21\u5f0f(Outside-In Development) \u7136\u540e\uff0c\u5f00\u53d1\u4eba\u5458\u4f7f\u7528BDD\u5de5\u5177(JBehave, Cucumber, Behave)\u53bb\u8fd0\u884c\u3001\u5b9e\u73b0\u6d4b\u8bd5\u811a\u672c\u3002\u518d\u4e00\u70b9\u70b9\u7f16\u5199\u5b9e\u73b0\u529f\u80fd\u4ee3\u7801\uff0c\u8d70\u5230\u6240\u6709\u7684\u529f\u80fd\u90fd\u8fd0\u884c\u901a\u8fc7\u3002 \u7531\u4e8e\u5f00\u53d1\u7684\u8fc7\u7a0b\u662f\u4ece\u6700\u63a5\u8fd1\u7528\u6237\u7684UI\u754c\u9762\u5f00\u59cb\uff0c\u518d\u60f3\u5230\u5185\u90e8\u8bbe\u8ba1\uff0c\u56e0\u6b64\u5b83\u79f0\u4e3a\u7531\u5916\u800c\u5185\u7684\u5f00\u53d1\u6a21\u5f0f\u3002\u5982\u679c\u518d\u52a0\u4e0a\u7531\u5185\u800c\u5916\u7684\u8fc7\u7a0b\uff0c\u55ef\uff0c\u300a\u5f00\u53d1\u4eba\u5458\u7684\u81ea\u6211\u4fee\u517b\u300b\u5c31\u7b49\u7740\u4f60\u6765\u5199\u4e86\uff0c\u4f60\u53eb\u53f2\u5766\u5c3c\u65af\u62c9\u592b\u65af\u57fa\u5bf9\u5427\uff1f \u56de\u5230Gherkin\u8bed\u8a00\uff0c\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u5b83\u9700\u8981\u9075\u5faa\u4e00\u5b9a\u7684\u7b80\u5355\u8bed\u6cd5 Scenario(\u573a\u666f)\uff0c\u8bf4\u660e\u529f\u80fd\u7684\u4f8b\u5b50 Given(\u5047\u5982)\uff0c\u6784\u9020\u6d4b\u8bd5\u7684\u73af\u5883\u6761\u4ef6 When(\u5f53)\uff0c\u7ed9\u4e88\u7684\u8f93\u5165\uff0c\u53ef\u4ee5\u662f\u7528\u6237\uff0c\u4e5f\u53ef\u4ee5\u662f\u5916\u90e8\u7cfb\u7edf\uff0c\u4e5f\u53ef\u4ee5\u662f\u7cfb\u7edf\u672c\u8eab\u5b9a\u65f6/\u6761\u4ef6\u89e6\u53d1\u7684 Then(\u90a3\u4e48)\uff0c\u7cfb\u7edf\u7684\u8f93\u51fa\uff0c\u6216\u8005\u8bf4\u884c\u4e3a \u82e5\u5e72\u4e2aGiven,When,Then\u6784\u6210\u4e00\u4e2aScenario\uff0c\u82e5\u5e72\u4e2aScenario\u6784\u6210\u4e00\u4e2aFeature\uff0c\u82e5\u5e72\u4e2aFeature\u6700\u7ec8\u6784\u6210\u4e00\u4e2a\u7cfb\u7edf\u7684\u5b8c\u6574\u529f\u80fd\u9700\u6c42\u3002","title":"BDD\uff08 Behaviour-Driven Development)"},{"location":"2Development/Development-process/TDD%26BDD/#_2","text":"BDD\u7684\u6838\u5fc3\u4ef7\u503c\u662f\u4f53\u73b0\u5728\u6b63\u786e\u7684\u5bf9\u7cfb\u7edf\u884c\u4e3a\u8fdb\u884c\u8bbe\u8ba1\uff0c\u6240\u4ee5\u5b83\u5e76\u975e\u4e00\u79cd\u884c\u4e4b\u6709\u6548\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002\u5b83\u5f3a\u8c03\u7684\u662f\u7cfb\u7edf\u6700\u7ec8\u7684\u5b9e\u73b0\u4e0e\u7528\u6237\u671f\u671b\u7684\u884c\u4e3a\u662f\u4e00\u81f4\u7684\u3001\u9a8c\u8bc1\u4ee3\u7801\u5b9e\u73b0\u662f\u5426\u7b26\u5408\u8bbe\u8ba1\u76ee\u6807\u3002\u4f46\u662f\u5b83\u672c\u8eab\u5e76\u4e0d\u5f3a\u8c03\u5bf9\u7cfb\u7edf\u529f\u80fd\u3001\u6027\u80fd\u4ee5\u53ca\u8fb9\u754c\u503c\u7b49\u7684\u5065\u5168\u6027\u505a\u4fdd\u8bc1\uff0c\u65e0\u6cd5\u50cf\u5b8c\u6574\u7684\u6d4b\u8bd5\u4e00\u6837\u53d1\u73b0\u7cfb\u7edf\u7684\u5404\u79cd\u95ee\u9898\u3002\u4f46BDD\u5021\u5bfc\u7684\u7528\u7b80\u6d01\u7684\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u7cfb\u7edf\u884c\u4e3a\u7684\u7406\u5ff5\uff0c\u53ef\u4ee5\u660e\u786e\u7684\u6839\u636e\u8bbe\u8ba1\u4ea7\u751f\u6d4b\u8bd5\uff0c\u5e76\u4fdd\u969c\u6d4b\u8bd5\u7528\u4f8b\u7684\u8d28\u91cf\u3002 NOTE: BDD\u5f3a\u8c03\u7684\u548cTDD\u662f\u4e0d\u540c\u7684","title":"\u5218\u6587\u9f99\u7684\u56de\u7b54"},{"location":"2Development/Development-process/TDD%26BDD/BDD/","text":"Behavior-driven development(BDD) zhihu TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f NOTE: \u5176\u4e2d\u8fdb\u884c\u4e86\u975e\u5e38\u597d\u7684\u63a2\u8ba8 \u5218\u6587\u9f99\u7684\u56de\u7b54 BDD\u7684\u6838\u5fc3\u4ef7\u503c\u662f\u4f53\u73b0\u5728\u6b63\u786e\u7684\u5bf9\u7cfb\u7edf\u884c\u4e3a\u8fdb\u884c\u8bbe\u8ba1\uff0c\u6240\u4ee5\u5b83\u5e76\u975e\u4e00\u79cd\u884c\u4e4b\u6709\u6548\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002\u5b83\u5f3a\u8c03\u7684\u662f\u7cfb\u7edf\u6700\u7ec8\u7684\u5b9e\u73b0\u4e0e\u7528\u6237\u671f\u671b\u7684\u884c\u4e3a\u662f\u4e00\u81f4\u7684\u3001\u9a8c\u8bc1\u4ee3\u7801\u5b9e\u73b0\u662f\u5426\u7b26\u5408\u8bbe\u8ba1\u76ee\u6807\u3002\u4f46\u662f\u5b83\u672c\u8eab\u5e76\u4e0d\u5f3a\u8c03\u5bf9\u7cfb\u7edf\u529f\u80fd\u3001\u6027\u80fd\u4ee5\u53ca\u8fb9\u754c\u503c\u7b49\u7684\u5065\u5168\u6027\u505a\u4fdd\u8bc1\uff0c\u65e0\u6cd5\u50cf\u5b8c\u6574\u7684\u6d4b\u8bd5\u4e00\u6837\u53d1\u73b0\u7cfb\u7edf\u7684\u5404\u79cd\u95ee\u9898\u3002\u4f46BDD\u5021\u5bfc\u7684\u7528\u7b80\u6d01\u7684\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u7cfb\u7edf\u884c\u4e3a\u7684\u7406\u5ff5\uff0c\u53ef\u4ee5\u660e\u786e\u7684\u6839\u636e\u8bbe\u8ba1\u4ea7\u751f\u6d4b\u8bd5\uff0c\u5e76\u4fdd\u969c\u6d4b\u8bd5\u7528\u4f8b\u7684\u8d28\u91cf\u3002 \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54 NOTE: \u8fd9\u4e2a\u56de\u7b54\u975e\u5e38\u597d\uff0c\u57fa\u672c\u4e0a\u5c06\u6e05\u9664\u4e86BDD\uff0c\u5e76\u4e14\u7ed3\u5408\u975e\u5e38\u597d\u7684\u4f8b\u5b50\uff0c\u5df2\u7ecf\u6536\u5f55\u4e86\u3002 wanweibaike Behavior-driven development In software engineering , behavior-driven development ( BDD ) is an agile software development process that encourages collaboration among developers, quality assurance testers, and customer representatives in a software project. NOTE: \u4e00\u3001 developers , quality assurance testers , customer representatives \u4e09\u8005\u4e00\u540c\u8fdb\u884c\u534f\u4f5c It encourages teams to use conversation and concrete examples to formalize a shared understanding of how the application should behave.[ 4] NOTE: \u4e00\u3001\u573a\u666f\u5316 It emerged from test-driven development (TDD). Behavior-driven development combines the general techniques and principles of TDD with ideas from domain-driven design and object-oriented analysis and design to provide software development and management teams with shared tools and a shared process to collaborate on software development. NOTE: \u4e00\u3001\u6e90\u81eaTDD\uff0c\u5f25\u8865\u5176\u4e0d\u8db3 \u4e8c\u3001\u901a\u8fc7\u4e0a\u9762\u518d\u6b21\u5f3a\u8c03\u4e86\" developers , quality assurance testers , customer representatives \u4e09\u8005\u4e00\u540c\u8fdb\u884c\u534f\u4f5c\"\uff0c\u5176\u5b9e\u8fd9\u5b9e\u73b0\u4e86\u654f\u6377\u5f00\u53d1\u7684\u76ee\u7684\uff0c\u6b63\u5982 zhihu TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f # \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54 \u4e2d\u6240\u8ff0: Scenario: Refunded items should be returned to stock Given a customer bought a black sweater from me and I have three black sweaters left in stock. When he returns the sweater for a refund then I should have four black sweaters in stock. \u573a\u666f\uff1a \u5fae\u4fe1\u804a\u5929 \u5047\u5982 \u624b\u673a\u5b89\u88c5\u4e86\u5fae\u4fe1 \u5f53 \u7528\u6237\u6253\u5f00\u5fae\u4fe1 \u90a3\u4e48 \u624b\u673a\u4f1a\u51fa\u73b0\u7528\u6237\u7684\u5fae\u4fe1\u804a\u5929\u754c\u9762 \u4ee5\u4e0a\u5c31\u662fBDD\u4f7f\u7528\u7684\u53eb\u505aGherkin\u7684\u8bed\u8a00\uff0c\u5b83\u7684\u7406\u5ff5\u662f\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u6765\u63cf\u8ff0\u529f\u80fd\uff0c\u800c\u4e14\u5f3a\u8c03\u7684\u662f\u4f7f\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\u9700\u6c42\u529f\u80fd\u3002\u662f\u4e0d\u662f\u8ddf\u654f\u6377\u5f00\u53d1\u4e2d\u7684\u7528\u6237\u6545\u4e8b(User Story)\u5f88\u50cf\uff1f\u55ef\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u4e00\u4e2a\u5988\u751f\u7684\u3002 \u5176\u5b9e\u53ea\u8981\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u654f\u6377\u5ba3\u8a00\uff0c\u5c31\u4f1a\u53d1\u73b0\uff0c\u903c\u5f1f\u5f1f\u5e72\u7684\u4e8b\u5c31\u662f\u89e3\u51b3\u4e2a\u4f53\u4e4b\u95f4\u4e92\u52a8\u4e0e\u5ba2\u6237\u534f\u4f5c\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002 software Cucumber \u8fd9\u4e2a\u8f6f\u4ef6\u5c06BDD\u4ece\u7406\u8bba\u5e26\u5165\u4e86\u5de5\u7a0b\u5b9e\u8df5\u4e2d\u3002","title":"Introduction"},{"location":"2Development/Development-process/TDD%26BDD/BDD/#behavior-driven#developmentbdd","text":"","title":"Behavior-driven development(BDD)"},{"location":"2Development/Development-process/TDD%26BDD/BDD/#zhihu#tdd#bdd","text":"NOTE: \u5176\u4e2d\u8fdb\u884c\u4e86\u975e\u5e38\u597d\u7684\u63a2\u8ba8","title":"zhihu TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f"},{"location":"2Development/Development-process/TDD%26BDD/BDD/#_1","text":"BDD\u7684\u6838\u5fc3\u4ef7\u503c\u662f\u4f53\u73b0\u5728\u6b63\u786e\u7684\u5bf9\u7cfb\u7edf\u884c\u4e3a\u8fdb\u884c\u8bbe\u8ba1\uff0c\u6240\u4ee5\u5b83\u5e76\u975e\u4e00\u79cd\u884c\u4e4b\u6709\u6548\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002\u5b83\u5f3a\u8c03\u7684\u662f\u7cfb\u7edf\u6700\u7ec8\u7684\u5b9e\u73b0\u4e0e\u7528\u6237\u671f\u671b\u7684\u884c\u4e3a\u662f\u4e00\u81f4\u7684\u3001\u9a8c\u8bc1\u4ee3\u7801\u5b9e\u73b0\u662f\u5426\u7b26\u5408\u8bbe\u8ba1\u76ee\u6807\u3002\u4f46\u662f\u5b83\u672c\u8eab\u5e76\u4e0d\u5f3a\u8c03\u5bf9\u7cfb\u7edf\u529f\u80fd\u3001\u6027\u80fd\u4ee5\u53ca\u8fb9\u754c\u503c\u7b49\u7684\u5065\u5168\u6027\u505a\u4fdd\u8bc1\uff0c\u65e0\u6cd5\u50cf\u5b8c\u6574\u7684\u6d4b\u8bd5\u4e00\u6837\u53d1\u73b0\u7cfb\u7edf\u7684\u5404\u79cd\u95ee\u9898\u3002\u4f46BDD\u5021\u5bfc\u7684\u7528\u7b80\u6d01\u7684\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u7cfb\u7edf\u884c\u4e3a\u7684\u7406\u5ff5\uff0c\u53ef\u4ee5\u660e\u786e\u7684\u6839\u636e\u8bbe\u8ba1\u4ea7\u751f\u6d4b\u8bd5\uff0c\u5e76\u4fdd\u969c\u6d4b\u8bd5\u7528\u4f8b\u7684\u8d28\u91cf\u3002","title":"\u5218\u6587\u9f99\u7684\u56de\u7b54"},{"location":"2Development/Development-process/TDD%26BDD/BDD/#_2","text":"NOTE: \u8fd9\u4e2a\u56de\u7b54\u975e\u5e38\u597d\uff0c\u57fa\u672c\u4e0a\u5c06\u6e05\u9664\u4e86BDD\uff0c\u5e76\u4e14\u7ed3\u5408\u975e\u5e38\u597d\u7684\u4f8b\u5b50\uff0c\u5df2\u7ecf\u6536\u5f55\u4e86\u3002","title":"\u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54"},{"location":"2Development/Development-process/TDD%26BDD/BDD/#wanweibaike#behavior-driven#development","text":"In software engineering , behavior-driven development ( BDD ) is an agile software development process that encourages collaboration among developers, quality assurance testers, and customer representatives in a software project. NOTE: \u4e00\u3001 developers , quality assurance testers , customer representatives \u4e09\u8005\u4e00\u540c\u8fdb\u884c\u534f\u4f5c It encourages teams to use conversation and concrete examples to formalize a shared understanding of how the application should behave.[ 4] NOTE: \u4e00\u3001\u573a\u666f\u5316 It emerged from test-driven development (TDD). Behavior-driven development combines the general techniques and principles of TDD with ideas from domain-driven design and object-oriented analysis and design to provide software development and management teams with shared tools and a shared process to collaborate on software development. NOTE: \u4e00\u3001\u6e90\u81eaTDD\uff0c\u5f25\u8865\u5176\u4e0d\u8db3 \u4e8c\u3001\u901a\u8fc7\u4e0a\u9762\u518d\u6b21\u5f3a\u8c03\u4e86\" developers , quality assurance testers , customer representatives \u4e09\u8005\u4e00\u540c\u8fdb\u884c\u534f\u4f5c\"\uff0c\u5176\u5b9e\u8fd9\u5b9e\u73b0\u4e86\u654f\u6377\u5f00\u53d1\u7684\u76ee\u7684\uff0c\u6b63\u5982 zhihu TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f # \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54 \u4e2d\u6240\u8ff0: Scenario: Refunded items should be returned to stock Given a customer bought a black sweater from me and I have three black sweaters left in stock. When he returns the sweater for a refund then I should have four black sweaters in stock. \u573a\u666f\uff1a \u5fae\u4fe1\u804a\u5929 \u5047\u5982 \u624b\u673a\u5b89\u88c5\u4e86\u5fae\u4fe1 \u5f53 \u7528\u6237\u6253\u5f00\u5fae\u4fe1 \u90a3\u4e48 \u624b\u673a\u4f1a\u51fa\u73b0\u7528\u6237\u7684\u5fae\u4fe1\u804a\u5929\u754c\u9762 \u4ee5\u4e0a\u5c31\u662fBDD\u4f7f\u7528\u7684\u53eb\u505aGherkin\u7684\u8bed\u8a00\uff0c\u5b83\u7684\u7406\u5ff5\u662f\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u6765\u63cf\u8ff0\u529f\u80fd\uff0c\u800c\u4e14\u5f3a\u8c03\u7684\u662f\u4f7f\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\u9700\u6c42\u529f\u80fd\u3002\u662f\u4e0d\u662f\u8ddf\u654f\u6377\u5f00\u53d1\u4e2d\u7684\u7528\u6237\u6545\u4e8b(User Story)\u5f88\u50cf\uff1f\u55ef\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u4e00\u4e2a\u5988\u751f\u7684\u3002 \u5176\u5b9e\u53ea\u8981\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u654f\u6377\u5ba3\u8a00\uff0c\u5c31\u4f1a\u53d1\u73b0\uff0c\u903c\u5f1f\u5f1f\u5e72\u7684\u4e8b\u5c31\u662f\u89e3\u51b3\u4e2a\u4f53\u4e4b\u95f4\u4e92\u52a8\u4e0e\u5ba2\u6237\u534f\u4f5c\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002","title":"wanweibaike Behavior-driven development"},{"location":"2Development/Development-process/TDD%26BDD/BDD/#software#cucumber","text":"\u8fd9\u4e2a\u8f6f\u4ef6\u5c06BDD\u4ece\u7406\u8bba\u5e26\u5165\u4e86\u5de5\u7a0b\u5b9e\u8df5\u4e2d\u3002","title":"software Cucumber"},{"location":"2Development/Development-process/TDD%26BDD/BDD/software-Cucumber/","text":"Cucumber \u4e00\u3001\u8fd9\u4e2a\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u8bf4\u5b9a\u4e49\u4e86BDD\uff0c\u4f7fBDD\u4ece\u7406\u8bba\u8d70\u5411\u4e86\u5de5\u7a0b\u9886\u57df\uff1b \u4e8c\u3001\u5b83\u8fd8\u53d1\u660e\u4e86Gherkin language \u5b98\u7f51 cucumber Boost your engineering team's performance by employing Behavior-Driven Development (BDD). wanweibaike Cucumber (software) Cucumber is a software tool that supports behavior-driven development (BDD).[ 7] [ 8] [ 9] [ 10] Central to the Cucumber BDD approach is its ordinary language parser called Gherkin . It allows expected software behaviors to be specified in a logical language that customers can understand. As such, Cucumber allows the execution of feature documentation written in business-facing text.[ 11] [ 7] [ 8] It is often used for testing other software.[ 12] It runs automated acceptance tests written in a behavior-driven development (BDD) style.[ 13]","title":"Introduction"},{"location":"2Development/Development-process/TDD%26BDD/BDD/software-Cucumber/#cucumber","text":"\u4e00\u3001\u8fd9\u4e2a\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u8bf4\u5b9a\u4e49\u4e86BDD\uff0c\u4f7fBDD\u4ece\u7406\u8bba\u8d70\u5411\u4e86\u5de5\u7a0b\u9886\u57df\uff1b \u4e8c\u3001\u5b83\u8fd8\u53d1\u660e\u4e86Gherkin language","title":"Cucumber"},{"location":"2Development/Development-process/TDD%26BDD/BDD/software-Cucumber/#cucumber_1","text":"Boost your engineering team's performance by employing Behavior-Driven Development (BDD).","title":"\u5b98\u7f51 cucumber"},{"location":"2Development/Development-process/TDD%26BDD/BDD/software-Cucumber/#wanweibaike#cucumber#software","text":"Cucumber is a software tool that supports behavior-driven development (BDD).[ 7] [ 8] [ 9] [ 10] Central to the Cucumber BDD approach is its ordinary language parser called Gherkin . It allows expected software behaviors to be specified in a logical language that customers can understand. As such, Cucumber allows the execution of feature documentation written in business-facing text.[ 11] [ 7] [ 8] It is often used for testing other software.[ 12] It runs automated acceptance tests written in a behavior-driven development (BDD) style.[ 13]","title":"wanweibaike Cucumber (software)"},{"location":"2Development/Development-process/TDD%26BDD/BDD/software-Cucumber/Gherkin/","text":"Gherkin language wanweibaike Cucumber (software) # Gherkin language cucumber # Gherkin Syntax Feature: Guess the word # The first example has two steps Scenario: Maker starts a game When the Maker starts a game Then the Maker waits for a Breaker to join # The second example has three steps Scenario: Breaker joins a game Given the Maker has started a game with the word \" silky \" When the Breaker joins the Maker's game Then the Breaker must guess a word with 5 characters","title":"Introduction"},{"location":"2Development/Development-process/TDD%26BDD/BDD/software-Cucumber/Gherkin/#gherkin#language","text":"","title":"Gherkin language"},{"location":"2Development/Development-process/TDD%26BDD/BDD/software-Cucumber/Gherkin/#wanweibaike#cucumber#software#gherkin#language","text":"","title":"wanweibaike Cucumber (software) # Gherkin language"},{"location":"2Development/Development-process/TDD%26BDD/BDD/software-Cucumber/Gherkin/#cucumber#gherkin#syntax","text":"Feature: Guess the word # The first example has two steps Scenario: Maker starts a game When the Maker starts a game Then the Maker waits for a Breaker to join # The second example has three steps Scenario: Breaker joins a game Given the Maker has started a game with the word \" silky \" When the Breaker joins the Maker's game Then the Breaker must guess a word with 5 characters","title":"cucumber # Gherkin Syntax"},{"location":"2Development/Development-process/TDD%26BDD/TDD/","text":"Test-driven development wikipedia Test-driven development Test-driven development ( TDD ) is a software development process relying on software requirements being converted to test cases before software is fully developed, and tracking all software development by repeatedly testing the software against all test cases. This is opposed to software being developed first and test cases created later. baike TDD\uff08\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(Test-Driven Development)\uff09# TDD\u539f\u5219 1\u3001\u72ec\u7acb\u6d4b\u8bd5\uff1a \u4e0d\u540c\u4ee3\u7801\u7684\u6d4b\u8bd5\u5e94\u8be5\u76f8\u4e92\u72ec\u7acb\uff0c\u4e00\u4e2a\u7c7b\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u7c7b\uff08\u5bf9\u4e8eC\u4ee3\u7801\u6216C++\u5168\u5c40\u51fd\u6570\uff0c\u5219\u4e00\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff09\uff0c\u4e00\u4e2a\u51fd\u6570\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\u3002 \u7528\u4f8b\u4e5f\u5e94\u5404\u81ea\u72ec\u7acb\uff0c\u6bcf\u4e2a\u7528\u4f8b\u4e0d\u80fd\u4f7f\u7528\u5176\u4ed6\u7528\u4f8b\u7684\u7ed3\u679c\u6570\u636e\uff0c\u7ed3\u679c\u4e5f\u4e0d\u80fd\u4f9d\u8d56\u4e8e\u7528\u4f8b\u6267\u884c\u987a\u5e8f\u3002 \u4e00\u4e2a\u89d2\u8272\uff1a\u5f00\u53d1\u8fc7\u7a0b\u5305\u542b\u591a\u79cd\u5de5\u4f5c\uff0c\u5982\uff1a\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u3001\u7f16\u5199\u4ea7\u54c1\u4ee3\u7801\u3001\u4ee3\u7801\u91cd\u6784\u7b49\u3002\u505a\u4e0d\u540c\u7684\u5de5\u4f5c\u65f6\uff0c\u5e94\u4e13\u6ce8\u4e8e\u5f53\u524d\u7684\u89d2\u8272\uff0c\u4e0d\u8981\u8fc7\u591a\u8003\u8651\u5176\u4ed6\u65b9\u9762\u7684\u7ec6\u8282\u3002 \u4e0d\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u8bdd\u7684\u542b\u4e49 2\u3001\u6d4b\u8bd5\u5217\u8868\uff1a \u4ee3\u7801\u7684\u529f\u80fd\u70b9\u53ef\u80fd\u5f88\u591a\uff0c\u5e76\u4e14\u9700\u6c42\u53ef\u80fd\u662f\u9646\u7eed\u51fa\u73b0\u7684\uff0c\u4efb\u4f55\u9636\u6bb5\u60f3\u6dfb\u52a0\u529f\u80fd\u65f6\uff0c\u5e94\u628a\u76f8\u5173\u529f\u80fd\u70b9\u52a0\u5230\u6d4b\u8bd5\u5217\u8868\u4e2d\uff0c\u7136\u540e\u624d\u80fd\u7ee7\u7eed\u624b\u5934\u5de5\u4f5c\uff0c\u907f\u514d\u758f\u6f0f\u3002 3\u3001\u6d4b\u8bd5\u9a71\u52a8\uff1a \u5373\u5229\u7528\u6d4b\u8bd5\u6765\u9a71\u52a8\u5f00\u53d1\uff0c\u662fTDD\u7684\u6838\u5fc3\u3002\u8981\u5b9e\u73b0\u67d0\u4e2a\u529f\u80fd\uff0c\u8981\u7f16\u5199\u67d0\u4e2a\u7c7b\u6216\u67d0\u4e2a\u51fd\u6570\uff0c\u5e94\u9996\u5148\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\uff0c\u660e\u786e\u8fd9\u4e2a\u7c7b\u3001\u8fd9\u4e2a \u51fd\u6570 \u5982\u4f55\u4f7f\u7528\uff0c\u5982\u4f55\u6d4b\u8bd5\uff0c\u7136\u540e\u5728\u5bf9\u5176\u8fdb\u884c\u8bbe\u8ba1\u3001\u7f16\u7801\u3002 4\u3001\u5148\u5199\u65ad\u8a00\uff1a \u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u65f6\uff0c\u5e94\u8be5\u9996\u5148\u7f16\u5199\u5224\u65ad\u4ee3\u7801\u529f\u80fd\u7684\u65ad\u8a00\u8bed\u53e5\uff0c\u7136\u540e\u7f16\u5199\u5fc5\u8981\u7684\u8f85\u52a9\u8bed\u53e5\u3002 5\u3001\u53ef\u6d4b\u8bd5\u6027\uff1a \u4ea7\u54c1\u4ee3\u7801\u8bbe\u8ba1\u3001\u5f00\u53d1\u65f6\u7684\u5e94\u5c3d\u53ef\u80fd\u63d0\u9ad8\u53ef\u6d4b\u8bd5\u6027\u3002\u6bcf\u4e2a\u4ee3\u7801\u5355\u5143\u7684\u529f\u80fd\u5e94\u8be5\u6bd4\u8f83\u5355\u7eaf\uff0c\u201c\u5404\u5bb6\u81ea\u626b\u95e8\u524d\u96ea\u201d\uff0c\u6bcf\u4e2a\u7c7b\u3001\u6bcf\u4e2a\u51fd\u6570\u5e94\u8be5\u53ea\u505a\u5b83\u8be5\u505a\u7684\u4e8b\uff0c\u4e0d\u8981\u5f04\u6210\u5927\u6742\u70e9( single responsibility principle )\u3002\u5c24\u5176\u662f\u589e\u52a0\u65b0\u529f\u80fd\u65f6\uff0c\u4e0d\u8981\u4e3a\u4e86\u56fe\u4e00\u65f6\u4e4b\u4fbf\uff0c\u968f\u4fbf\u5728\u539f\u6709\u4ee3\u7801\u4e2d\u6dfb\u52a0\u529f\u80fd\uff0c\u5bf9\u4e8eC++\u7f16\u7a0b\uff0c\u5e94\u591a\u8003\u8651\u4f7f\u7528\u5b50\u7c7b\u3001\u7ee7\u627f\u3001\u91cd\u8f7d\u7b49OO\u65b9\u6cd5( \u5c01\u88c5 )\u3002 NOTE: \u8fd9\u6bb5\u603b\u7ed3\u5730\u4e0d\u9519 6\u3001\u53ca\u65f6\u91cd\u6784\uff1a \u5bf9\u7ed3\u6784\u4e0d\u5408\u7406\uff0c\u91cd\u590d\u7b49\u201c\u5473\u9053\u201d\u4e0d\u597d\u7684\u4ee3\u7801\uff0c\u5728\u6d4b\u8bd5\u901a\u8fc7\u540e\uff0c\u5e94\u53ca\u65f6\u8fdb\u884c\u91cd\u6784\u3002 7\u3001\u5c0f\u6b65\u524d\u8fdb\uff1a \u8f6f\u4ef6\u5f00\u53d1\u662f\u590d\u6742\u6027\u975e\u5e38\u9ad8\u7684\u5de5\u4f5c\uff0c\u5c0f\u6b65\u524d\u8fdb\u662f\u964d\u4f4e\u590d\u6742\u6027\u7684\u597d\u529e\u6cd5\u3002 \u77e5\u4e4e TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f - \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54 \u8fd9\u5bf9\u4e8e**\u5355\u5143\u6d4b\u8bd5**\u4e0e\u5f00\u53d1\u662f\u5f88\u6709\u7528\u7684\u4e00\u79cd\u5b9e\u8df5\u3002\u56e0\u4e3aTDD\u662f\u8981\u6c42\u5728\u5199\u4ee3\u7801\u4e4b\u524d\u5c31\u8981\u60f3\u597d\u600e\u4e48\u6d4b\uff0c\u6d4b\u4ec0\u4e48\uff0c\u8fd9\u89e3\u51b3\u4e86**\u53ef\u6d4b\u6027**\u4f4e\u7684\u95ee\u9898\u3002\u53e6\u5916\uff0cTDD\u8fd8\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684**\u6d4b\u8bd5\u8986\u76d6\u7387**\uff0c\u4ee4bug\u5728**\u7f16\u7801\u9636\u6bb5**\u5c31\u80fd\u88ab\u53d1\u73b0\u3002\u51cf\u5c11\u4e0a\u7ebf\u540e\u53d1\u73b0\u95ee\u9898\uff0c\u4fee\u590d\u95ee\u9898\u7684\u6307\u6570\u7ea7\u589e\u957f\u6210\u672c\u3002 NOTE: \u975e\u5e38\u597d\u7684\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u4f7f\u7528TDD\u3002","title":"Introduction"},{"location":"2Development/Development-process/TDD%26BDD/TDD/#test-driven#development","text":"","title":"Test-driven development"},{"location":"2Development/Development-process/TDD%26BDD/TDD/#wikipedia#test-driven#development","text":"Test-driven development ( TDD ) is a software development process relying on software requirements being converted to test cases before software is fully developed, and tracking all software development by repeatedly testing the software against all test cases. This is opposed to software being developed first and test cases created later.","title":"wikipedia Test-driven development"},{"location":"2Development/Development-process/TDD%26BDD/TDD/#baike#tddtest-driven#development#tdd","text":"1\u3001\u72ec\u7acb\u6d4b\u8bd5\uff1a \u4e0d\u540c\u4ee3\u7801\u7684\u6d4b\u8bd5\u5e94\u8be5\u76f8\u4e92\u72ec\u7acb\uff0c\u4e00\u4e2a\u7c7b\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u7c7b\uff08\u5bf9\u4e8eC\u4ee3\u7801\u6216C++\u5168\u5c40\u51fd\u6570\uff0c\u5219\u4e00\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff09\uff0c\u4e00\u4e2a\u51fd\u6570\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\u3002 \u7528\u4f8b\u4e5f\u5e94\u5404\u81ea\u72ec\u7acb\uff0c\u6bcf\u4e2a\u7528\u4f8b\u4e0d\u80fd\u4f7f\u7528\u5176\u4ed6\u7528\u4f8b\u7684\u7ed3\u679c\u6570\u636e\uff0c\u7ed3\u679c\u4e5f\u4e0d\u80fd\u4f9d\u8d56\u4e8e\u7528\u4f8b\u6267\u884c\u987a\u5e8f\u3002 \u4e00\u4e2a\u89d2\u8272\uff1a\u5f00\u53d1\u8fc7\u7a0b\u5305\u542b\u591a\u79cd\u5de5\u4f5c\uff0c\u5982\uff1a\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u3001\u7f16\u5199\u4ea7\u54c1\u4ee3\u7801\u3001\u4ee3\u7801\u91cd\u6784\u7b49\u3002\u505a\u4e0d\u540c\u7684\u5de5\u4f5c\u65f6\uff0c\u5e94\u4e13\u6ce8\u4e8e\u5f53\u524d\u7684\u89d2\u8272\uff0c\u4e0d\u8981\u8fc7\u591a\u8003\u8651\u5176\u4ed6\u65b9\u9762\u7684\u7ec6\u8282\u3002 \u4e0d\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u8bdd\u7684\u542b\u4e49 2\u3001\u6d4b\u8bd5\u5217\u8868\uff1a \u4ee3\u7801\u7684\u529f\u80fd\u70b9\u53ef\u80fd\u5f88\u591a\uff0c\u5e76\u4e14\u9700\u6c42\u53ef\u80fd\u662f\u9646\u7eed\u51fa\u73b0\u7684\uff0c\u4efb\u4f55\u9636\u6bb5\u60f3\u6dfb\u52a0\u529f\u80fd\u65f6\uff0c\u5e94\u628a\u76f8\u5173\u529f\u80fd\u70b9\u52a0\u5230\u6d4b\u8bd5\u5217\u8868\u4e2d\uff0c\u7136\u540e\u624d\u80fd\u7ee7\u7eed\u624b\u5934\u5de5\u4f5c\uff0c\u907f\u514d\u758f\u6f0f\u3002 3\u3001\u6d4b\u8bd5\u9a71\u52a8\uff1a \u5373\u5229\u7528\u6d4b\u8bd5\u6765\u9a71\u52a8\u5f00\u53d1\uff0c\u662fTDD\u7684\u6838\u5fc3\u3002\u8981\u5b9e\u73b0\u67d0\u4e2a\u529f\u80fd\uff0c\u8981\u7f16\u5199\u67d0\u4e2a\u7c7b\u6216\u67d0\u4e2a\u51fd\u6570\uff0c\u5e94\u9996\u5148\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\uff0c\u660e\u786e\u8fd9\u4e2a\u7c7b\u3001\u8fd9\u4e2a \u51fd\u6570 \u5982\u4f55\u4f7f\u7528\uff0c\u5982\u4f55\u6d4b\u8bd5\uff0c\u7136\u540e\u5728\u5bf9\u5176\u8fdb\u884c\u8bbe\u8ba1\u3001\u7f16\u7801\u3002 4\u3001\u5148\u5199\u65ad\u8a00\uff1a \u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u65f6\uff0c\u5e94\u8be5\u9996\u5148\u7f16\u5199\u5224\u65ad\u4ee3\u7801\u529f\u80fd\u7684\u65ad\u8a00\u8bed\u53e5\uff0c\u7136\u540e\u7f16\u5199\u5fc5\u8981\u7684\u8f85\u52a9\u8bed\u53e5\u3002 5\u3001\u53ef\u6d4b\u8bd5\u6027\uff1a \u4ea7\u54c1\u4ee3\u7801\u8bbe\u8ba1\u3001\u5f00\u53d1\u65f6\u7684\u5e94\u5c3d\u53ef\u80fd\u63d0\u9ad8\u53ef\u6d4b\u8bd5\u6027\u3002\u6bcf\u4e2a\u4ee3\u7801\u5355\u5143\u7684\u529f\u80fd\u5e94\u8be5\u6bd4\u8f83\u5355\u7eaf\uff0c\u201c\u5404\u5bb6\u81ea\u626b\u95e8\u524d\u96ea\u201d\uff0c\u6bcf\u4e2a\u7c7b\u3001\u6bcf\u4e2a\u51fd\u6570\u5e94\u8be5\u53ea\u505a\u5b83\u8be5\u505a\u7684\u4e8b\uff0c\u4e0d\u8981\u5f04\u6210\u5927\u6742\u70e9( single responsibility principle )\u3002\u5c24\u5176\u662f\u589e\u52a0\u65b0\u529f\u80fd\u65f6\uff0c\u4e0d\u8981\u4e3a\u4e86\u56fe\u4e00\u65f6\u4e4b\u4fbf\uff0c\u968f\u4fbf\u5728\u539f\u6709\u4ee3\u7801\u4e2d\u6dfb\u52a0\u529f\u80fd\uff0c\u5bf9\u4e8eC++\u7f16\u7a0b\uff0c\u5e94\u591a\u8003\u8651\u4f7f\u7528\u5b50\u7c7b\u3001\u7ee7\u627f\u3001\u91cd\u8f7d\u7b49OO\u65b9\u6cd5( \u5c01\u88c5 )\u3002 NOTE: \u8fd9\u6bb5\u603b\u7ed3\u5730\u4e0d\u9519 6\u3001\u53ca\u65f6\u91cd\u6784\uff1a \u5bf9\u7ed3\u6784\u4e0d\u5408\u7406\uff0c\u91cd\u590d\u7b49\u201c\u5473\u9053\u201d\u4e0d\u597d\u7684\u4ee3\u7801\uff0c\u5728\u6d4b\u8bd5\u901a\u8fc7\u540e\uff0c\u5e94\u53ca\u65f6\u8fdb\u884c\u91cd\u6784\u3002 7\u3001\u5c0f\u6b65\u524d\u8fdb\uff1a \u8f6f\u4ef6\u5f00\u53d1\u662f\u590d\u6742\u6027\u975e\u5e38\u9ad8\u7684\u5de5\u4f5c\uff0c\u5c0f\u6b65\u524d\u8fdb\u662f\u964d\u4f4e\u590d\u6742\u6027\u7684\u597d\u529e\u6cd5\u3002","title":"baike TDD\uff08\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(Test-Driven Development)\uff09# TDD\u539f\u5219"},{"location":"2Development/Development-process/TDD%26BDD/TDD/#tdd#bdd#-","text":"\u8fd9\u5bf9\u4e8e**\u5355\u5143\u6d4b\u8bd5**\u4e0e\u5f00\u53d1\u662f\u5f88\u6709\u7528\u7684\u4e00\u79cd\u5b9e\u8df5\u3002\u56e0\u4e3aTDD\u662f\u8981\u6c42\u5728\u5199\u4ee3\u7801\u4e4b\u524d\u5c31\u8981\u60f3\u597d\u600e\u4e48\u6d4b\uff0c\u6d4b\u4ec0\u4e48\uff0c\u8fd9\u89e3\u51b3\u4e86**\u53ef\u6d4b\u6027**\u4f4e\u7684\u95ee\u9898\u3002\u53e6\u5916\uff0cTDD\u8fd8\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684**\u6d4b\u8bd5\u8986\u76d6\u7387**\uff0c\u4ee4bug\u5728**\u7f16\u7801\u9636\u6bb5**\u5c31\u80fd\u88ab\u53d1\u73b0\u3002\u51cf\u5c11\u4e0a\u7ebf\u540e\u53d1\u73b0\u95ee\u9898\uff0c\u4fee\u590d\u95ee\u9898\u7684\u6307\u6570\u7ea7\u589e\u957f\u6210\u672c\u3002 NOTE: \u975e\u5e38\u597d\u7684\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u4f7f\u7528TDD\u3002","title":"\u77e5\u4e4e TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f - \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54"},{"location":"2Development/QA/","text":"wikipedia Software quality assurance Software quality assurance ( SQA ) consists of a means of monitoring the software engineering processes and methods used to ensure quality. NOTE: 1\u3001\u4fdd\u8bc1software quality SQA encompasses(\u5305\u542b) the entire software development process, which includes processes such as requirements definition, software design , coding , source code control , code reviews , software configuration management , testing , release management , and product integration. SQA is organized into goals, commitments, abilities, activities, measurements, and verifications softwaretestinghelp What Is Software Quality Assurance (SQA): A Guide For Beginners NOTE: 1\u3001\u89e3\u91ca\u5f97\u8f83\u597d wikipedia Code review","title":"Introduction"},{"location":"2Development/QA/#wikipedia#software#quality#assurance","text":"Software quality assurance ( SQA ) consists of a means of monitoring the software engineering processes and methods used to ensure quality. NOTE: 1\u3001\u4fdd\u8bc1software quality SQA encompasses(\u5305\u542b) the entire software development process, which includes processes such as requirements definition, software design , coding , source code control , code reviews , software configuration management , testing , release management , and product integration. SQA is organized into goals, commitments, abilities, activities, measurements, and verifications","title":"wikipedia Software quality assurance"},{"location":"2Development/QA/#softwaretestinghelp#what#is#software#quality#assurance#sqa#a#guide#for#beginners","text":"NOTE: 1\u3001\u89e3\u91ca\u5f97\u8f83\u597d","title":"softwaretestinghelp What Is Software Quality Assurance (SQA): A Guide For Beginners"},{"location":"2Development/QA/#wikipedia#code#review","text":"","title":"wikipedia Code review"},{"location":"2Development/Software-build/","text":"wikipedia Software build In the field of software development , build has often referred either to the process of converting source code files into standalone software artifact(s) that can be run on a computer, or the result of doing so. Functions Building software is an end-to-end process that involves many distinct functions. Some of these functions are described below. Version control The version control function carries out activities such as workspace creation and updating, baselining and reporting. It creates an environment for the build process to run in and captures metadata about the inputs and outputs of the build process to ensure repeatability and reliability. Tools such as Git , AccuRev or StarTeam help with these tasks by offering tools to tag specific points in history as being important, and more. Code quality Also known as static program analysis/static code analysis this function is responsible for checking developers have adhered to the seven axes of code quality: comments, unit tests, duplication, complexity, coding rules, potential bugs and architecture & design. Ensuring a project has high-quality code results in fewer bugs and influences nonfunctional requirements such as maintainability, extensibility and readability, which have a direct impact on the ROI for a business. Compilation This is only a small feature of managing the build process. The compilation function turns source files into directly executable or intermediate objects. Not every project will require this function. While for simple programs the process consists of a single file being compiled , for complex software the source code may consist of many files and may be combined in different ways to produce many different versions. Build tools The process of building a computer program is usually managed by a build tool , a program that coordinates and controls other programs. Examples of such a program are make , Gradle , Meister by OpenMake Software , Ant , Maven , Rake , SCons and Phing . The build utility typically needs to compile the various files, in the correct order. If the source code in a particular file has not changed then it may not need to be recompiled (may not rather than need not because it may itself depend on other files that have changed). Sophisticated build utilities and linkers attempt to refrain from recompiling code that does not need it, to shorten the time required to complete the build. A more complex process may involve other programs producing code or data as part of the build process. wikipedia Build automation","title":"Introduction"},{"location":"2Development/Software-build/#wikipedia#software#build","text":"In the field of software development , build has often referred either to the process of converting source code files into standalone software artifact(s) that can be run on a computer, or the result of doing so.","title":"wikipedia Software build"},{"location":"2Development/Software-build/#functions","text":"Building software is an end-to-end process that involves many distinct functions. Some of these functions are described below.","title":"Functions"},{"location":"2Development/Software-build/#version#control","text":"The version control function carries out activities such as workspace creation and updating, baselining and reporting. It creates an environment for the build process to run in and captures metadata about the inputs and outputs of the build process to ensure repeatability and reliability. Tools such as Git , AccuRev or StarTeam help with these tasks by offering tools to tag specific points in history as being important, and more.","title":"Version control"},{"location":"2Development/Software-build/#code#quality","text":"Also known as static program analysis/static code analysis this function is responsible for checking developers have adhered to the seven axes of code quality: comments, unit tests, duplication, complexity, coding rules, potential bugs and architecture & design. Ensuring a project has high-quality code results in fewer bugs and influences nonfunctional requirements such as maintainability, extensibility and readability, which have a direct impact on the ROI for a business.","title":"Code quality"},{"location":"2Development/Software-build/#compilation","text":"This is only a small feature of managing the build process. The compilation function turns source files into directly executable or intermediate objects. Not every project will require this function. While for simple programs the process consists of a single file being compiled , for complex software the source code may consist of many files and may be combined in different ways to produce many different versions.","title":"Compilation"},{"location":"2Development/Software-build/#build#tools","text":"The process of building a computer program is usually managed by a build tool , a program that coordinates and controls other programs. Examples of such a program are make , Gradle , Meister by OpenMake Software , Ant , Maven , Rake , SCons and Phing . The build utility typically needs to compile the various files, in the correct order. If the source code in a particular file has not changed then it may not need to be recompiled (may not rather than need not because it may itself depend on other files that have changed). Sophisticated build utilities and linkers attempt to refrain from recompiling code that does not need it, to shorten the time required to complete the build. A more complex process may involve other programs producing code or data as part of the build process.","title":"Build tools"},{"location":"2Development/Software-build/#wikipedia#build#automation","text":"","title":"wikipedia Build automation"},{"location":"2Development/Testing/","text":"Software testing test\u662f\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u73af\u3002 wikipedia Software testing Successful case \u5e94\u7528test\u7684\u975e\u5e38\u6210\u529f\u7684\u6848\u4f8b\u3002 SQLite SQLite is very carefully tested prior to every release and has a reputation for being very reliable. Most of the SQLite source code is devoted purely to testing and verification. An automated test suite runs millions and millions of test cases involving hundreds of millions of individual SQL statements and achieves 100% branch test coverage . SQLite responds gracefully to memory allocation failures and disk I/O errors. Transactions are ACID even if interrupted by system crashes or power failures. All of this is verified by the automated tests using special test harnesses which simulate system failures. \u6d4b\u8bd5\u7684**\u5168\u9762\u6027**: \u53ef\u80fd\u7684\u573a\u666f \u4ee3\u7801\u5c42: coverage \u5728 How SQLite Is Tested \u63cf\u8ff0\u4e86sqlite\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002","title":"Introduction"},{"location":"2Development/Testing/#software#testing","text":"test\u662f\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u73af\u3002","title":"Software testing"},{"location":"2Development/Testing/#wikipedia#software#testing","text":"","title":"wikipedia Software testing"},{"location":"2Development/Testing/#successful#case","text":"\u5e94\u7528test\u7684\u975e\u5e38\u6210\u529f\u7684\u6848\u4f8b\u3002","title":"Successful case"},{"location":"2Development/Testing/#sqlite","text":"SQLite is very carefully tested prior to every release and has a reputation for being very reliable. Most of the SQLite source code is devoted purely to testing and verification. An automated test suite runs millions and millions of test cases involving hundreds of millions of individual SQL statements and achieves 100% branch test coverage . SQLite responds gracefully to memory allocation failures and disk I/O errors. Transactions are ACID even if interrupted by system crashes or power failures. All of this is verified by the automated tests using special test harnesses which simulate system failures. \u6d4b\u8bd5\u7684**\u5168\u9762\u6027**: \u53ef\u80fd\u7684\u573a\u666f \u4ee3\u7801\u5c42: coverage \u5728 How SQLite Is Tested \u63cf\u8ff0\u4e86sqlite\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002","title":"SQLite"},{"location":"2Development/Testing/Bugs/","text":"Bugs \u672c\u7ae0\u5bf9\u4e00\u4e9bbug\u8fdb\u884c\u603b\u7ed3\u3002 51cto \u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d Bug \u7684\u7c7b\u578b\u5927\u5168\u4e0e\u5386\u53f2 \u7f8e\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u3001\u56fe\u7075\u5956\u83b7\u5f97\u8005\u8a79\u59c6\u65af\u00b7\u5c3c\u53e4\u62c9\u00b7\u683c\u96f7(Jim Gray)\uff0c\u5728\u4ed6\u7684\u8457\u540d\u7684\u8bba\u6587\u201c Why do computers stop and what can be done about it? \u201d\u4e2d\u9996\u6b21\u63d0\u51fa\u4e86\u7a0b\u5e8fbug\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u73bb\u5c14bug(Bohrbug)\u3001 \u6d77\u68ee\u5821bug(Heisenbugs)\u7b49\u7528\u8457\u540d\u79d1\u5b66\u5bb6\u540d\u79f0\u547d\u540d\u7684bug\u3002\u540e\u6765\u53c8\u51fa\u73b0\u4e86\u66f4\u591a\u7684bug\u7c7b\u578b\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5b83\u4eec\u90fd\u662f\u4ec0\u4e48bug\u7c7b\u578b\u3002 \u73bb\u5c14bug(Bohrbug) \u5927\u591a\u6570\u6211\u4eec\u9047\u5230\u7684bug\u90fd\u662f\u53ef\u4ee5\u91cd\u73b0\u7684\uff0c\u8fd9\u4e9bbug\u88ab\u7edf\u79f0\u4e3a\u73bb\u5c14bug(Bohrbug)\u3002\u5b83\u662f\u7528\u4e39\u9ea6\u8457\u540d\u7269\u7406\u5b66\u5bb6\u3001\u8bfa\u8d1d\u5c14\u83b7\u5f97\u8005\u5c3c\u5c14\u65af\u00b7\u6ce2\u5c14\u7684\u540d \u5b57\u547d\u540d\u7684\u3002\u6ce2\u5c14\u9996\u5148\u57281913\u5e74\u63d0\u51fa\u4e86\u4e00\u4e2a\u7b80\u5355\u3001\u6613\u4e8e\u7406\u89e3\u7684\u539f\u5b50\u6a21\u578b\u6982\u5ff5\u3002\u5728\u6ce2\u5c14\u7684\u6a21\u578b\u4e2d\uff0c\u539f\u5b50\u4e2d\u7684\u7535\u5b50\u7684\u8def\u5f84\u548c\u52a8\u91cf\u662f\u53ef\u9884\u77e5\u7684\u3002\u540c\u6837\u7684\u9053\u7406\uff0c\u73bb\u5c14 bug(Bohrbug)\u4e5f\u662f\u53ef\u9884\u77e5\u7684\u3002\u5982\u679c\u8ba9\u8f6f\u4ef6\u5728\u76f8\u540c\u7684\u6761\u4ef6\u4e0b\u8fd0\u884c\uff0c\u4f60\u53ef\u4ee5\u8ba9bug\u518d\u6b21\u663e\u73b0\u3002\u4f8b\u5982\uff0c\u5982\u679c\u7a0b\u5e8f\u9047\u5230\u7a7a\u6307\u9488\u5f02\u5e38\u4f1a\u5d29\u6e83\uff0c\u90a3\u4e48\uff0c\u8bbe\u5b9a\u76f8\u540c\u7684 \u8f93\u5165\u6761\u4ef6\uff0c\u4f60\u53ef\u4ee5\u8f7b\u6613\u7684\u8ba9\u5b83\u4eec\u91cd\u65b0\u3002 \u6d77\u68ee\u5821bug(Heisenbug) \u6240\u6709\u6709\u9605\u5386\u7684\u7a0b\u5e8f\u5458\u90fd\u9047\u5230\u8fc7\u8fd9\u79cd\u60c5\u51b5\uff1a\u6709\u4e2abug\u8ba9\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4f46\u5f53\u7a0b\u5e8f\u91cd\u542f\u540e\uff0c\u8fd9\u4e2abug\u6d88\u5931\u4e86\u3002\u4e0d\u8bba\u4f60\u7528\u591a\u5c11\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u6765\u8bd5\u56fe\u8ba9bug\u91cd\u73b0\uff0cbug\u5c31\u662f\u4eba\u95f4\u84b8\u53d1\u4e86\u3002\u8fd9\u6837\u7684bug\u88ab\u79f0\u4e3a\u6d77\u68ee\u5821bug(Heisenbug)\uff0c\u5b83\u662f\u7528\u5fb7\u56fd\u7269\u7406\u5b66\u5bb6\u3001\u91cf\u5b50\u529b\u5b66\u7684\u521b\u59cb\u4eba\u3001\u201c\u54e5\u672c\u54c8\u6839\u5b66\u6d3e\u201d\u4ee3\u8868\u6027\u4eba\u7269\u7ef4\u5c14\u7eb3\u00b7\u6d77\u68ee\u5821(Werner Heisenber)\u7684\u540d\u5b57\u547d\u540d\uff0c\u9690\u5c04\u5176\u8457\u540d\u7684\u201c \u6d4b\u4e0d\u51c6\u539f\u7406 \u201d\uff08\u53c8\u79f0\u201c\u6d77\u68ee\u5821\u4e0d\u786e\u5b9a\u6027\u539f\u7406\u201d\uff09\u3002\u6839\u636e\u4ed6\u7684\u8fd9\u4e2a\u7406\u8bba\uff0c\u5728\u67d0\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\uff0c\u4e00\u4e2a\u7535\u5b50\u6240\u5904\u7684\u4f4d\u7f6e\u662f\u65e0\u6cd5\u786e\u5b9a\u7684\uff0c\u4e5f\u65e0\u6cd5\u8ddf\u8e2a\u5b83\u7684\u8f68\u8ff9\u3002\u5f53\u4f60\u53bbdebug\u3001\u63a2\u6d4b\u3001\u9694\u79bb\u4e00\u4e2abug\u65f6\uff0c\u4f60\u7684\u8fd9\u4e9b\u52a8\u4f5c\u4f1a\u5bfc\u81f4bug\u6539\u53d8\u5b83\u4eec\u7684\u884c\u4e3a\u8868\u73b0\uff0c\u8fd9\u4e9bbug\u5c31\u53eb\u505a\u6d77\u68ee\u5821bug(Heisenbugs)\u3002\u8fd9\u79cd\u4e8b\u60c5\u662f\u6709\u53ef\u80fd\u7684\uff0c\u6bd4\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u4e2abug\u51fa\u73b0\u3002\u7136\u800c\uff0c\u5f53\u4f60\u8bd5\u56fedebug\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u7a0b\u5e8f\u5374\u6ca1\u6709\u4efb\u4f55\u5f02\u5e38\uff0c\u56e0\u4e3a\u5f88\u591a\u7684debug\u5de5\u5177\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u53d8\u91cf\u4e3a0\uff0c\u6240\u4ee5\u8fd9\u4e9bbug\u5c06\u4e0d\u4f1a\u518d\u73b0\u3002 \u66fc\u5fb7\u535abug(Mandelbug) \u5f53bug\u4ea7\u751f\u7684\u539f\u56e0\u8fc7\u4e8e\u590d\u6742\u800c\u96be\u4ee5\u7406\u89e3\u65f6\uff0cbug\u7684\u51fa\u73b0\u4e5f\u53d8\u5f97\u6ca1\u6709\u89c4\u5f8b\uff0c\u8fd9\u4e9b\u53eb\u505a\u66fc\u5fb7\u535abug(Mandelbug)\u3002\u5b83\u662f\u7528 \u5206\u5f62\u51e0\u4f55\u5b66 \u4e4b\u7236\u672c\u534e\u00b7\u66fc\u5fb7\u535a\u7684\u540d\u5b57\u547d\u540d\u3002\u4f8b\u5982\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u57fa\u4e8e\u4efb\u52a1\u8c03\u5ea6\u4ea7\u751f\u7684bug\u5c31\u5c5e\u4e8e\u66fc\u5fb7\u535abug(Mandelbug)\u3002 \u859b\u5b9a\u8c14bug(Schroedinbug) \u6709\u65f6\u5019\uff0c\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u5f53\u4f60\u53bb\u770b\u5b83\u7684\u4ee3\u7801\u65f6\uff0c\u53d1\u73b0\u91cc\u9762\u6709\u4e00\u4e2abug\u6216\u6709\u67d0\u4e9b\u95ee\u9898\uff0c\u7a0b\u5e8f\u5b8c\u5168\u4e0d\u53ef\u80fd\u5728\u8fd9\u6837\u7684bug\u4e0b\u8fd0\u884c\u3002\u4f46\u4f60\u518d\u6b21\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f \u65f6\uff0cbug\u7a81\u7136\u5c31\u5176\u4f5c\u7528\u4e86\uff0c\u7a0b\u5e8f\u5d29\u6e83\u7684\u4e86\uff01\u867d\u7136\u8fd9\u542c\u8d77\u6765\u5f88\u8be1\u5f02\uff0c\u4f46\u8fd9\u6837\u7684bug\u786e\u5b9e\u5b58\u5728\uff0c\u800c\u4e14\u88ab\u53eb\u505a\u859b\u5b9a\u8c14bug(Schroedinbug)\u3002\u5b83\u662f\u7528\u5965 \u5730\u5229\u7406\u8bba\u7269\u7406\u5b66\u5bb6\u3001\u91cf\u5b50\u529b\u5b66\u7684\u5960\u57fa\u4eba\u57c3\u5c14\u6e29\u00b7\u859b\u5b9a\u8c14\u7684\u540d\u5b57\u547d\u540d\u3002\u9690\u5c04\u859b\u5b9a\u8c14\u8457\u540d\u7684 \u859b\u5b9a\u8c14\u732b\u601d\u60f3\u5b9e\u9a8c \u3002 \u5728\u91cf\u5b50\u529b\u5b66\u4e2d\uff0c\u50cf\u539f\u5b50\u8fd9\u6837\u7684\u7c92\u5b50\u53ef\u4ee5\u5b58\u5728\u4e8e\u4e24\u79cd\u6216\u4e24\u79cd\u4ee5\u4e0a\u7684\u91cf\u5b50\u72b6\u6001\u4e2d\uff0c\u4f46\u859b\u5b9a\u8c14\u8ba4\u4e3a\uff0c\u5728\u66f4\u5178\u578b\u7684\u7269\u4f53\uff0c\u4f8b\u5982\u4e00\u53ea\u732b\u2014\u2014\u7531\u5f88\u591a\u539f\u5b50\u6784\u6210\u2014\u2014\u5b58\u5728\u4e8e\u4e24\u79cd\u72b6\u6001 \u4e0b\u7684\u53ef\u80fd\u6027\u662f\u6ca1\u6709\u7684\u3002\u4ed6\u63d0\u51fa\u4e86\u4e00\u79cd\u601d\u60f3\u5b9e\u9a8c\uff1a\u628a\u4e00\u53ea\u732b\u3001\u4e00\u4e2a\u88c5\u6709\u6c30\u5316\u6c22\u6c14\u4f53\u7684\u73bb\u7483\u70e7\u74f6\u548c\u4e00\u4e2a\u653e\u5c04\u6027\u539f\u5b50\u6838\u653e\u8fdb\u5c01\u95ed\u7684\u76d2\u5b50\u91cc\u3002\u5f53\u76d2\u5b50\u5185\u7684\u76d1\u63a7\u5668\u4fa6\u6d4b\u5230\u8870\u53d8\u7c92 \u5b50\u65f6\uff0c\u5c31\u4f1a\u6253\u7834\u70e7\u74f6\uff0c\u6740\u6b7b\u8fd9\u53ea\u732b\u3002\u6839\u636e\u91cf\u5b50\u529b\u5b66\u7684\u54e5\u672c\u54c8\u6839\u8be0\u91ca\uff0c\u5728\u5b9e\u9a8c\u8fdb\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u732b\u4f1a\u5904\u4e8e\u53c8\u6d3b\u53c8\u6b7b\u7684\u53e0\u52a0\u6001\u3002\u53ef\u662f\uff0c\u5047\u82e5\u5b9e\u9a8c\u8005\u89c2\u5bdf\u76d2\u5b50\u5185\u90e8\uff0c\u4ed6\u4f1a\u89c2 \u5bdf\u5230\u4e00\u53ea\u6d3b\u732b\u6216\u4e00\u53ea\u6b7b\u732b\uff0c\u800c\u4e0d\u662f\u540c\u65f6\u5904\u4e8e\u6d3b\u72b6\u6001\u4e0e\u6b7b\u72b6\u6001\u7684\u732b\u3002\u800c\u5728\u91cf\u5b50\u7269\u7406\u4e2d\uff0c\u8fd9\u88ab\u79f0\u4f5c \u53e0\u52a0\u6001 \uff1a\u732b\u540c\u65f6\u5904\u4e8e\u751f\u548c\u6b7b\u7684\u72b6\u6001\u3002 \u56de\u5230\u6211\u4eec\u7684bug\u4e0a\uff0c\u56e0\u4e3a\u4f60\u5728\u4ee3\u7801\u4e2d\u53d1\u73b0\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u6539\u53d8\u4e86\u7a0b\u5e8f\u7684\u8f93\u51fa\u2014\u2014\u7a0b\u5e8f\u8981\u4e48\u5c31\u7ee7\u7eed\u8fd0\u884c\uff0c\u8981\u4e48\u5d29\u6e83\u3002\u6240\u4ee5\uff0c\u8fd9\u79cdbug\u5c31\u53eb\u505a\u859b\u5b9a\u8c14bug(Schroedinbug)\u3002 \u8fd8\u6709\u51e0\u79cd\u5176\u5b83\u7c7b\u578b\u7684bug\u6ca1\u6709\u5728\u8fd9\u91cc\u5217\u51fa\uff0c\u4f8b\u5982\u201c\u6210\u957f\u7684bug(aging-related bugs)\u201d\u2014\u2014\u53ea\u6709\u5728\u7a0b\u5e8f\u8fd0\u884c\u5f88\u4e45\u4e4b\u540e\u624d\u4f1a\u51fa\u73b0\u7684bug\u3002 wanweibaike Software bug","title":"Introduction"},{"location":"2Development/Testing/Bugs/#bugs","text":"\u672c\u7ae0\u5bf9\u4e00\u4e9bbug\u8fdb\u884c\u603b\u7ed3\u3002","title":"Bugs"},{"location":"2Development/Testing/Bugs/#51cto#bug","text":"\u7f8e\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u3001\u56fe\u7075\u5956\u83b7\u5f97\u8005\u8a79\u59c6\u65af\u00b7\u5c3c\u53e4\u62c9\u00b7\u683c\u96f7(Jim Gray)\uff0c\u5728\u4ed6\u7684\u8457\u540d\u7684\u8bba\u6587\u201c Why do computers stop and what can be done about it? \u201d\u4e2d\u9996\u6b21\u63d0\u51fa\u4e86\u7a0b\u5e8fbug\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u73bb\u5c14bug(Bohrbug)\u3001 \u6d77\u68ee\u5821bug(Heisenbugs)\u7b49\u7528\u8457\u540d\u79d1\u5b66\u5bb6\u540d\u79f0\u547d\u540d\u7684bug\u3002\u540e\u6765\u53c8\u51fa\u73b0\u4e86\u66f4\u591a\u7684bug\u7c7b\u578b\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5b83\u4eec\u90fd\u662f\u4ec0\u4e48bug\u7c7b\u578b\u3002","title":"51cto \u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d Bug \u7684\u7c7b\u578b\u5927\u5168\u4e0e\u5386\u53f2"},{"location":"2Development/Testing/Bugs/#bugbohrbug","text":"\u5927\u591a\u6570\u6211\u4eec\u9047\u5230\u7684bug\u90fd\u662f\u53ef\u4ee5\u91cd\u73b0\u7684\uff0c\u8fd9\u4e9bbug\u88ab\u7edf\u79f0\u4e3a\u73bb\u5c14bug(Bohrbug)\u3002\u5b83\u662f\u7528\u4e39\u9ea6\u8457\u540d\u7269\u7406\u5b66\u5bb6\u3001\u8bfa\u8d1d\u5c14\u83b7\u5f97\u8005\u5c3c\u5c14\u65af\u00b7\u6ce2\u5c14\u7684\u540d \u5b57\u547d\u540d\u7684\u3002\u6ce2\u5c14\u9996\u5148\u57281913\u5e74\u63d0\u51fa\u4e86\u4e00\u4e2a\u7b80\u5355\u3001\u6613\u4e8e\u7406\u89e3\u7684\u539f\u5b50\u6a21\u578b\u6982\u5ff5\u3002\u5728\u6ce2\u5c14\u7684\u6a21\u578b\u4e2d\uff0c\u539f\u5b50\u4e2d\u7684\u7535\u5b50\u7684\u8def\u5f84\u548c\u52a8\u91cf\u662f\u53ef\u9884\u77e5\u7684\u3002\u540c\u6837\u7684\u9053\u7406\uff0c\u73bb\u5c14 bug(Bohrbug)\u4e5f\u662f\u53ef\u9884\u77e5\u7684\u3002\u5982\u679c\u8ba9\u8f6f\u4ef6\u5728\u76f8\u540c\u7684\u6761\u4ef6\u4e0b\u8fd0\u884c\uff0c\u4f60\u53ef\u4ee5\u8ba9bug\u518d\u6b21\u663e\u73b0\u3002\u4f8b\u5982\uff0c\u5982\u679c\u7a0b\u5e8f\u9047\u5230\u7a7a\u6307\u9488\u5f02\u5e38\u4f1a\u5d29\u6e83\uff0c\u90a3\u4e48\uff0c\u8bbe\u5b9a\u76f8\u540c\u7684 \u8f93\u5165\u6761\u4ef6\uff0c\u4f60\u53ef\u4ee5\u8f7b\u6613\u7684\u8ba9\u5b83\u4eec\u91cd\u65b0\u3002","title":"\u73bb\u5c14bug(Bohrbug)"},{"location":"2Development/Testing/Bugs/#bugheisenbug","text":"\u6240\u6709\u6709\u9605\u5386\u7684\u7a0b\u5e8f\u5458\u90fd\u9047\u5230\u8fc7\u8fd9\u79cd\u60c5\u51b5\uff1a\u6709\u4e2abug\u8ba9\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4f46\u5f53\u7a0b\u5e8f\u91cd\u542f\u540e\uff0c\u8fd9\u4e2abug\u6d88\u5931\u4e86\u3002\u4e0d\u8bba\u4f60\u7528\u591a\u5c11\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u6765\u8bd5\u56fe\u8ba9bug\u91cd\u73b0\uff0cbug\u5c31\u662f\u4eba\u95f4\u84b8\u53d1\u4e86\u3002\u8fd9\u6837\u7684bug\u88ab\u79f0\u4e3a\u6d77\u68ee\u5821bug(Heisenbug)\uff0c\u5b83\u662f\u7528\u5fb7\u56fd\u7269\u7406\u5b66\u5bb6\u3001\u91cf\u5b50\u529b\u5b66\u7684\u521b\u59cb\u4eba\u3001\u201c\u54e5\u672c\u54c8\u6839\u5b66\u6d3e\u201d\u4ee3\u8868\u6027\u4eba\u7269\u7ef4\u5c14\u7eb3\u00b7\u6d77\u68ee\u5821(Werner Heisenber)\u7684\u540d\u5b57\u547d\u540d\uff0c\u9690\u5c04\u5176\u8457\u540d\u7684\u201c \u6d4b\u4e0d\u51c6\u539f\u7406 \u201d\uff08\u53c8\u79f0\u201c\u6d77\u68ee\u5821\u4e0d\u786e\u5b9a\u6027\u539f\u7406\u201d\uff09\u3002\u6839\u636e\u4ed6\u7684\u8fd9\u4e2a\u7406\u8bba\uff0c\u5728\u67d0\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\uff0c\u4e00\u4e2a\u7535\u5b50\u6240\u5904\u7684\u4f4d\u7f6e\u662f\u65e0\u6cd5\u786e\u5b9a\u7684\uff0c\u4e5f\u65e0\u6cd5\u8ddf\u8e2a\u5b83\u7684\u8f68\u8ff9\u3002\u5f53\u4f60\u53bbdebug\u3001\u63a2\u6d4b\u3001\u9694\u79bb\u4e00\u4e2abug\u65f6\uff0c\u4f60\u7684\u8fd9\u4e9b\u52a8\u4f5c\u4f1a\u5bfc\u81f4bug\u6539\u53d8\u5b83\u4eec\u7684\u884c\u4e3a\u8868\u73b0\uff0c\u8fd9\u4e9bbug\u5c31\u53eb\u505a\u6d77\u68ee\u5821bug(Heisenbugs)\u3002\u8fd9\u79cd\u4e8b\u60c5\u662f\u6709\u53ef\u80fd\u7684\uff0c\u6bd4\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u4e2abug\u51fa\u73b0\u3002\u7136\u800c\uff0c\u5f53\u4f60\u8bd5\u56fedebug\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u7a0b\u5e8f\u5374\u6ca1\u6709\u4efb\u4f55\u5f02\u5e38\uff0c\u56e0\u4e3a\u5f88\u591a\u7684debug\u5de5\u5177\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u53d8\u91cf\u4e3a0\uff0c\u6240\u4ee5\u8fd9\u4e9bbug\u5c06\u4e0d\u4f1a\u518d\u73b0\u3002","title":"\u6d77\u68ee\u5821bug(Heisenbug)"},{"location":"2Development/Testing/Bugs/#bugmandelbug","text":"\u5f53bug\u4ea7\u751f\u7684\u539f\u56e0\u8fc7\u4e8e\u590d\u6742\u800c\u96be\u4ee5\u7406\u89e3\u65f6\uff0cbug\u7684\u51fa\u73b0\u4e5f\u53d8\u5f97\u6ca1\u6709\u89c4\u5f8b\uff0c\u8fd9\u4e9b\u53eb\u505a\u66fc\u5fb7\u535abug(Mandelbug)\u3002\u5b83\u662f\u7528 \u5206\u5f62\u51e0\u4f55\u5b66 \u4e4b\u7236\u672c\u534e\u00b7\u66fc\u5fb7\u535a\u7684\u540d\u5b57\u547d\u540d\u3002\u4f8b\u5982\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u57fa\u4e8e\u4efb\u52a1\u8c03\u5ea6\u4ea7\u751f\u7684bug\u5c31\u5c5e\u4e8e\u66fc\u5fb7\u535abug(Mandelbug)\u3002","title":"\u66fc\u5fb7\u535abug(Mandelbug)"},{"location":"2Development/Testing/Bugs/#bugschroedinbug","text":"\u6709\u65f6\u5019\uff0c\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u5f53\u4f60\u53bb\u770b\u5b83\u7684\u4ee3\u7801\u65f6\uff0c\u53d1\u73b0\u91cc\u9762\u6709\u4e00\u4e2abug\u6216\u6709\u67d0\u4e9b\u95ee\u9898\uff0c\u7a0b\u5e8f\u5b8c\u5168\u4e0d\u53ef\u80fd\u5728\u8fd9\u6837\u7684bug\u4e0b\u8fd0\u884c\u3002\u4f46\u4f60\u518d\u6b21\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f \u65f6\uff0cbug\u7a81\u7136\u5c31\u5176\u4f5c\u7528\u4e86\uff0c\u7a0b\u5e8f\u5d29\u6e83\u7684\u4e86\uff01\u867d\u7136\u8fd9\u542c\u8d77\u6765\u5f88\u8be1\u5f02\uff0c\u4f46\u8fd9\u6837\u7684bug\u786e\u5b9e\u5b58\u5728\uff0c\u800c\u4e14\u88ab\u53eb\u505a\u859b\u5b9a\u8c14bug(Schroedinbug)\u3002\u5b83\u662f\u7528\u5965 \u5730\u5229\u7406\u8bba\u7269\u7406\u5b66\u5bb6\u3001\u91cf\u5b50\u529b\u5b66\u7684\u5960\u57fa\u4eba\u57c3\u5c14\u6e29\u00b7\u859b\u5b9a\u8c14\u7684\u540d\u5b57\u547d\u540d\u3002\u9690\u5c04\u859b\u5b9a\u8c14\u8457\u540d\u7684 \u859b\u5b9a\u8c14\u732b\u601d\u60f3\u5b9e\u9a8c \u3002 \u5728\u91cf\u5b50\u529b\u5b66\u4e2d\uff0c\u50cf\u539f\u5b50\u8fd9\u6837\u7684\u7c92\u5b50\u53ef\u4ee5\u5b58\u5728\u4e8e\u4e24\u79cd\u6216\u4e24\u79cd\u4ee5\u4e0a\u7684\u91cf\u5b50\u72b6\u6001\u4e2d\uff0c\u4f46\u859b\u5b9a\u8c14\u8ba4\u4e3a\uff0c\u5728\u66f4\u5178\u578b\u7684\u7269\u4f53\uff0c\u4f8b\u5982\u4e00\u53ea\u732b\u2014\u2014\u7531\u5f88\u591a\u539f\u5b50\u6784\u6210\u2014\u2014\u5b58\u5728\u4e8e\u4e24\u79cd\u72b6\u6001 \u4e0b\u7684\u53ef\u80fd\u6027\u662f\u6ca1\u6709\u7684\u3002\u4ed6\u63d0\u51fa\u4e86\u4e00\u79cd\u601d\u60f3\u5b9e\u9a8c\uff1a\u628a\u4e00\u53ea\u732b\u3001\u4e00\u4e2a\u88c5\u6709\u6c30\u5316\u6c22\u6c14\u4f53\u7684\u73bb\u7483\u70e7\u74f6\u548c\u4e00\u4e2a\u653e\u5c04\u6027\u539f\u5b50\u6838\u653e\u8fdb\u5c01\u95ed\u7684\u76d2\u5b50\u91cc\u3002\u5f53\u76d2\u5b50\u5185\u7684\u76d1\u63a7\u5668\u4fa6\u6d4b\u5230\u8870\u53d8\u7c92 \u5b50\u65f6\uff0c\u5c31\u4f1a\u6253\u7834\u70e7\u74f6\uff0c\u6740\u6b7b\u8fd9\u53ea\u732b\u3002\u6839\u636e\u91cf\u5b50\u529b\u5b66\u7684\u54e5\u672c\u54c8\u6839\u8be0\u91ca\uff0c\u5728\u5b9e\u9a8c\u8fdb\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u732b\u4f1a\u5904\u4e8e\u53c8\u6d3b\u53c8\u6b7b\u7684\u53e0\u52a0\u6001\u3002\u53ef\u662f\uff0c\u5047\u82e5\u5b9e\u9a8c\u8005\u89c2\u5bdf\u76d2\u5b50\u5185\u90e8\uff0c\u4ed6\u4f1a\u89c2 \u5bdf\u5230\u4e00\u53ea\u6d3b\u732b\u6216\u4e00\u53ea\u6b7b\u732b\uff0c\u800c\u4e0d\u662f\u540c\u65f6\u5904\u4e8e\u6d3b\u72b6\u6001\u4e0e\u6b7b\u72b6\u6001\u7684\u732b\u3002\u800c\u5728\u91cf\u5b50\u7269\u7406\u4e2d\uff0c\u8fd9\u88ab\u79f0\u4f5c \u53e0\u52a0\u6001 \uff1a\u732b\u540c\u65f6\u5904\u4e8e\u751f\u548c\u6b7b\u7684\u72b6\u6001\u3002 \u56de\u5230\u6211\u4eec\u7684bug\u4e0a\uff0c\u56e0\u4e3a\u4f60\u5728\u4ee3\u7801\u4e2d\u53d1\u73b0\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u6539\u53d8\u4e86\u7a0b\u5e8f\u7684\u8f93\u51fa\u2014\u2014\u7a0b\u5e8f\u8981\u4e48\u5c31\u7ee7\u7eed\u8fd0\u884c\uff0c\u8981\u4e48\u5d29\u6e83\u3002\u6240\u4ee5\uff0c\u8fd9\u79cdbug\u5c31\u53eb\u505a\u859b\u5b9a\u8c14bug(Schroedinbug)\u3002 \u8fd8\u6709\u51e0\u79cd\u5176\u5b83\u7c7b\u578b\u7684bug\u6ca1\u6709\u5728\u8fd9\u91cc\u5217\u51fa\uff0c\u4f8b\u5982\u201c\u6210\u957f\u7684bug(aging-related bugs)\u201d\u2014\u2014\u53ea\u6709\u5728\u7a0b\u5e8f\u8fd0\u884c\u5f88\u4e45\u4e4b\u540e\u624d\u4f1a\u51fa\u73b0\u7684bug\u3002","title":"\u859b\u5b9a\u8c14bug(Schroedinbug)"},{"location":"2Development/Testing/Bugs/#wanweibaike#software#bug","text":"","title":"wanweibaike Software bug"},{"location":"2Development/Testing/Bugs/Heisenbug/","text":"Heisenbug \u4e00\u300151cto \u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d Bug \u7684\u7c7b\u578b\u5927\u5168\u4e0e\u5386\u53f2 \u6240\u6709\u6709\u9605\u5386\u7684\u7a0b\u5e8f\u5458\u90fd\u9047\u5230\u8fc7\u8fd9\u79cd\u60c5\u51b5\uff1a\u6709\u4e2abug\u8ba9\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4f46\u5f53\u7a0b\u5e8f\u91cd\u542f\u540e\uff0c\u8fd9\u4e2abug\u6d88\u5931\u4e86\u3002\u4e0d\u8bba\u4f60\u7528\u591a\u5c11\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u6765\u8bd5\u56fe\u8ba9bug\u91cd\u73b0\uff0cbug\u5c31\u662f\u4eba\u95f4\u84b8\u53d1\u4e86\u3002\u8fd9\u6837\u7684bug\u88ab\u79f0\u4e3a\u6d77\u68ee\u5821bug(Heisenbug)\uff0c\u5b83\u662f\u7528\u5fb7\u56fd\u7269\u7406\u5b66\u5bb6\u3001\u91cf\u5b50\u529b\u5b66\u7684\u521b\u59cb\u4eba\u3001\u201c\u54e5\u672c\u54c8\u6839\u5b66\u6d3e\u201d\u4ee3\u8868\u6027\u4eba\u7269\u7ef4\u5c14\u7eb3\u00b7\u6d77\u68ee\u5821(Werner Heisenber)\u7684\u540d\u5b57\u547d\u540d\uff0c\u9690\u5c04\u5176\u8457\u540d\u7684\u201c \u6d4b\u4e0d\u51c6\u539f\u7406 \u201d\uff08\u53c8\u79f0\u201c\u6d77\u68ee\u5821\u4e0d\u786e\u5b9a\u6027\u539f\u7406\u201d\uff09\u3002\u6839\u636e\u4ed6\u7684\u8fd9\u4e2a\u7406\u8bba\uff0c\u5728\u67d0\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\uff0c\u4e00\u4e2a\u7535\u5b50\u6240\u5904\u7684\u4f4d\u7f6e\u662f\u65e0\u6cd5\u786e\u5b9a\u7684\uff0c\u4e5f\u65e0\u6cd5\u8ddf\u8e2a\u5b83\u7684\u8f68\u8ff9\u3002\u5f53\u4f60\u53bbdebug\u3001\u63a2\u6d4b\u3001\u9694\u79bb\u4e00\u4e2abug\u65f6\uff0c\u4f60\u7684\u8fd9\u4e9b\u52a8\u4f5c\u4f1a\u5bfc\u81f4bug\u6539\u53d8\u5b83\u4eec\u7684\u884c\u4e3a\u8868\u73b0\uff0c\u8fd9\u4e9bbug\u5c31\u53eb\u505a\u6d77\u68ee\u5821bug(Heisenbugs)\u3002\u8fd9\u79cd\u4e8b\u60c5\u662f\u6709\u53ef\u80fd\u7684\uff0c\u6bd4\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u4e2abug\u51fa\u73b0\u3002\u7136\u800c\uff0c\u5f53\u4f60\u8bd5\u56fedebug\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u7a0b\u5e8f\u5374\u6ca1\u6709\u4efb\u4f55\u5f02\u5e38\uff0c\u56e0\u4e3a\u5f88\u591a\u7684debug\u5de5\u5177\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u53d8\u91cf\u4e3a0\uff0c\u6240\u4ee5\u8fd9\u4e9bbug\u5c06\u4e0d\u4f1a\u518d\u73b0\u3002 \u4e8c\u3001race condition\u662f\u5178\u578b\u7684Heisenbug baike \u6d77\u68ee\u5821bug wikipedia Heisenbug sourceware The Heisenberg Debugging Technology","title":"Introduction"},{"location":"2Development/Testing/Bugs/Heisenbug/#heisenbug","text":"\u4e00\u300151cto \u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d Bug \u7684\u7c7b\u578b\u5927\u5168\u4e0e\u5386\u53f2 \u6240\u6709\u6709\u9605\u5386\u7684\u7a0b\u5e8f\u5458\u90fd\u9047\u5230\u8fc7\u8fd9\u79cd\u60c5\u51b5\uff1a\u6709\u4e2abug\u8ba9\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4f46\u5f53\u7a0b\u5e8f\u91cd\u542f\u540e\uff0c\u8fd9\u4e2abug\u6d88\u5931\u4e86\u3002\u4e0d\u8bba\u4f60\u7528\u591a\u5c11\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u6765\u8bd5\u56fe\u8ba9bug\u91cd\u73b0\uff0cbug\u5c31\u662f\u4eba\u95f4\u84b8\u53d1\u4e86\u3002\u8fd9\u6837\u7684bug\u88ab\u79f0\u4e3a\u6d77\u68ee\u5821bug(Heisenbug)\uff0c\u5b83\u662f\u7528\u5fb7\u56fd\u7269\u7406\u5b66\u5bb6\u3001\u91cf\u5b50\u529b\u5b66\u7684\u521b\u59cb\u4eba\u3001\u201c\u54e5\u672c\u54c8\u6839\u5b66\u6d3e\u201d\u4ee3\u8868\u6027\u4eba\u7269\u7ef4\u5c14\u7eb3\u00b7\u6d77\u68ee\u5821(Werner Heisenber)\u7684\u540d\u5b57\u547d\u540d\uff0c\u9690\u5c04\u5176\u8457\u540d\u7684\u201c \u6d4b\u4e0d\u51c6\u539f\u7406 \u201d\uff08\u53c8\u79f0\u201c\u6d77\u68ee\u5821\u4e0d\u786e\u5b9a\u6027\u539f\u7406\u201d\uff09\u3002\u6839\u636e\u4ed6\u7684\u8fd9\u4e2a\u7406\u8bba\uff0c\u5728\u67d0\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\uff0c\u4e00\u4e2a\u7535\u5b50\u6240\u5904\u7684\u4f4d\u7f6e\u662f\u65e0\u6cd5\u786e\u5b9a\u7684\uff0c\u4e5f\u65e0\u6cd5\u8ddf\u8e2a\u5b83\u7684\u8f68\u8ff9\u3002\u5f53\u4f60\u53bbdebug\u3001\u63a2\u6d4b\u3001\u9694\u79bb\u4e00\u4e2abug\u65f6\uff0c\u4f60\u7684\u8fd9\u4e9b\u52a8\u4f5c\u4f1a\u5bfc\u81f4bug\u6539\u53d8\u5b83\u4eec\u7684\u884c\u4e3a\u8868\u73b0\uff0c\u8fd9\u4e9bbug\u5c31\u53eb\u505a\u6d77\u68ee\u5821bug(Heisenbugs)\u3002\u8fd9\u79cd\u4e8b\u60c5\u662f\u6709\u53ef\u80fd\u7684\uff0c\u6bd4\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u4e2abug\u51fa\u73b0\u3002\u7136\u800c\uff0c\u5f53\u4f60\u8bd5\u56fedebug\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u7a0b\u5e8f\u5374\u6ca1\u6709\u4efb\u4f55\u5f02\u5e38\uff0c\u56e0\u4e3a\u5f88\u591a\u7684debug\u5de5\u5177\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u53d8\u91cf\u4e3a0\uff0c\u6240\u4ee5\u8fd9\u4e9bbug\u5c06\u4e0d\u4f1a\u518d\u73b0\u3002 \u4e8c\u3001race condition\u662f\u5178\u578b\u7684Heisenbug","title":"Heisenbug"},{"location":"2Development/Testing/Bugs/Heisenbug/#baike#bug","text":"","title":"baike \u6d77\u68ee\u5821bug"},{"location":"2Development/Testing/Bugs/Heisenbug/#wikipedia#heisenbug","text":"","title":"wikipedia Heisenbug"},{"location":"2Development/Testing/Bugs/Heisenbug/#sourceware#the#heisenberg#debugging#technology","text":"","title":"sourceware The Heisenberg Debugging Technology"},{"location":"2Development/Testing/Code-coverage/","text":"Code coverage zhihu \u4ec0\u4e48\u662f\u4ee3\u7801\u8986\u76d6\u7387\uff1f zhihu \u5b9e\u9645\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u662f\u5426\u771f\u7684\u9700\u8981100%\u4ee3\u7801\u8986\u76d6\u7387\uff08code coverage\uff09\uff1f Milo Yip\u7684\u56de\u7b54 NOTE: 1\u3001\u4f5c\u8005\u7ed3\u5408\u81ea\u5df1\u7684\u9879\u76ee\u7ecf\u9a8c\u6765\u8c08\u7684 ThoughtWorks\u4e2d\u56fd \u628a\u6d4b\u8bd5\u8986\u76d6\u4f5c\u4e3a\u8d28\u91cf\u76ee\u6807\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u5b83\u4f5c\u4e3a\u4e00\u79cd\u53d1\u73b0\u672a\u88ab\u6d4b\u8bd5\u8986\u76d6\u7684\u4ee3\u7801\u7684\u624b\u6bb5\u3002 \u6240\u4ee5100%\u7684\u4ee3\u7801\u8986\u76d6\u7387\u8fd8\u503c\u5f97\u8ffd\u6c42\u5417? \u5f53\u7136\uff0c\u8fd9\u5e94\u8be5\u662f\u6bcf\u4e2a\u7a0b\u5e8f\u5458\u6bd5\u751f\u7684\u8ffd\u6c42\u4e4b\u4e00\uff0c\u4f46\u662f\u5982\u679c\u4ece\u9879\u76ee\u89d2\u5ea6\u8003\u8651**ROI(\u6295\u5165\u4ea7\u51fa\u6bd4) \uff0c\u5bf9\u4e8e\u9700\u8981\u5feb\u901f\u4e0a\u7ebf\u7684\u77ed\u671f\u9879\u76ee\uff0c\u9700\u8981\u6ce8\u91cd\u7684\u662f\u8ba9\u6d4b\u8bd5\u8986\u76d6\u6838\u5fc3\u529f\u80fd\u4ee3\u7801\u3002\u5982\u679c\u4f60\u7684\u9879\u76ee\u662f\u4e00\u4e2a\u957f\u671f\u9879\u76ee\uff0c\u90a3\u4e48**\u9ad8\u8986\u76d6\u7387**\u662f\u975e\u5e38\u6709\u5fc5\u8981\u7684\uff0c\u5b83\u610f\u5473\u7740**\u9ad8\u53ef\u7ef4\u62a4\u6027 \uff0c\u4ee5\u53ca**\u66f4\u5c11\u7684bug**\u3002(\u524d\u63d0\u662f\u4f60\u7684\u6d4b\u8bd5\u91c7\u7528TDD/BDD\u65b9\u5f0f\u7f16\u5199\uff0c\u6211\u89c1\u8fc7\u5c06\u6d4b\u8bd5\u4ee3\u7801\u5199\u7684\u4e00\u56e2\u7cdf\u7684\u4eba\uff0c\u770b\u7740\u4ed6\u7684\u4ee3\u7801\uff0c\u6211\u5b81\u613f\u91cd\u65b0\u5199\u4e00\u904d) NOTE: \u4e00\u3001\u5173\u4e8eTDD/BDD\uff0c\u53c2\u89c1: Test-driven development Behavior-driven development \u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u9879\u76ee\u6765\u8bf4\uff0c\u8986\u76d6\u7387\u5e94\u8be5\u8fbe\u5230\u591a\u5c11\uff1f \u5176\u5b9e\u6ca1\u6709\u9002\u7528\u4e8e\u6240\u6709\u9879\u76ee\u7684\u6570\u503c\uff0c\u6bcf\u4e2a\u9879\u76ee\u90fd\u5e94\u6709\u81ea\u5df1\u7684\u9608\u503c\uff0c\u4f46\u5171\u6027\u662f\uff0c\u6d4b\u8bd5\u5fc5\u987b\u8986\u76d6\u4e3b\u8981\u4e1a\u52a1\u573a\u666f\uff0c\u4ee3\u7801\u7684\u903b\u8f91\u5206\u652f\u4e5f\u5fc5\u987b\u5c3d\u53ef\u80fd\u7684\u8986\u76d6\u3002 \u5982\u4f55\u6539\u8fdb\u4f60\u7684\u9879\u76ee\u4ee3\u7801\u8986\u76d6\u7387\uff1f **\u9996\u5148**\u6211\u4eec\u8981\u9605\u8bfb\u548c\u7406\u89e3\u9879\u76ee\u4ee3\u7801\uff0c\u627e\u51fa\u5176\u4e2d\u9700\u8981\u6d4b\u8bd5\u5e76\u4e14\u4e0e\u4e1a\u52a1\u5f3a\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u7ed3\u5408sonar\u7b49\u4ee3\u7801\u8d28\u91cf\u7ba1\u7406\u5e73\u53f0\uff0c\u4ece\u4ee3\u7801\u7f16\u5199\u89c4\u8303\u3001\u590d\u6742\u5ea6\u3001\u91cd\u590d\u4ee3\u7801\u7b49\u65b9\u9762\u8fdb\u884c\u4ee3\u7801\u91cd\u6784\uff0c\u8fdb\u4e00\u6b65\u63d0\u9ad8\u9879\u76ee\u7684\u53ef\u7ef4\u62a4\u6027\u4e0e\u53ef\u8bfb\u6027\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\u91cd\u6784\uff0c\u91cd\u6784\u7684\u540c\u65f6\uff0c\u4f60\u9700\u8981\u66f4\u591a\u7684\u6d4b\u8bd5\u6765\u4fdd\u8bc1\u4f60\u91cd\u6784\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002 **\u5176\u6b21**\u8981\u5bf9code coverage\u8fdb\u884c\u5ea6\u91cf\u5206\u6790\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u5ea6\u91cfcode coverage\uff1f \u4e00\u822c\u6765\u8bf4\u6211\u4eec\u4ece\u4ee5\u4e0b\u56db\u4e2a\u7ef4\u5ea6\u6765\u5ea6\u91cf\uff0c\u5982\u4e0a\u56fe\u6240\u793a: \u884c\u8986\u76d6\u7387 \uff08line coverage\uff09\uff1a\u5ea6\u91cf\u88ab\u6d4b\u4ee3\u7801\u4e2d\u6bcf\u4e2a\u53ef\u6267\u884c\u8bed\u53e5\u662f\u5426\u90fd\u88ab\u6267\u884c\u5230\uff0c\u4f46\u4e0d\u5305\u62ecjava import\uff0c\u7a7a\u884c\uff0c\u6ce8\u91ca\u7b49\u3002 \u51fd\u6570\u8986\u76d6\u7387 \uff08function coverage\uff09\uff1a\u5ea6\u91cf\u88ab\u6d4b\u4ee3\u7801\u4e2d\u6bcf\u4e2a\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u5426\u90fd\u88ab\u8c03\u7528\u3002 \u5206\u652f\u8986\u76d6\u7387 \uff08branch coverage\uff09\uff1a\u5ea6\u91cf\u88ab\u6d4b\u4ee3\u7801\u4e2d\u6bcf\u4e00\u4e2a\u5224\u5b9a\u7684\u5206\u652f\u662f\u5426\u90fd\u88ab\u6d4b\u8bd5\u5230\u3002 \u8bed\u53e5\u8986\u76d6\u7387 \uff08statement coverage\uff09\uff1a\u5ea6\u91cf\u88ab\u6d4b\u4ee3\u7801\u662f\u5426\u6bcf\u4e2a\u8bed\u53e5\u90fd\u88ab\u6267\u884c\u3002 \u6240\u4ee5\u884c\u8986\u76d6\u7387\u7684\u9ad8\u4f4e\u4e0d\u80fd\u8bf4\u660e\u9879\u76ee\u7684\u597d\u574f\uff0c\u6211\u4eec\u8981\u4ece\u591a\u65b9\u9762\u8fdb\u884c\u601d\u8003\uff0c\u4e00\u822c\u6211\u4eec\u9075\u5faa\u7684\u6807\u51c6\u5e94\u662f\uff1a \u51fd\u6570\u8986\u76d6\u7387 > \u5206\u652f\u8986\u76d6\u7387 > \u8bed\u53e5\u8986\u76d6\u7387** \u3002 \u4ee3\u7801\u8986\u76d6\u7387\u6700\u91cd\u8981\u7684\u610f\u4e49\u5728\u4e8e\uff1a \u9605\u8bfb\u5206\u6790\u4e4b\u524d\u9879\u76ee\u4e2d\u672a\u8986\u76d6\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u8fdb\u800c\u53cd\u63a8\u5728\u524d\u671fQA\u4ee5\u53ca\u76f8\u5173\u6d4b\u8bd5\u4eba\u5458\u5728\u8fdb\u884c\u9ed1\u76d2\u6d4b\u8bd5\u8bbe\u8ba1\u65f6\u662f\u5426\u8003\u8651\u5145\u5206\uff0c\u6ca1\u6709\u8986\u76d6\u5230\u7684\u4ee3\u7801\u662f\u5426\u662f\u6d4b\u8bd5\u8bbe\u8ba1\u7684\u76f2\u70b9\uff0c\u4e3a\u4ec0\u4e48\u6ca1\u6709\u8003\u8651\u5230\uff1f\u662f\u9700\u6c42\u6216\u8005UX\u8bbe\u8ba1\u4e0d\u591f\u6e05\u6670\uff0c\u8fd8\u662f\u6d4b\u8bd5\u8bbe\u8ba1\u7684\u7406\u89e3\u6709\u8bef\u3002 \u68c0\u6d4b\u51fa\u7a0b\u5e8f\u4e2d\u7684\u5e9f\u4ee3\u7801\uff0c\u53ef\u4ee5\u9006\u5411\u53cd\u63a8\u4ee3\u7801\u8bbe\u8ba1\u4e2d\u4e0d\u5408\u7406\u7684\u5730\u65b9\uff0c\u63d0\u9192\u8bbe\u8ba1/\u5f00\u53d1\u4eba\u5458\u7406\u6e05\u4ee3\u7801\u903b\u8f91\u5173\u7cfb\uff0c\u63d0\u5347\u4ee3\u7801\u8d28\u91cf\u3002 \u4ee3\u7801\u8986\u76d6\u7387\u9ad8\u4e0d\u80fd\u8bf4\u660e\u4ee3\u7801\u8d28\u91cf\u9ad8\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u770b\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u4f4e\uff0c\u4ee3\u7801\u8d28\u91cf\u7edd\u5bf9\u4e0d\u4f1a\u9ad8\u5230\u54ea\u91cc\u53bb\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u81ea\u6211\u5ba1\u89c6\u7684\u91cd\u8981\u5de5\u5177\u4e4b\u4e00\u3002 \u7ed3\u675f\u8bed \u5355\u5143\u6d4b\u8bd5\u7684\u8986\u76d6\u7387\u5e76\u4e0d\u53ea\u662f\u4e3a\u4e86\u53d6\u60a6\u5ba2\u6237\u6216\u8005\u7ba1\u7406\u5c42\u7684\u6570\u636e\uff0c\u5b83\u80fd\u591f\u5b9e\u5b9e\u5728\u5728\u53cd\u5e94\u9879\u76ee\u4e2d\u4ee3\u7801\u7684\u5065\u5eb7\u7a0b\u5ea6\uff0c\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7684\u6539\u5584\u4e86\u4ee3\u7801\u7684\u8d28\u91cf\uff0c\u589e\u52a0\u4e86\u6211\u4eec\u5bf9\u6240\u7f16\u5199\u4ee3\u7801\u7684\u4fe1\u5fc3\u3002 wikipedia Code coverage Coverage criteria NOTE: \u5404\u79cd\u8986\u76d6\u7684\u6307\u6807","title":"Introduction"},{"location":"2Development/Testing/Code-coverage/#code#coverage","text":"","title":"Code coverage"},{"location":"2Development/Testing/Code-coverage/#zhihu","text":"","title":"zhihu \u4ec0\u4e48\u662f\u4ee3\u7801\u8986\u76d6\u7387\uff1f"},{"location":"2Development/Testing/Code-coverage/#zhihu#100code#coverage","text":"","title":"zhihu \u5b9e\u9645\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u662f\u5426\u771f\u7684\u9700\u8981100%\u4ee3\u7801\u8986\u76d6\u7387\uff08code coverage\uff09\uff1f"},{"location":"2Development/Testing/Code-coverage/#milo#yip","text":"NOTE: 1\u3001\u4f5c\u8005\u7ed3\u5408\u81ea\u5df1\u7684\u9879\u76ee\u7ecf\u9a8c\u6765\u8c08\u7684","title":"Milo Yip\u7684\u56de\u7b54"},{"location":"2Development/Testing/Code-coverage/#thoughtworks","text":"\u628a\u6d4b\u8bd5\u8986\u76d6\u4f5c\u4e3a\u8d28\u91cf\u76ee\u6807\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u5b83\u4f5c\u4e3a\u4e00\u79cd\u53d1\u73b0\u672a\u88ab\u6d4b\u8bd5\u8986\u76d6\u7684\u4ee3\u7801\u7684\u624b\u6bb5\u3002 \u6240\u4ee5100%\u7684\u4ee3\u7801\u8986\u76d6\u7387\u8fd8\u503c\u5f97\u8ffd\u6c42\u5417? \u5f53\u7136\uff0c\u8fd9\u5e94\u8be5\u662f\u6bcf\u4e2a\u7a0b\u5e8f\u5458\u6bd5\u751f\u7684\u8ffd\u6c42\u4e4b\u4e00\uff0c\u4f46\u662f\u5982\u679c\u4ece\u9879\u76ee\u89d2\u5ea6\u8003\u8651**ROI(\u6295\u5165\u4ea7\u51fa\u6bd4) \uff0c\u5bf9\u4e8e\u9700\u8981\u5feb\u901f\u4e0a\u7ebf\u7684\u77ed\u671f\u9879\u76ee\uff0c\u9700\u8981\u6ce8\u91cd\u7684\u662f\u8ba9\u6d4b\u8bd5\u8986\u76d6\u6838\u5fc3\u529f\u80fd\u4ee3\u7801\u3002\u5982\u679c\u4f60\u7684\u9879\u76ee\u662f\u4e00\u4e2a\u957f\u671f\u9879\u76ee\uff0c\u90a3\u4e48**\u9ad8\u8986\u76d6\u7387**\u662f\u975e\u5e38\u6709\u5fc5\u8981\u7684\uff0c\u5b83\u610f\u5473\u7740**\u9ad8\u53ef\u7ef4\u62a4\u6027 \uff0c\u4ee5\u53ca**\u66f4\u5c11\u7684bug**\u3002(\u524d\u63d0\u662f\u4f60\u7684\u6d4b\u8bd5\u91c7\u7528TDD/BDD\u65b9\u5f0f\u7f16\u5199\uff0c\u6211\u89c1\u8fc7\u5c06\u6d4b\u8bd5\u4ee3\u7801\u5199\u7684\u4e00\u56e2\u7cdf\u7684\u4eba\uff0c\u770b\u7740\u4ed6\u7684\u4ee3\u7801\uff0c\u6211\u5b81\u613f\u91cd\u65b0\u5199\u4e00\u904d) NOTE: \u4e00\u3001\u5173\u4e8eTDD/BDD\uff0c\u53c2\u89c1: Test-driven development Behavior-driven development \u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u9879\u76ee\u6765\u8bf4\uff0c\u8986\u76d6\u7387\u5e94\u8be5\u8fbe\u5230\u591a\u5c11\uff1f \u5176\u5b9e\u6ca1\u6709\u9002\u7528\u4e8e\u6240\u6709\u9879\u76ee\u7684\u6570\u503c\uff0c\u6bcf\u4e2a\u9879\u76ee\u90fd\u5e94\u6709\u81ea\u5df1\u7684\u9608\u503c\uff0c\u4f46\u5171\u6027\u662f\uff0c\u6d4b\u8bd5\u5fc5\u987b\u8986\u76d6\u4e3b\u8981\u4e1a\u52a1\u573a\u666f\uff0c\u4ee3\u7801\u7684\u903b\u8f91\u5206\u652f\u4e5f\u5fc5\u987b\u5c3d\u53ef\u80fd\u7684\u8986\u76d6\u3002 \u5982\u4f55\u6539\u8fdb\u4f60\u7684\u9879\u76ee\u4ee3\u7801\u8986\u76d6\u7387\uff1f **\u9996\u5148**\u6211\u4eec\u8981\u9605\u8bfb\u548c\u7406\u89e3\u9879\u76ee\u4ee3\u7801\uff0c\u627e\u51fa\u5176\u4e2d\u9700\u8981\u6d4b\u8bd5\u5e76\u4e14\u4e0e\u4e1a\u52a1\u5f3a\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u7ed3\u5408sonar\u7b49\u4ee3\u7801\u8d28\u91cf\u7ba1\u7406\u5e73\u53f0\uff0c\u4ece\u4ee3\u7801\u7f16\u5199\u89c4\u8303\u3001\u590d\u6742\u5ea6\u3001\u91cd\u590d\u4ee3\u7801\u7b49\u65b9\u9762\u8fdb\u884c\u4ee3\u7801\u91cd\u6784\uff0c\u8fdb\u4e00\u6b65\u63d0\u9ad8\u9879\u76ee\u7684\u53ef\u7ef4\u62a4\u6027\u4e0e\u53ef\u8bfb\u6027\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\u91cd\u6784\uff0c\u91cd\u6784\u7684\u540c\u65f6\uff0c\u4f60\u9700\u8981\u66f4\u591a\u7684\u6d4b\u8bd5\u6765\u4fdd\u8bc1\u4f60\u91cd\u6784\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002 **\u5176\u6b21**\u8981\u5bf9code coverage\u8fdb\u884c\u5ea6\u91cf\u5206\u6790\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u5ea6\u91cfcode coverage\uff1f \u4e00\u822c\u6765\u8bf4\u6211\u4eec\u4ece\u4ee5\u4e0b\u56db\u4e2a\u7ef4\u5ea6\u6765\u5ea6\u91cf\uff0c\u5982\u4e0a\u56fe\u6240\u793a: \u884c\u8986\u76d6\u7387 \uff08line coverage\uff09\uff1a\u5ea6\u91cf\u88ab\u6d4b\u4ee3\u7801\u4e2d\u6bcf\u4e2a\u53ef\u6267\u884c\u8bed\u53e5\u662f\u5426\u90fd\u88ab\u6267\u884c\u5230\uff0c\u4f46\u4e0d\u5305\u62ecjava import\uff0c\u7a7a\u884c\uff0c\u6ce8\u91ca\u7b49\u3002 \u51fd\u6570\u8986\u76d6\u7387 \uff08function coverage\uff09\uff1a\u5ea6\u91cf\u88ab\u6d4b\u4ee3\u7801\u4e2d\u6bcf\u4e2a\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u5426\u90fd\u88ab\u8c03\u7528\u3002 \u5206\u652f\u8986\u76d6\u7387 \uff08branch coverage\uff09\uff1a\u5ea6\u91cf\u88ab\u6d4b\u4ee3\u7801\u4e2d\u6bcf\u4e00\u4e2a\u5224\u5b9a\u7684\u5206\u652f\u662f\u5426\u90fd\u88ab\u6d4b\u8bd5\u5230\u3002 \u8bed\u53e5\u8986\u76d6\u7387 \uff08statement coverage\uff09\uff1a\u5ea6\u91cf\u88ab\u6d4b\u4ee3\u7801\u662f\u5426\u6bcf\u4e2a\u8bed\u53e5\u90fd\u88ab\u6267\u884c\u3002 \u6240\u4ee5\u884c\u8986\u76d6\u7387\u7684\u9ad8\u4f4e\u4e0d\u80fd\u8bf4\u660e\u9879\u76ee\u7684\u597d\u574f\uff0c\u6211\u4eec\u8981\u4ece\u591a\u65b9\u9762\u8fdb\u884c\u601d\u8003\uff0c\u4e00\u822c\u6211\u4eec\u9075\u5faa\u7684\u6807\u51c6\u5e94\u662f\uff1a \u51fd\u6570\u8986\u76d6\u7387 > \u5206\u652f\u8986\u76d6\u7387 > \u8bed\u53e5\u8986\u76d6\u7387** \u3002 \u4ee3\u7801\u8986\u76d6\u7387\u6700\u91cd\u8981\u7684\u610f\u4e49\u5728\u4e8e\uff1a \u9605\u8bfb\u5206\u6790\u4e4b\u524d\u9879\u76ee\u4e2d\u672a\u8986\u76d6\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u8fdb\u800c\u53cd\u63a8\u5728\u524d\u671fQA\u4ee5\u53ca\u76f8\u5173\u6d4b\u8bd5\u4eba\u5458\u5728\u8fdb\u884c\u9ed1\u76d2\u6d4b\u8bd5\u8bbe\u8ba1\u65f6\u662f\u5426\u8003\u8651\u5145\u5206\uff0c\u6ca1\u6709\u8986\u76d6\u5230\u7684\u4ee3\u7801\u662f\u5426\u662f\u6d4b\u8bd5\u8bbe\u8ba1\u7684\u76f2\u70b9\uff0c\u4e3a\u4ec0\u4e48\u6ca1\u6709\u8003\u8651\u5230\uff1f\u662f\u9700\u6c42\u6216\u8005UX\u8bbe\u8ba1\u4e0d\u591f\u6e05\u6670\uff0c\u8fd8\u662f\u6d4b\u8bd5\u8bbe\u8ba1\u7684\u7406\u89e3\u6709\u8bef\u3002 \u68c0\u6d4b\u51fa\u7a0b\u5e8f\u4e2d\u7684\u5e9f\u4ee3\u7801\uff0c\u53ef\u4ee5\u9006\u5411\u53cd\u63a8\u4ee3\u7801\u8bbe\u8ba1\u4e2d\u4e0d\u5408\u7406\u7684\u5730\u65b9\uff0c\u63d0\u9192\u8bbe\u8ba1/\u5f00\u53d1\u4eba\u5458\u7406\u6e05\u4ee3\u7801\u903b\u8f91\u5173\u7cfb\uff0c\u63d0\u5347\u4ee3\u7801\u8d28\u91cf\u3002 \u4ee3\u7801\u8986\u76d6\u7387\u9ad8\u4e0d\u80fd\u8bf4\u660e\u4ee3\u7801\u8d28\u91cf\u9ad8\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u770b\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u4f4e\uff0c\u4ee3\u7801\u8d28\u91cf\u7edd\u5bf9\u4e0d\u4f1a\u9ad8\u5230\u54ea\u91cc\u53bb\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u81ea\u6211\u5ba1\u89c6\u7684\u91cd\u8981\u5de5\u5177\u4e4b\u4e00\u3002 \u7ed3\u675f\u8bed \u5355\u5143\u6d4b\u8bd5\u7684\u8986\u76d6\u7387\u5e76\u4e0d\u53ea\u662f\u4e3a\u4e86\u53d6\u60a6\u5ba2\u6237\u6216\u8005\u7ba1\u7406\u5c42\u7684\u6570\u636e\uff0c\u5b83\u80fd\u591f\u5b9e\u5b9e\u5728\u5728\u53cd\u5e94\u9879\u76ee\u4e2d\u4ee3\u7801\u7684\u5065\u5eb7\u7a0b\u5ea6\uff0c\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7684\u6539\u5584\u4e86\u4ee3\u7801\u7684\u8d28\u91cf\uff0c\u589e\u52a0\u4e86\u6211\u4eec\u5bf9\u6240\u7f16\u5199\u4ee3\u7801\u7684\u4fe1\u5fc3\u3002","title":"ThoughtWorks\u4e2d\u56fd"},{"location":"2Development/Testing/Code-coverage/#wikipedia#code#coverage","text":"","title":"wikipedia Code coverage"},{"location":"2Development/Testing/Code-coverage/#coverage#criteria","text":"NOTE: \u5404\u79cd\u8986\u76d6\u7684\u6307\u6807","title":"Coverage criteria"},{"location":"2Development/Testing/Fuzz-testing/","text":"Fuzz testing 1\u3001\u6a21\u7cca\u6d4b\u8bd5 wikipedia Fuzz testing","title":"Introduction"},{"location":"2Development/Testing/Fuzz-testing/#fuzz#testing","text":"1\u3001\u6a21\u7cca\u6d4b\u8bd5","title":"Fuzz testing"},{"location":"2Development/Testing/Fuzz-testing/#wikipedia#fuzz#testing","text":"","title":"wikipedia Fuzz testing"},{"location":"2Development/Testing/Fuzz-testing/google-oss-fuzz/","text":"google / oss-fuzz","title":"Introduction"},{"location":"2Development/Testing/Fuzz-testing/google-oss-fuzz/#googleoss-fuzz","text":"","title":"google/oss-fuzz"},{"location":"2Development/Testing/Smoke-testing/","text":"Smoke testing (software)","title":"Introduction"},{"location":"2Development/Testing/Smoke-testing/#smoke#testing#software","text":"","title":"Smoke testing (software)"},{"location":"2Development/Testing/Test-automation/","text":"Test automation \u81ea\u52a8\u5316\u6d4b\u8bd5\u3002 wikipedia Test automation Test automation, mostly using unit testing, is a key feature of extreme programming and agile software development , where it is known as test-driven development (TDD) or test-first development.","title":"Introduction"},{"location":"2Development/Testing/Test-automation/#test#automation","text":"\u81ea\u52a8\u5316\u6d4b\u8bd5\u3002","title":"Test automation"},{"location":"2Development/Testing/Test-automation/#wikipedia#test#automation","text":"Test automation, mostly using unit testing, is a key feature of extreme programming and agile software development , where it is known as test-driven development (TDD) or test-first development.","title":"wikipedia Test automation"},{"location":"2Development/Testing/Test-automation/Automated-test-framework/","text":"Automated test framework wikipedia Test harness NOTE: \"harness\"\u7684\u610f\u601d\u662f\"\u88c5\u914d\"\u3002","title":"Introduction"},{"location":"2Development/Testing/Test-automation/Automated-test-framework/#automated#test#framework","text":"","title":"Automated test framework"},{"location":"2Development/Testing/Test-automation/Automated-test-framework/#wikipedia#test#harness","text":"NOTE: \"harness\"\u7684\u610f\u601d\u662f\"\u88c5\u914d\"\u3002","title":"wikipedia Test harness"},{"location":"2Development/Testing/Test-automation/Test-Anything-Protocol/","text":"Test Anything Protocol \u662f\u5728\u9605\u8bfb github google / googletest \u65f6\uff0c\u5176\u4e2d\u63d0\u53ca\u4e86TAP protocol\u3002 wikipedia Test Anything Protocol The Test Anything Protocol ( TAP ) is a protocol to allow communication between unit tests and a test harness . It allows individual tests (TAP producers) to communicate test results to the testing harness in a language-agnostic way. Originally developed for unit testing of the Perl interpreter in 1987, producers and parsers are now available for many development platforms. testanything Test Anything Protocol TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness. TAP started life as part of the test harness for Perl but now has implementations in C, C++, Python, PHP, Perl, Java, JavaScript, and others.","title":"Introduction"},{"location":"2Development/Testing/Test-automation/Test-Anything-Protocol/#test#anything#protocol","text":"\u662f\u5728\u9605\u8bfb github google / googletest \u65f6\uff0c\u5176\u4e2d\u63d0\u53ca\u4e86TAP protocol\u3002","title":"Test Anything Protocol"},{"location":"2Development/Testing/Test-automation/Test-Anything-Protocol/#wikipedia#test#anything#protocol","text":"The Test Anything Protocol ( TAP ) is a protocol to allow communication between unit tests and a test harness . It allows individual tests (TAP producers) to communicate test results to the testing harness in a language-agnostic way. Originally developed for unit testing of the Perl interpreter in 1987, producers and parsers are now available for many development platforms.","title":"wikipedia Test Anything Protocol"},{"location":"2Development/Testing/Test-automation/Test-Anything-Protocol/#testanything#test#anything#protocol","text":"TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness. TAP started life as part of the test harness for Perl but now has implementations in C, C++, Python, PHP, Perl, Java, JavaScript, and others.","title":"testanything Test Anything Protocol"},{"location":"2Development/Testing/Unit-testing/","text":"Software testing test\u662f\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u73af\u3002 wikipedia Software testing Successful case \u5e94\u7528test\u7684\u975e\u5e38\u6210\u529f\u7684\u6848\u4f8b\u3002 SQLite SQLite is very carefully tested prior to every release and has a reputation for being very reliable. Most of the SQLite source code is devoted purely to testing and verification. An automated test suite runs millions and millions of test cases involving hundreds of millions of individual SQL statements and achieves 100% branch test coverage . SQLite responds gracefully to memory allocation failures and disk I/O errors. Transactions are ACID even if interrupted by system crashes or power failures. All of this is verified by the automated tests using special test harnesses which simulate system failures. \u6d4b\u8bd5\u7684**\u5168\u9762\u6027**: \u53ef\u80fd\u7684\u573a\u666f \u4ee3\u7801\u5c42: coverage \u5728 How SQLite Is Tested \u63cf\u8ff0\u4e86sqlite\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002 nlohmann / json Our class is heavily unit-tested and covers 100% of the code, including all exceptional behavior. Furthermore, we checked with Valgrind and the Clang Sanitizers that there are no memory leaks. Google OSS-Fuzz additionally runs fuzz tests against all parsers 24/7, effectively executing billions of tests so far. To maintain high quality, the project is following the Core Infrastructure Initiative (CII) best practices . wikipedia List of unit testing frameworks","title":"Introduction"},{"location":"2Development/Testing/Unit-testing/#software#testing","text":"test\u662f\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u73af\u3002","title":"Software testing"},{"location":"2Development/Testing/Unit-testing/#wikipedia#software#testing","text":"","title":"wikipedia Software testing"},{"location":"2Development/Testing/Unit-testing/#successful#case","text":"\u5e94\u7528test\u7684\u975e\u5e38\u6210\u529f\u7684\u6848\u4f8b\u3002","title":"Successful case"},{"location":"2Development/Testing/Unit-testing/#sqlite","text":"SQLite is very carefully tested prior to every release and has a reputation for being very reliable. Most of the SQLite source code is devoted purely to testing and verification. An automated test suite runs millions and millions of test cases involving hundreds of millions of individual SQL statements and achieves 100% branch test coverage . SQLite responds gracefully to memory allocation failures and disk I/O errors. Transactions are ACID even if interrupted by system crashes or power failures. All of this is verified by the automated tests using special test harnesses which simulate system failures. \u6d4b\u8bd5\u7684**\u5168\u9762\u6027**: \u53ef\u80fd\u7684\u573a\u666f \u4ee3\u7801\u5c42: coverage \u5728 How SQLite Is Tested \u63cf\u8ff0\u4e86sqlite\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002","title":"SQLite"},{"location":"2Development/Testing/Unit-testing/#nlohmannjson","text":"Our class is heavily unit-tested and covers 100% of the code, including all exceptional behavior. Furthermore, we checked with Valgrind and the Clang Sanitizers that there are no memory leaks. Google OSS-Fuzz additionally runs fuzz tests against all parsers 24/7, effectively executing billions of tests so far. To maintain high quality, the project is following the Core Infrastructure Initiative (CII) best practices .","title":"nlohmann/json"},{"location":"2Development/Testing/Unit-testing/#wikipedia#list#of#unit#testing#frameworks","text":"","title":"wikipedia List of unit testing frameworks"},{"location":"2Development/Testing/Unit-testing/Test-oracle/","text":"Test oracle wikipedia Test oracle In computing , software engineering , and software testing , a test oracle (or just oracle ) is a mechanism for determining whether a test has passed or failed.[ 1] The use of oracles involves comparing the output(s) of the system under test, for a given test-case input, to the output(s) that the oracle determines that product should have.","title":"Introduction"},{"location":"2Development/Testing/Unit-testing/Test-oracle/#test#oracle","text":"","title":"Test oracle"},{"location":"2Development/Testing/Unit-testing/Test-oracle/#wikipedia#test#oracle","text":"In computing , software engineering , and software testing , a test oracle (or just oracle ) is a mechanism for determining whether a test has passed or failed.[ 1] The use of oracles involves comparing the output(s) of the system under test, for a given test-case input, to the output(s) that the oracle determines that product should have.","title":"wikipedia Test oracle"},{"location":"2Development/Testing/Unit-testing/xUnit/","text":"xUnit \u5f88\u591aunit testing framework\u90fd\u662f\u57fa\u4e8e\u8fd9\u4e2aframework\u3002 wikipedia xUnit xUnit architecture NOTE: architecture\u8fd9\u5bf9\u4e8e\u6211\u4eec\u638c\u63e1unit testing framework\u975e\u5e38\u91cd\u8981\uff1bxUnit\u7684architecture\u662f\u975e\u5e38\u7ecf\u5178\u7684\u3002 \u5b83\u662f\u5178\u578b\u7684multiple-task model\u7684\u3002 All xUnit frameworks share the following basic component architecture, with some varied implementation details.[ 1] Test runner A test runner is an executable program that runs tests implemented using an xUnit framework and reports the test results.[ 2] Test case A test case is the most elemental class. All unit tests are inherited from here. Test fixtures NOTE: \"fixture\"\u5728\u6b64\u7684\u542b\u4e49\u662f\"\u88c5\u914d\"\uff0c\u5728\u4e0b\u9762\u4f7f\u7528\u7684\u662fcontext\u662f\uff0c\u663e\u7136context\u7684\u542b\u4e49\u662f\u66f4\u52a0\u51c6\u786e\u7684\u3002 \u4e3a\u4ec0\u4e48\"return to the original state after the tests\"\uff1f \u56e0\u4e3a\u8981\u6267\u884c\u591a\u4e2atest\uff0c\"return to the original state\"\u80fd\u591f\u4fdd\u8bc1\u540e\u7eed\u7684test\u80fd\u591f\u7ee7\u7eed\u6267\u884c\u3002 \u5728\u540e\u9762\u7684\"test execution\"\u7ae0\u8282\u5c06\u5bf9\u5b83\u6709\u66f4\u597d\u7684\u63cf\u8ff0\u3002 A test fixture (also known as a test context) is the set of preconditions or state needed to run a test. The developer should set up a known good state before the tests, and return to the original state after the tests. Test suites A test suite is a set of tests that all share the same fixture. The order of the tests shouldn't matter. Test execution The execution of an individual unit test proceeds as follows: setup (); /* First, we should prepare our 'world' to make an isolated environment for testing */ ... /* Body of test - Here we make all the tests */ ... teardown (); /* At the end, whether we succeed or fail, we should clean up our 'world' to not disturb other tests or code */ The setup() and teardown() methods serve to initialize and clean up test fixtures . NOTE: setup() teardown() Test result formatter A test runner produces results in one or more output formats. In addition to a plain, human-readable format, there is often a test result formatter that produces XML output. Assertions An assertion is a function or macro that verifies the behavior (or the state) of the unit under test. Usually an assertion expresses a logical condition that is true for results expected in a correctly running system under test (SUT). Failure of an assertion typically throws an exception , aborting the execution of the current test.","title":"Introduction"},{"location":"2Development/Testing/Unit-testing/xUnit/#xunit","text":"\u5f88\u591aunit testing framework\u90fd\u662f\u57fa\u4e8e\u8fd9\u4e2aframework\u3002","title":"xUnit"},{"location":"2Development/Testing/Unit-testing/xUnit/#wikipedia#xunit","text":"","title":"wikipedia xUnit"},{"location":"2Development/Testing/Unit-testing/xUnit/#xunit#architecture","text":"NOTE: architecture\u8fd9\u5bf9\u4e8e\u6211\u4eec\u638c\u63e1unit testing framework\u975e\u5e38\u91cd\u8981\uff1bxUnit\u7684architecture\u662f\u975e\u5e38\u7ecf\u5178\u7684\u3002 \u5b83\u662f\u5178\u578b\u7684multiple-task model\u7684\u3002 All xUnit frameworks share the following basic component architecture, with some varied implementation details.[ 1]","title":"xUnit architecture"},{"location":"2Development/Testing/Unit-testing/xUnit/#test#runner","text":"A test runner is an executable program that runs tests implemented using an xUnit framework and reports the test results.[ 2]","title":"Test runner"},{"location":"2Development/Testing/Unit-testing/xUnit/#test#case","text":"A test case is the most elemental class. All unit tests are inherited from here.","title":"Test case"},{"location":"2Development/Testing/Unit-testing/xUnit/#test#fixtures","text":"NOTE: \"fixture\"\u5728\u6b64\u7684\u542b\u4e49\u662f\"\u88c5\u914d\"\uff0c\u5728\u4e0b\u9762\u4f7f\u7528\u7684\u662fcontext\u662f\uff0c\u663e\u7136context\u7684\u542b\u4e49\u662f\u66f4\u52a0\u51c6\u786e\u7684\u3002 \u4e3a\u4ec0\u4e48\"return to the original state after the tests\"\uff1f \u56e0\u4e3a\u8981\u6267\u884c\u591a\u4e2atest\uff0c\"return to the original state\"\u80fd\u591f\u4fdd\u8bc1\u540e\u7eed\u7684test\u80fd\u591f\u7ee7\u7eed\u6267\u884c\u3002 \u5728\u540e\u9762\u7684\"test execution\"\u7ae0\u8282\u5c06\u5bf9\u5b83\u6709\u66f4\u597d\u7684\u63cf\u8ff0\u3002 A test fixture (also known as a test context) is the set of preconditions or state needed to run a test. The developer should set up a known good state before the tests, and return to the original state after the tests.","title":"Test fixtures"},{"location":"2Development/Testing/Unit-testing/xUnit/#test#suites","text":"A test suite is a set of tests that all share the same fixture. The order of the tests shouldn't matter.","title":"Test suites"},{"location":"2Development/Testing/Unit-testing/xUnit/#test#execution","text":"The execution of an individual unit test proceeds as follows: setup (); /* First, we should prepare our 'world' to make an isolated environment for testing */ ... /* Body of test - Here we make all the tests */ ... teardown (); /* At the end, whether we succeed or fail, we should clean up our 'world' to not disturb other tests or code */ The setup() and teardown() methods serve to initialize and clean up test fixtures . NOTE: setup() teardown()","title":"Test execution"},{"location":"2Development/Testing/Unit-testing/xUnit/#test#result#formatter","text":"A test runner produces results in one or more output formats. In addition to a plain, human-readable format, there is often a test result formatter that produces XML output.","title":"Test result formatter"},{"location":"2Development/Testing/Unit-testing/xUnit/#assertions","text":"An assertion is a function or macro that verifies the behavior (or the state) of the unit under test. Usually an assertion expresses a logical condition that is true for results expected in a correctly running system under test (SUT). Failure of an assertion typically throws an exception , aborting the execution of the current test.","title":"Assertions"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/","text":"\u5982\u4f55\u7cfb\u7edf\u5730\u63d0\u5347\u8f6f\u4ef6\u8d28\u91cf \u5982\u4f55\u5feb\u901f\u5730\u4ea4\u4ed8\u9ad8\u8d28\u91cf\u7684\u8f6f\u4ef6\uff1f\u5982\u4f55\u7cfb\u7edf\u7684\u63d0\u5347\u8f6f\u4ef6\u8d28\u91cf\uff1f\u8003\u8651: 1\u3001\u5f00\u53d1\u4eba\u5458\u7d20\u8d28 2\u3001\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b(\u8f6f\u4ef6\u5de5\u7a0b\u9886\u57df\u7684\u6982\u5ff5\uff0c\"software development process\") 3\u3001\u5de5\u5177 4\u3001...... \u7ecf\u9a8c\u4e0e\u53cd\u601d 1\u3001programmer\u8fd8\u9700\u8981\u662f\u4e00\u4e2aQA(\u8d28\u4fdd) 2\u3001\u6d4b\u8bd5\u6ca1\u6709\u63d0\u7f3a\u9677\u5e76\u4e0d\u4ee3\u8868\u8f6f\u4ef6\u8d28\u91cf\u597d\uff0c\u6ca1\u6709bug 3\u3001\u4e00\u4e9b\u9690\u85cf\u7684bug\uff0c\u4e00\u65e6\u7206\u53d1\uff0c\u4e0d\u4ec5\u96be\u4ee5\u6392\u9664\uff0c\u540e\u679c\u53ef\u80fd\u975e\u5e38\u4e25\u91cd\uff08\u6bd4\u5982C/C++ integer overflow undefined behavior\uff0c\u5bfc\u81f4\u7684\u95ee\u9898\u975e\u5e38\u8be1\u5f02\uff0c\u6392\u67e5\u8d77\u6765\u975e\u5e38\u56f0\u96be\uff0c\u5982\u679c\u7ecf\u9a8c\u4e0d\u4e30\u5bcc\uff0c\u5219\u6839\u672c\u65e0\u4ece\u67e5\u8d77\uff0c\u9700\u8981\u8003\u8651\u5982\u4f55\u7cfb\u7edf\u6027\u5730\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\uff09 4\u3001\u9700\u8981\u501f\u52a9tool\u6765\u5206\u6790\u7a0b\u5e8f\uff0c\u627e\u51fa\u5e38\u89c1bug NOTE: 1\u3001tool\u975e\u5e38\u591a\uff0c\u5408\u7406\u7684\u4f7f\u7528tool\uff0c\u80fd\u591f\u53d1\u73b0\u6f5c\u5728\u7684bug 5\u3001\u89c4\u8303\uff0c\u907f\u514d\u5e38\u89c1bug \u6848\u4f8b: nlohmann / json NOTE: \u4e00\u300125K star\uff0c\u8bf4\u660e\u5b83\u6bd4\u8f83\u6d41\u884c\u3001\u6210\u719f \u4e8c\u3001\u5b83\u91c7\u7528\u7684\u8f6f\u4ef6\u5de5\u7a0b\u65b9\u6cd5\u662f\u6bd4\u8f83\u5178\u578b\u7684\uff0c\u503c\u5f97\u501f\u9274\uff1b Serious testing. Our class is heavily unit-tested and covers 100% of the code, including all exceptional behavior. Furthermore, we checked with Valgrind and the Clang Sanitizers that there are no memory leaks. Google OSS-Fuzz additionally runs fuzz tests against all parsers 24/7, effectively executing billions of tests so far. To maintain high quality , the project is following the Core Infrastructure Initiative (CII) best practices . NOTE: 1\u3001\u5b83\u7684\u505a\u6cd5\u662f\u975e\u5e38\u503c\u5f97\u501f\u9274\u7684 2\u3001\u540e\u9762\u4f1a\u5bf9 Core Infrastructure Initiative (CII) best practices \u8fdb\u884c\u8bf4\u660e build NOTE: 1\u3001\u81ea\u52a8\u5316\u96c6\u6210\u3001CI (\u6211\u4eec\u6709) \u4ee3\u7801\u8986\u76d6\u7387 NOTE: 1\u3001\u8fbe\u5230\u4e86100%\u7684\u8986\u76d6\u7387 code quality \u5206\u6790\u3001\u81ea\u52a8\u5316code review NOTE: 1\u3001\u4f7f\u7528\u4e86\u5f88\u591acode analysis tool https://www.codacy.com/product https://lgtm.com/ https://bugs.chromium.org/p/oss-fuzz/issues/list \u5728\u7ebf\u4f7f\u7528 \u6587\u6863 CII best practice \u6700\u4f73\u5b9e\u8df5: CII Best Practices Badge Program The Linux Foundation (LF) Core Infrastructure Initiative (CII) Best Practices badge(\u5fbd\u7ae0) is a way for Free/Libre and Open Source Software (FLOSS) projects to show that they follow best practices. FLOSS Best Practices Criteria (Passing Badge) NOTE: \u8be6\u7ec6\u7684\u6807\u51c6\u3002\u9700\u8981\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd Change Control NOTE: \u5176\u5b9e\u5c31\u662f\u7248\u672c\u63a7\u5236 Quality Working build system Automated test suite New functionality testing Warning flags Security NOTE: \u6682\u65f6\u65e0\u9700\u8003\u8651 Analysis Static code analysis Dynamic code analysis \u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b: TDD && BDD Test-driven Development(TDD) baike TDD\uff08\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(Test-Driven Development)\uff09# TDD\u539f\u5219 1\u3001\u72ec\u7acb\u6d4b\u8bd5\uff1a \u4e0d\u540c\u4ee3\u7801\u7684\u6d4b\u8bd5\u5e94\u8be5\u76f8\u4e92\u72ec\u7acb\uff0c\u4e00\u4e2a\u7c7b\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u7c7b\uff08\u5bf9\u4e8eC\u4ee3\u7801\u6216C++\u5168\u5c40\u51fd\u6570\uff0c\u5219\u4e00\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff09\uff0c\u4e00\u4e2a\u51fd\u6570\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\u3002 \u7528\u4f8b\u4e5f\u5e94\u5404\u81ea\u72ec\u7acb\uff0c\u6bcf\u4e2a\u7528\u4f8b\u4e0d\u80fd\u4f7f\u7528\u5176\u4ed6\u7528\u4f8b\u7684\u7ed3\u679c\u6570\u636e\uff0c\u7ed3\u679c\u4e5f\u4e0d\u80fd\u4f9d\u8d56\u4e8e\u7528\u4f8b\u6267\u884c\u987a\u5e8f\u3002 \u4e00\u4e2a\u89d2\u8272\uff1a\u5f00\u53d1\u8fc7\u7a0b\u5305\u542b\u591a\u79cd\u5de5\u4f5c\uff0c\u5982\uff1a\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u3001\u7f16\u5199\u4ea7\u54c1\u4ee3\u7801\u3001\u4ee3\u7801\u91cd\u6784\u7b49\u3002\u505a\u4e0d\u540c\u7684\u5de5\u4f5c\u65f6\uff0c\u5e94\u4e13\u6ce8\u4e8e\u5f53\u524d\u7684\u89d2\u8272\uff0c\u4e0d\u8981\u8fc7\u591a\u8003\u8651\u5176\u4ed6\u65b9\u9762\u7684\u7ec6\u8282\u3002 \u4e0d\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u8bdd\u7684\u542b\u4e49 2\u3001\u6d4b\u8bd5\u5217\u8868\uff1a \u4ee3\u7801\u7684\u529f\u80fd\u70b9\u53ef\u80fd\u5f88\u591a\uff0c\u5e76\u4e14\u9700\u6c42\u53ef\u80fd\u662f\u9646\u7eed\u51fa\u73b0\u7684\uff0c\u4efb\u4f55\u9636\u6bb5\u60f3\u6dfb\u52a0\u529f\u80fd\u65f6\uff0c\u5e94\u628a\u76f8\u5173\u529f\u80fd\u70b9\u52a0\u5230\u6d4b\u8bd5\u5217\u8868\u4e2d\uff0c\u7136\u540e\u624d\u80fd\u7ee7\u7eed\u624b\u5934\u5de5\u4f5c\uff0c\u907f\u514d\u758f\u6f0f\u3002 3\u3001\u6d4b\u8bd5\u9a71\u52a8\uff1a \u5373\u5229\u7528\u6d4b\u8bd5\u6765\u9a71\u52a8\u5f00\u53d1\uff0c\u662fTDD\u7684\u6838\u5fc3\u3002\u8981\u5b9e\u73b0\u67d0\u4e2a\u529f\u80fd\uff0c\u8981\u7f16\u5199\u67d0\u4e2a\u7c7b\u6216\u67d0\u4e2a\u51fd\u6570\uff0c\u5e94\u9996\u5148\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\uff0c\u660e\u786e\u8fd9\u4e2a\u7c7b\u3001\u8fd9\u4e2a \u51fd\u6570 \u5982\u4f55\u4f7f\u7528\uff0c\u5982\u4f55\u6d4b\u8bd5\uff0c\u7136\u540e\u5728\u5bf9\u5176\u8fdb\u884c\u8bbe\u8ba1\u3001\u7f16\u7801\u3002 4\u3001\u5148\u5199\u65ad\u8a00\uff1a \u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u65f6\uff0c\u5e94\u8be5\u9996\u5148\u7f16\u5199\u5224\u65ad\u4ee3\u7801\u529f\u80fd\u7684\u65ad\u8a00\u8bed\u53e5\uff0c\u7136\u540e\u7f16\u5199\u5fc5\u8981\u7684\u8f85\u52a9\u8bed\u53e5\u3002 5\u3001\u53ef\u6d4b\u8bd5\u6027\uff1a \u4ea7\u54c1\u4ee3\u7801\u8bbe\u8ba1\u3001\u5f00\u53d1\u65f6\u7684\u5e94\u5c3d\u53ef\u80fd\u63d0\u9ad8\u53ef\u6d4b\u8bd5\u6027\u3002\u6bcf\u4e2a\u4ee3\u7801\u5355\u5143\u7684\u529f\u80fd\u5e94\u8be5\u6bd4\u8f83\u5355\u7eaf\uff0c\u201c\u5404\u5bb6\u81ea\u626b\u95e8\u524d\u96ea\u201d\uff0c\u6bcf\u4e2a\u7c7b\u3001\u6bcf\u4e2a\u51fd\u6570\u5e94\u8be5\u53ea\u505a\u5b83\u8be5\u505a\u7684\u4e8b\uff0c\u4e0d\u8981\u5f04\u6210\u5927\u6742\u70e9( single responsibility principle )\u3002\u5c24\u5176\u662f\u589e\u52a0\u65b0\u529f\u80fd\u65f6\uff0c\u4e0d\u8981\u4e3a\u4e86\u56fe\u4e00\u65f6\u4e4b\u4fbf\uff0c\u968f\u4fbf\u5728\u539f\u6709\u4ee3\u7801\u4e2d\u6dfb\u52a0\u529f\u80fd\uff0c\u5bf9\u4e8eC++\u7f16\u7a0b\uff0c\u5e94\u591a\u8003\u8651\u4f7f\u7528\u5b50\u7c7b\u3001\u7ee7\u627f\u3001\u91cd\u8f7d\u7b49OO\u65b9\u6cd5( \u5c01\u88c5 )\u3002 NOTE: \u8fd9\u6bb5\u603b\u7ed3\u5730\u4e0d\u9519 6\u3001\u53ca\u65f6\u91cd\u6784\uff1a \u5bf9\u7ed3\u6784\u4e0d\u5408\u7406\uff0c\u91cd\u590d\u7b49\u201c\u5473\u9053\u201d\u4e0d\u597d\u7684\u4ee3\u7801\uff0c\u5728\u6d4b\u8bd5\u901a\u8fc7\u540e\uff0c\u5e94\u53ca\u65f6\u8fdb\u884c\u91cd\u6784\u3002 7\u3001\u5c0f\u6b65\u524d\u8fdb\uff1a \u8f6f\u4ef6\u5f00\u53d1\u662f\u590d\u6742\u6027\u975e\u5e38\u9ad8\u7684\u5de5\u4f5c\uff0c\u5c0f\u6b65\u524d\u8fdb\u662f\u964d\u4f4e\u590d\u6742\u6027\u7684\u597d\u529e\u6cd5\u3002 \u77e5\u4e4e TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f - \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54 \u8fd9\u5bf9\u4e8e**\u5355\u5143\u6d4b\u8bd5**\u4e0e\u5f00\u53d1\u662f\u5f88\u6709\u7528\u7684\u4e00\u79cd\u5b9e\u8df5\u3002\u56e0\u4e3aTDD\u662f\u8981\u6c42\u5728\u5199\u4ee3\u7801\u4e4b\u524d\u5c31\u8981\u60f3\u597d\u600e\u4e48\u6d4b\uff0c\u6d4b\u4ec0\u4e48\uff0c\u8fd9\u89e3\u51b3\u4e86**\u53ef\u6d4b\u6027**\u4f4e\u7684\u95ee\u9898\u3002\u53e6\u5916\uff0cTDD\u8fd8\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684**\u6d4b\u8bd5\u8986\u76d6\u7387**\uff0c\u4ee4bug\u5728**\u7f16\u7801\u9636\u6bb5**\u5c31\u80fd\u88ab\u53d1\u73b0\u3002\u51cf\u5c11\u4e0a\u7ebf\u540e\u53d1\u73b0\u95ee\u9898\uff0c\u4fee\u590d\u95ee\u9898\u7684\u6307\u6570\u7ea7\u589e\u957f\u6210\u672c\u3002 NOTE: \u975e\u5e38\u597d\u7684\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u4f7f\u7528TDD\u3002 wikipedia Test-driven Development NOTE: \u975e\u5e38\u6743\u5a01 Test-driven development (TDD) is a software development process relying on software requirements being converted to test cases before software is fully developed, and tracking all software development by repeatedly testing the software against all test cases. This is opposed to software being developed first and test cases created later. \u601d\u8003 \u4e00\u3001C++\u4e2d\uff0c\u5982\u4f55\u9700\u8981\u7f16\u5199\u65b9\u4fbf\u6d4b\u8bd5\u7684\u7a0b\u5e8f\uff1f 1\u3001header only library\uff0cinclude what you need\u3002 2\u3001\u5c01\u88c5\u3001OOP Behavior-driven development(BDD) Wikipedia Behavior-driven development In software engineering , behavior-driven development ( BDD ) is an agile software development process that encourages collaboration among developers, quality assurance testers, and customer representatives in a software project. NOTE: \u4e00\u3001developers, quality assurance testers, customer representatives \u4e00\u540c\u8fdb\u884c\u534f\u4f5c It encourages teams to use conversation and concrete examples to formalize a shared understanding of how the application should behave.[ 4] It emerged from test-driven development (TDD). NOTE: \u6e90\u81eaTDD\uff0c\u5f25\u8865\u5176\u4e0d\u8db3 \u77e5\u4e4e TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f - \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54 BDD\uff08 Behaviour-Driven Development) \u4ed6\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u81ea\u7136\u8bed\u8a00\u6309\u7167\u4e00\u4e9b\u7b80\u5355\u8bed\u6cd5\u7ec4\u7ec7\u8d77\u6765\uff0c\u4ee3\u7801\u5c06\u4f1a\u975e\u5e38\u5bb9\u6613\u89e3\u91ca\u4e0e\u5904\u7406\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u975e\u6280\u672f\u4eba\u5458\u3001\u5ba2\u6237\u53ef\u4ee5\u53c2\u4e0e\u5230\u9700\u6c42\u7684\u786e\u8ba4\u4e0e\u9a8c\u6536\u5f53\u4e2d\u3002 \u6211\u4eec\u770b\u4e00\u4e0b\u4e24\u4e2a\u4f8b\u5b50 Scenario: Refunded items should be returned to stock Given a customer bought a black sweater from me and I have three black sweaters left in stock. When he returns the sweater for a refund then I should have four black sweaters in stock. \u573a\u666f\uff1a \u5fae\u4fe1\u804a\u5929 \u5047\u5982 \u624b\u673a\u5b89\u88c5\u4e86\u5fae\u4fe1 \u5f53 \u7528\u6237\u6253\u5f00\u5fae\u4fe1 \u90a3\u4e48 \u624b\u673a\u4f1a\u51fa\u73b0\u7528\u6237\u7684\u5fae\u4fe1\u804a\u5929\u754c\u9762 \u4ee5\u4e0a\u5c31\u662fBDD\u4f7f\u7528\u7684\u53eb\u505aGherkin\u7684\u8bed\u8a00\uff0c\u5b83\u7684\u7406\u5ff5\u662f\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u6765\u63cf\u8ff0\u529f\u80fd\uff0c\u800c\u4e14\u5f3a\u8c03\u7684\u662f\u4f7f\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\u9700\u6c42\u529f\u80fd\u3002\u662f\u4e0d\u662f\u8ddf\u654f\u6377\u5f00\u53d1\u4e2d\u7684\u7528\u6237\u6545\u4e8b(User Story)\u5f88\u50cf\uff1f\u55ef\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u4e00\u4e2a\u5988\u751f\u7684\u3002 \u5176\u5b9e\u53ea\u8981\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u654f\u6377\u5ba3\u8a00\uff0c\u5c31\u4f1a\u53d1\u73b0\uff0c\u903c\u5f1f\u5f1f\u5e72\u7684\u4e8b\u5c31\u662f\u89e3\u51b3\u4e2a\u4f53\u4e4b\u95f4\u4e92\u52a8\u4e0e\u5ba2\u6237\u534f\u4f5c\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002 BDD\u7684\u9700\u6c42\u7814\u8ba8\u4f1a(Specification Workshops) \u90a3\u4e48\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u79cd\u8bed\u8a00\uff0c\u628a\u9700\u6c42\u4e00\u4e2a\u4e2a\u7528\u4f8b\u5b50\u5217\u51fa\u6765\uff0c\u5ba2\u6237/\u4ea7\u54c1\u3001\u5f00\u53d1\u3001\u6d4b\u8bd5\u4e09\u65b9\u4e00\u8d77\u8ba8\u8bba\u4e0e\u786e\u8ba4\u3002 NOTE: \u4e09\u65b9\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u534f\u4f5c\uff0c\u4f7f\u7528\u4e00\u79cd\u4e09\u65b9\u90fd\u80fd\u591f\u7406\u89e3\u7684DSL baike \u884c\u4e3a\u9a71\u52a8\u5f00\u53d1 software Cucumber \u8fd9\u4e2a\u8f6f\u4ef6\u5c06BDD\u4ece\u7406\u8bba\u5e26\u5165\u4e86\u5de5\u7a0b\u5b9e\u8df5\u4e2d\u3002 See also zhihu TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f Code coverage What is code coverage zhihu \u4ec0\u4e48\u662f\u4ee3\u7801\u8986\u76d6\u7387\uff1f \u662f\u8f6f\u4ef6\u6d4b\u8bd5\u4e2d\u7684\u4e00\u79cd\u5ea6\u91cf\uff0c\u63cf\u8ff0\u7a0b\u5e8f\u4e2d\u6e90\u4ee3\u7801\u88ab\u6d4b\u8bd5\u7684\u6bd4\u4f8b\u548c\u7a0b\u5ea6\uff0c\u6240\u5f97\u6bd4\u4f8b\u79f0\u4e3a**\u4ee3\u7801\u8986\u76d6\u7387**\u3002\u5728\u505a**\u5355\u5143\u6d4b\u8bd5**\u65f6\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u5e38\u5e38\u88ab\u62ff\u6765\u4f5c\u4e3a\u8861\u91cf\u6d4b\u8bd5\u597d\u574f\u7684\u6307\u6807\uff0c\u751a\u81f3\uff0c\u7528\u4ee3\u7801\u8986\u76d6\u7387\u6765\u8003\u6838\u6d4b\u8bd5\u4efb\u52a1\u5b8c\u6210\u60c5\u51b5\uff0c\u6bd4\u5982\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u5fc5\u987b\u8fbe\u523080\uff05\u6216 90\uff05\u3002 zhihu \u5b9e\u9645\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u662f\u5426\u771f\u7684\u9700\u8981100%\u4ee3\u7801\u8986\u76d6\u7387\uff08code coverage\uff09\uff1f # ThoughtWorks\u4e2d\u56fd \u4ee3\u7801\u8986\u76d6\u7387\u9ad8\u4e0d\u80fd\u8bf4\u660e\u4ee3\u7801\u8d28\u91cf\u9ad8\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u770b\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u4f4e\uff0c\u4ee3\u7801\u8d28\u91cf\u7edd\u5bf9\u4e0d\u4f1a\u9ad8\u5230\u54ea\u91cc\u53bb\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u81ea\u6211\u5ba1\u89c6\u7684\u91cd\u8981\u5de5\u5177\u4e4b\u4e00\u3002 \u8bed\u53e5\u8986\u76d6\u3001\u5224\u5b9a\u8986\u76d6\u3001\u6761\u4ef6\u8986\u76d6\u3001\u6761\u4ef6\u5224\u5b9a\u7ec4\u5408\u8986\u76d6\u3001\u591a\u6761\u4ef6\u8986\u76d6\u548c\u8def\u5f84\u8986\u76d6 NOTE: 1\u3001\u9700\u8981\u4ecb\u7ecd\u4e0a\u8ff0\u5404\u79cd\u6307\u6807 Code coverage\u7684\u610f\u4e49 \u4ee3\u7801\u8986\u76d6\u7387\u9ad8\u4e0d\u80fd\u8bf4\u660e\u4ee3\u7801\u8d28\u91cf\u9ad8\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u770b\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u4f4e\uff0c\u4ee3\u7801\u8d28\u91cf\u7edd\u5bf9\u4e0d\u4f1a\u9ad8\u5230\u54ea\u91cc\u53bb\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u81ea\u6211\u5ba1\u89c6\u7684\u91cd\u8981\u5de5\u5177\u4e4b\u4e00\u3002 \u91cf\u5316\u7684\u65b9\u5f0f\u3001\u6bd4\u8f83\u79d1\u5b66\uff1b \u5982\u4f55\u751f\u6210\u4ee3\u7801\u8986\u76d6\u7387\uff1f 1\u3001rdc.hundsun \u5982\u4f55\u7528Gcov\u4f18\u96c5\u5730\u5b9e\u73b0\u4ee3\u7801\u8986\u76d6\u7387\u53ef\u89c6\u5316\u62a5\u544a? 2\u3001csdn Linux\u4e0bc/c++\u9879\u76ee\u4ee3\u7801\u8986\u76d6\u7387\u7684\u4ea7\u751f\u65b9\u6cd5 3\u3001csdn \u6e29\u6545\u800c\u77e5\u65b0\uff1agtest\u5355\u5143\u6d4b\u8bd5\u5de5\u5177\u548clcov\u8986\u76d6\u7387\u7edf\u8ba1\u5de5\u5177\u7684\u7ed3\u5408\u4f7f\u7528 \u6ce8\u610f: 1\u3001\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u7684\u7f16\u8bd1 \u5355\u5143\u6d4b\u8bd5 \u5de5\u5177 \u4f18\u52bf Catch2 header only library\u3001\u65e0\u5916\u90e8\u4f9d\u8d56\u3001\u591a\u8303\u5f0f\u6d4b\u8bd5\u6846\u67b6\uff0c\u53ef\u7528\u4e8e\u5355\u5143\u6d4b\u8bd5\u3001TDD \u548c BDD Googletest \u529f\u80fd\u5168\u9762\uff0c\u6bd4\u8f83\u6d41\u884c xUnit framework \u57fa\u672c\u4e0a\u6240\u6709\u7684\u5355\u5143\u6d4b\u8bd5\u5e93(\u5305\u62ecJUnit\u3001PyUnit)\uff0c\u90fd\u662f\u53c2\u8003\u7684\u8fd9\u4e2a\u6846\u67b6\uff0c\u4e86\u89e3\u4e86\u8fd9\u4e2a\u6846\u67b6\uff0c\u57fa\u672c\u4e0a\u5c31\u5165\u95e8\u4e86\u6240\u6709\u7684\u5355\u5143\u6d4b\u8bd5\u5e93\u3002 wikipedia xUnit # xUnit architecture NOTE: architecture\u8fd9\u5bf9\u4e8e\u6211\u4eec\u638c\u63e1unit testing framework\u975e\u5e38\u91cd\u8981\uff1bxUnit\u7684architecture\u662f\u975e\u5e38\u7ecf\u5178\u7684\u3002 All xUnit frameworks share the following basic component architecture, with some varied implementation details.[ 1] Test runner A test runner is an executable program that runs tests implemented using an xUnit framework and reports the test results.[ 2] Test case A test case is the most elemental class. All unit tests are inherited from here. Test fixtures NOTE: \"fixture\"\u5728\u6b64\u7684\u542b\u4e49\u662f\"\u88c5\u914d\"\uff0c\u5728\u4e0b\u9762\u4f7f\u7528\u7684\u662fcontext\uff0c\u663e\u7136context\u7684\u542b\u4e49\u662f\u66f4\u52a0\u51c6\u786e\u7684\u3002 \u4e3a\u4ec0\u4e48\"return to the original state after the tests\"\uff1f \u56e0\u4e3a\u8981\u6267\u884c\u591a\u4e2atest\uff0c\"return to the original state\"\u80fd\u591f\u4fdd\u8bc1\u540e\u7eed\u7684test\u80fd\u591f\u7ee7\u7eed\u6267\u884c\u3002 \u5728\u540e\u9762\u7684\"test execution\"\u7ae0\u8282\u5c06\u5bf9\u5b83\u6709\u66f4\u597d\u7684\u63cf\u8ff0\u3002 A test fixture (also known as a test context) is the set of preconditions or state needed to run a test. The developer should set up a known good state before the tests, and return to the original state after the tests. Test suites A test suite is a set of tests that all share the same fixture. The order of the tests shouldn't matter. Test execution The execution of an individual unit test proceeds as follows: setup (); /* First, we should prepare our 'world' to make an isolated environment for testing */ ... /* Body of test - Here we make all the tests */ ... teardown (); /* At the end, whether we succeed or fail, we should clean up our 'world' to not disturb other tests or code */ The setup() and teardown() methods serve to initialize and clean up test fixtures . NOTE: setup() teardown() Test result formatter A test runner produces results in one or more output formats. In addition to a plain, human-readable format, there is often a test result formatter that produces XML output. Assertions An assertion is a function or macro that verifies the behavior (or the state) of the unit under test. Usually an assertion expresses a logical condition that is true for results expected in a correctly running system under test (SUT). Failure of an assertion typically throws an exception , aborting the execution of the current test. Googletest http://google.github.io/googletest/ \u5728\u5176\u5b98\u7f51\u4e0a\uff0c\u6709\u8be6\u7ec6\u7684\u6587\u6863\u8bf4\u660e\u3002 Googletest Primer Basic Concepts NOTE: \u7b80\u5355\u4ecb\u7ecd\u8fd9\u4e9b\u6982\u5ff5\uff0c\u548cxUnit\u5bf9\u5e94 \u6982\u5ff5 \u89e3\u91ca assertions Assertions Reference Tests test suite test fixture test program Assertions ASSERT_* versions generate fatal failures when they fail, and abort the current function . EXPECT_* versions generate nonfatal failures, which don\u2019t abort the current function. ASSERT_EQ ( x . size (), y . size ()) << \"Vectors x and y are of unequal length\" ; for ( int i = 0 ; i < x . size (); ++ i ) { EXPECT_EQ ( x [ i ], y [ i ]) << \"Vectors x and y differ at index \" << i ; } Simple Tests \u4e00\u4e2a*test*\u7684\u57fa\u672c\u683c\u5f0f TEST ( TestSuiteName , TestName ) { ... test body ... } For example, let\u2019s take a simple integer function: int Factorial ( int n ); // Returns the factorial of n A test suite for this function might look like: // Tests factorial of 0. TEST ( FactorialTest , HandlesZeroInput ) { EXPECT_EQ ( Factorial ( 0 ), 1 ); } // Tests factorial of positive numbers. TEST ( FactorialTest , HandlesPositiveInput ) { EXPECT_EQ ( Factorial ( 1 ), 1 ); EXPECT_EQ ( Factorial ( 2 ), 2 ); EXPECT_EQ ( Factorial ( 3 ), 6 ); EXPECT_EQ ( Factorial ( 8 ), 40320 ); } googletest groups the test results by test suites, so logically related tests should be in the same test suite; Test Fixtures: Using the Same Data Configuration for Multiple Tests If you find yourself writing two or more tests that operate on similar data, you can use a test fixture . This allows you to reuse the same configuration of objects for several different tests. NOTE: \u591a\u4e2atest\u4f7f\u7528\u76f8\u540c\u7684\"Data Configuration\" TEST_F ( TestFixtureName , TestName ) { ... test body ... } As an example, let\u2019s write tests for a FIFO queue class named Queue , which has the following interface: template < typename E > // E is the element type. class Queue { public : Queue (); void Enqueue ( const E & element ); E * Dequeue (); // Returns NULL if the queue is empty. size_t size () const ; ... }; class QueueTest : public :: testing :: Test { protected : void SetUp () override { q1_ . Enqueue ( 1 ); q2_ . Enqueue ( 2 ); q2_ . Enqueue ( 3 ); } // void TearDown() override {} Queue < int > q0_ ; Queue < int > q1_ ; Queue < int > q2_ ; }; TEST_F ( QueueTest , IsEmptyInitially ) { EXPECT_EQ ( q0_ . size (), 0 ); } TEST_F ( QueueTest , DequeueWorks ) { int * n = q0_ . Dequeue (); EXPECT_EQ ( n , nullptr ); n = q1_ . Dequeue (); ASSERT_NE ( n , nullptr ); EXPECT_EQ ( * n , 1 ); EXPECT_EQ ( q1_ . size (), 0 ); delete n ; n = q2_ . Dequeue (); ASSERT_NE ( n , nullptr ); EXPECT_EQ ( * n , 2 ); EXPECT_EQ ( q2_ . size (), 1 ); delete n ; } When these tests run, the following happens: googletest constructs a QueueTest object (let\u2019s call it t1 ). t1.SetUp() initializes t1 . The first test ( IsEmptyInitially ) runs on t1 . t1.TearDown() cleans up after the test finishes. t1 is destructed. The above steps are repeated on another QueueTest object, this time running the DequeueWorks test. Invoking the Tests #include \"this/package/foo.h\" #include \"gtest/gtest.h\" namespace my { namespace project { namespace { // The fixture for testing class Foo. class FooTest : public :: testing :: Test { protected : // You can remove any or all of the following functions if their bodies would // be empty. FooTest () { // You can do set-up work for each test here. } ~ FooTest () override { // You can do clean-up work that doesn't throw exceptions here. } // If the constructor and destructor are not enough for setting up // and cleaning up each test, you can define the following methods: void SetUp () override { // Code here will be called immediately after the constructor (right // before each test). } void TearDown () override { // Code here will be called immediately after each test (right // before the destructor). } // Class members declared here can be used by all tests in the test suite // for Foo. }; // Tests that the Foo::Bar() method does Abc. TEST_F ( FooTest , MethodBarDoesAbc ) { const std :: string input_filepath = \"this/package/testdata/myinputfile.dat\" ; const std :: string output_filepath = \"this/package/testdata/myoutputfile.dat\" ; Foo f ; EXPECT_EQ ( f . Bar ( input_filepath , output_filepath ), 0 ); } // Tests that Foo does Xyz. TEST_F ( FooTest , DoesXyz ) { // Exercises the Xyz feature of Foo. } } // namespace } // namespace project } // namespace my int main ( int argc , char ** argv ) { :: testing :: InitGoogleTest ( & argc , argv ); return RUN_ALL_TESTS (); } Advanced googletest Topics This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests. More Assertions NOTE: \u76f4\u63a5\u770b Assertions Reference Teaching googletest How to Print Your Values NOTE: overload << \u6765\u8ba9\u8f93\u51fa\u66f4\u52a0\u53cb\u597d #include <ostream> namespace foo { class Bar { // We want googletest to be able to print instances of this. ... // Create a free inline friend function. friend std :: ostream & operator << ( std :: ostream & os , const Bar & bar ) { return os << bar . DebugString (); // whatever needed to print bar to os } }; // If you can't declare the function in the class it's important that the // << operator is defined in the SAME namespace that defines Bar. C++'s look-up // rules rely on that. std :: ostream & operator << ( std :: ostream & os , const Bar & bar ) { return os << bar . DebugString (); // whatever needed to print bar to os } } // namespace foo Death Tests Sharing Resources Between Tests in the Same Test Suite Global Set-Up and Tear-Down Value-Parameterized Tests Testing Private Code Extending googletest by Handling Test Events Sanitizer Integration NOTE: \u8fd9\u662f\u7b26\u5408\u6700\u4f73\u5b9e\u8df5\u7684 googletest Assertions Reference All assertion macros support streaming a custom failure message into them with the << operator, for example: EXPECT_TRUE ( my_condition ) << \"My condition is not true\" ; Explicit Success and Failure switch ( expression ) { case 1 : ... some checks ... case 2 : ... some other checks ... default : FAIL () << \"We shouldn't get here.\" ; } Generalized Assertion The following assertion allows matchers to be used to verify values. NOTE: \u9700\u8981\u4f7f\u7528\u5230 matcher #include \"gmock/gmock.h\" using :: testing :: AllOf ; using :: testing :: Gt ; using :: testing :: Lt ; using :: testing :: MatchesRegex ; using :: testing :: StartsWith ; ... EXPECT_THAT ( value1 , StartsWith ( \"Hello\" )); EXPECT_THAT ( value2 , MatchesRegex ( \"Line \\\\ d+\" )); ASSERT_THAT ( value3 , AllOf ( Gt ( 5 ), Lt ( 10 ))); Boolean Conditions EXPECT_TRUE(condition) ASSERT_TRUE(condition) Verifies that condition is true. EXPECT_FALSE(condition) ASSERT_FALSE(condition) Verifies that condition is false. Binary Comparison EXPECT_NE EXPECT_EQ(val1,val2) ASSERT_EQ(val1,val2) Verifies that val1 == val2 . EXPECT_LT Verifies that val1 < val2 . String Comparison Floating-Point Comparison Exception Assertions The following assertions verify that a piece of code throws, or does not throw, an exception. Usage requires exceptions to be enabled in the build environment. EXPECT_NO_THROW ({ int n = 5 ; DoSomething ( & n ); }); Death Assertions The following assertions verify that a piece of code causes the process to terminate. For context, see Death Tests . googletest Matchers Reference NOTE: \u5176\u5b9e\u76f8\u5f53\u4e8eoverload == Macro Description EXPECT_THAT(actual_value, matcher) Asserts that actual_value matches matcher . ASSERT_THAT(actual_value, matcher) The same as EXPECT_THAT(actual_value, matcher) , except that it generates a fatal failure. \u6848\u4f8b: \u4e0b\u9762\u7ed3\u5408\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u8bf4\u660eGoogletest\u7684\u4f7f\u7528\uff1b microsoft / GSL \u5982\u4f55\u5b9e\u8df5 1\u3001\u5c3d\u53ef\u80fd\u5730\u5b9e\u73b0\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u5168\u81ea\u52a8\u5316\u5730\u6267\u884c\uff0c\u751f\u6210\u62a5\u544a\uff08\u901a\u8fc7\u7387\u3001\u8986\u76d6\u7387\uff09 2\u3001\u5f00\u53d1\u9700\u8981\u81ea\u5df1\u9012\u4ea4\u6d4b\u8bd5\u7528\u4f8b\u3001\u6d4b\u8bd5\u7a0b\u5e8f 3\u3001\u4e25\u683c\u7684warning\u3001\u4f7f\u7528\u591a\u79cdstatic code analysis tool 4\u3001\u81ea\u52a8\u90e8\u7f72\u73af\u5883 5\u3001\u6d4b\u8bd5\u7528\u4f8b\u7f16\u5199\uff08\u9664\u4e86\u57fa\u672c\u7684\u529f\u80fd\u6d4b\u8bd5\uff0c\u8fd8\u9700\u8981\u6d4b\u8bd5 \u6781\u7aef\u503c\u3001\u5f02\u5e38\uff09\uff1b 6\u3001\u6700\u4f73\u5b9e\u8df5 rigtorp C++ Best Practices : Build and run your tests with sanitizers enabled. \u601d\u8003\u8ba8\u8bba 1\u3001\u6d4b\u8bd5\u7a0b\u5e8f \u548c \u6e90\u7a0b\u5e8f \u5982\u4f55\u653e\uff1f Analysis Tools \u4e0b\u9762\u662f\u4e00\u4e9b\u7a0b\u5e8f\u5206\u6790\u5de5\u5177\u3002 static code analysis \u5546\u4e1a\u4ed8\u8d39\u7684: Sonar \u5f00\u6e90\u514d\u8d39\u7684: Clang-Tidy \u00b6 Clang Static Analyzer Clang Thread Safety Analysis \u00b6 dynamic code analysis \u4e00\u3001 Valgrind \u4e8c\u3001 Clang Sanitizers : 1\u3001MemorySanitizer \u00b6 2\u3001UndefinedBehaviorSanitizer \u00b6 3\u3001LeakSanitizer \u00b6 NOTE: \u80fd\u591f\u53d1\u73b0\u5927\u591a\u6570\u95ee\u9898","title":"Introduction"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_1","text":"\u5982\u4f55\u5feb\u901f\u5730\u4ea4\u4ed8\u9ad8\u8d28\u91cf\u7684\u8f6f\u4ef6\uff1f\u5982\u4f55\u7cfb\u7edf\u7684\u63d0\u5347\u8f6f\u4ef6\u8d28\u91cf\uff1f\u8003\u8651: 1\u3001\u5f00\u53d1\u4eba\u5458\u7d20\u8d28 2\u3001\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b(\u8f6f\u4ef6\u5de5\u7a0b\u9886\u57df\u7684\u6982\u5ff5\uff0c\"software development process\") 3\u3001\u5de5\u5177 4\u3001......","title":"\u5982\u4f55\u7cfb\u7edf\u5730\u63d0\u5347\u8f6f\u4ef6\u8d28\u91cf"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_2","text":"1\u3001programmer\u8fd8\u9700\u8981\u662f\u4e00\u4e2aQA(\u8d28\u4fdd) 2\u3001\u6d4b\u8bd5\u6ca1\u6709\u63d0\u7f3a\u9677\u5e76\u4e0d\u4ee3\u8868\u8f6f\u4ef6\u8d28\u91cf\u597d\uff0c\u6ca1\u6709bug 3\u3001\u4e00\u4e9b\u9690\u85cf\u7684bug\uff0c\u4e00\u65e6\u7206\u53d1\uff0c\u4e0d\u4ec5\u96be\u4ee5\u6392\u9664\uff0c\u540e\u679c\u53ef\u80fd\u975e\u5e38\u4e25\u91cd\uff08\u6bd4\u5982C/C++ integer overflow undefined behavior\uff0c\u5bfc\u81f4\u7684\u95ee\u9898\u975e\u5e38\u8be1\u5f02\uff0c\u6392\u67e5\u8d77\u6765\u975e\u5e38\u56f0\u96be\uff0c\u5982\u679c\u7ecf\u9a8c\u4e0d\u4e30\u5bcc\uff0c\u5219\u6839\u672c\u65e0\u4ece\u67e5\u8d77\uff0c\u9700\u8981\u8003\u8651\u5982\u4f55\u7cfb\u7edf\u6027\u5730\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\uff09 4\u3001\u9700\u8981\u501f\u52a9tool\u6765\u5206\u6790\u7a0b\u5e8f\uff0c\u627e\u51fa\u5e38\u89c1bug NOTE: 1\u3001tool\u975e\u5e38\u591a\uff0c\u5408\u7406\u7684\u4f7f\u7528tool\uff0c\u80fd\u591f\u53d1\u73b0\u6f5c\u5728\u7684bug 5\u3001\u89c4\u8303\uff0c\u907f\u514d\u5e38\u89c1bug","title":"\u7ecf\u9a8c\u4e0e\u53cd\u601d"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#nlohmannjson","text":"NOTE: \u4e00\u300125K star\uff0c\u8bf4\u660e\u5b83\u6bd4\u8f83\u6d41\u884c\u3001\u6210\u719f \u4e8c\u3001\u5b83\u91c7\u7528\u7684\u8f6f\u4ef6\u5de5\u7a0b\u65b9\u6cd5\u662f\u6bd4\u8f83\u5178\u578b\u7684\uff0c\u503c\u5f97\u501f\u9274\uff1b","title":"\u6848\u4f8b: nlohmann/json"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#serious#testing","text":"Our class is heavily unit-tested and covers 100% of the code, including all exceptional behavior. Furthermore, we checked with Valgrind and the Clang Sanitizers that there are no memory leaks. Google OSS-Fuzz additionally runs fuzz tests against all parsers 24/7, effectively executing billions of tests so far. To maintain high quality , the project is following the Core Infrastructure Initiative (CII) best practices . NOTE: 1\u3001\u5b83\u7684\u505a\u6cd5\u662f\u975e\u5e38\u503c\u5f97\u501f\u9274\u7684 2\u3001\u540e\u9762\u4f1a\u5bf9 Core Infrastructure Initiative (CII) best practices \u8fdb\u884c\u8bf4\u660e","title":"Serious testing."},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#build","text":"NOTE: 1\u3001\u81ea\u52a8\u5316\u96c6\u6210\u3001CI (\u6211\u4eec\u6709)","title":"build"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_3","text":"NOTE: 1\u3001\u8fbe\u5230\u4e86100%\u7684\u8986\u76d6\u7387","title":"\u4ee3\u7801\u8986\u76d6\u7387"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#code#quality#code#review","text":"NOTE: 1\u3001\u4f7f\u7528\u4e86\u5f88\u591acode analysis tool https://www.codacy.com/product https://lgtm.com/ https://bugs.chromium.org/p/oss-fuzz/issues/list","title":"code quality \u5206\u6790\u3001\u81ea\u52a8\u5316code review"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_4","text":"","title":"\u5728\u7ebf\u4f7f\u7528"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_5","text":"","title":"\u6587\u6863"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#cii#best#practice","text":"","title":"CII best practice"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#cii#best#practices#badge#program","text":"The Linux Foundation (LF) Core Infrastructure Initiative (CII) Best Practices badge(\u5fbd\u7ae0) is a way for Free/Libre and Open Source Software (FLOSS) projects to show that they follow best practices.","title":"\u6700\u4f73\u5b9e\u8df5: CII Best Practices Badge Program"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#floss#best#practices#criteria#passing#badge","text":"NOTE: \u8be6\u7ec6\u7684\u6807\u51c6\u3002\u9700\u8981\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd","title":"FLOSS Best Practices Criteria (Passing Badge)"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#change#control","text":"NOTE: \u5176\u5b9e\u5c31\u662f\u7248\u672c\u63a7\u5236","title":"Change Control"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#quality","text":"Working build system Automated test suite New functionality testing Warning flags","title":"Quality"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#security","text":"NOTE: \u6682\u65f6\u65e0\u9700\u8003\u8651","title":"Security"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#analysis","text":"Static code analysis Dynamic code analysis","title":"Analysis"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#tdd#bdd","text":"","title":"\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b: TDD &amp;&amp; BDD"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#test-driven#developmenttdd","text":"","title":"Test-driven Development(TDD)"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#baike#tddtest-driven#development#tdd","text":"1\u3001\u72ec\u7acb\u6d4b\u8bd5\uff1a \u4e0d\u540c\u4ee3\u7801\u7684\u6d4b\u8bd5\u5e94\u8be5\u76f8\u4e92\u72ec\u7acb\uff0c\u4e00\u4e2a\u7c7b\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u7c7b\uff08\u5bf9\u4e8eC\u4ee3\u7801\u6216C++\u5168\u5c40\u51fd\u6570\uff0c\u5219\u4e00\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff09\uff0c\u4e00\u4e2a\u51fd\u6570\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\u3002 \u7528\u4f8b\u4e5f\u5e94\u5404\u81ea\u72ec\u7acb\uff0c\u6bcf\u4e2a\u7528\u4f8b\u4e0d\u80fd\u4f7f\u7528\u5176\u4ed6\u7528\u4f8b\u7684\u7ed3\u679c\u6570\u636e\uff0c\u7ed3\u679c\u4e5f\u4e0d\u80fd\u4f9d\u8d56\u4e8e\u7528\u4f8b\u6267\u884c\u987a\u5e8f\u3002 \u4e00\u4e2a\u89d2\u8272\uff1a\u5f00\u53d1\u8fc7\u7a0b\u5305\u542b\u591a\u79cd\u5de5\u4f5c\uff0c\u5982\uff1a\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u3001\u7f16\u5199\u4ea7\u54c1\u4ee3\u7801\u3001\u4ee3\u7801\u91cd\u6784\u7b49\u3002\u505a\u4e0d\u540c\u7684\u5de5\u4f5c\u65f6\uff0c\u5e94\u4e13\u6ce8\u4e8e\u5f53\u524d\u7684\u89d2\u8272\uff0c\u4e0d\u8981\u8fc7\u591a\u8003\u8651\u5176\u4ed6\u65b9\u9762\u7684\u7ec6\u8282\u3002 \u4e0d\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u8bdd\u7684\u542b\u4e49 2\u3001\u6d4b\u8bd5\u5217\u8868\uff1a \u4ee3\u7801\u7684\u529f\u80fd\u70b9\u53ef\u80fd\u5f88\u591a\uff0c\u5e76\u4e14\u9700\u6c42\u53ef\u80fd\u662f\u9646\u7eed\u51fa\u73b0\u7684\uff0c\u4efb\u4f55\u9636\u6bb5\u60f3\u6dfb\u52a0\u529f\u80fd\u65f6\uff0c\u5e94\u628a\u76f8\u5173\u529f\u80fd\u70b9\u52a0\u5230\u6d4b\u8bd5\u5217\u8868\u4e2d\uff0c\u7136\u540e\u624d\u80fd\u7ee7\u7eed\u624b\u5934\u5de5\u4f5c\uff0c\u907f\u514d\u758f\u6f0f\u3002 3\u3001\u6d4b\u8bd5\u9a71\u52a8\uff1a \u5373\u5229\u7528\u6d4b\u8bd5\u6765\u9a71\u52a8\u5f00\u53d1\uff0c\u662fTDD\u7684\u6838\u5fc3\u3002\u8981\u5b9e\u73b0\u67d0\u4e2a\u529f\u80fd\uff0c\u8981\u7f16\u5199\u67d0\u4e2a\u7c7b\u6216\u67d0\u4e2a\u51fd\u6570\uff0c\u5e94\u9996\u5148\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\uff0c\u660e\u786e\u8fd9\u4e2a\u7c7b\u3001\u8fd9\u4e2a \u51fd\u6570 \u5982\u4f55\u4f7f\u7528\uff0c\u5982\u4f55\u6d4b\u8bd5\uff0c\u7136\u540e\u5728\u5bf9\u5176\u8fdb\u884c\u8bbe\u8ba1\u3001\u7f16\u7801\u3002 4\u3001\u5148\u5199\u65ad\u8a00\uff1a \u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u65f6\uff0c\u5e94\u8be5\u9996\u5148\u7f16\u5199\u5224\u65ad\u4ee3\u7801\u529f\u80fd\u7684\u65ad\u8a00\u8bed\u53e5\uff0c\u7136\u540e\u7f16\u5199\u5fc5\u8981\u7684\u8f85\u52a9\u8bed\u53e5\u3002 5\u3001\u53ef\u6d4b\u8bd5\u6027\uff1a \u4ea7\u54c1\u4ee3\u7801\u8bbe\u8ba1\u3001\u5f00\u53d1\u65f6\u7684\u5e94\u5c3d\u53ef\u80fd\u63d0\u9ad8\u53ef\u6d4b\u8bd5\u6027\u3002\u6bcf\u4e2a\u4ee3\u7801\u5355\u5143\u7684\u529f\u80fd\u5e94\u8be5\u6bd4\u8f83\u5355\u7eaf\uff0c\u201c\u5404\u5bb6\u81ea\u626b\u95e8\u524d\u96ea\u201d\uff0c\u6bcf\u4e2a\u7c7b\u3001\u6bcf\u4e2a\u51fd\u6570\u5e94\u8be5\u53ea\u505a\u5b83\u8be5\u505a\u7684\u4e8b\uff0c\u4e0d\u8981\u5f04\u6210\u5927\u6742\u70e9( single responsibility principle )\u3002\u5c24\u5176\u662f\u589e\u52a0\u65b0\u529f\u80fd\u65f6\uff0c\u4e0d\u8981\u4e3a\u4e86\u56fe\u4e00\u65f6\u4e4b\u4fbf\uff0c\u968f\u4fbf\u5728\u539f\u6709\u4ee3\u7801\u4e2d\u6dfb\u52a0\u529f\u80fd\uff0c\u5bf9\u4e8eC++\u7f16\u7a0b\uff0c\u5e94\u591a\u8003\u8651\u4f7f\u7528\u5b50\u7c7b\u3001\u7ee7\u627f\u3001\u91cd\u8f7d\u7b49OO\u65b9\u6cd5( \u5c01\u88c5 )\u3002 NOTE: \u8fd9\u6bb5\u603b\u7ed3\u5730\u4e0d\u9519 6\u3001\u53ca\u65f6\u91cd\u6784\uff1a \u5bf9\u7ed3\u6784\u4e0d\u5408\u7406\uff0c\u91cd\u590d\u7b49\u201c\u5473\u9053\u201d\u4e0d\u597d\u7684\u4ee3\u7801\uff0c\u5728\u6d4b\u8bd5\u901a\u8fc7\u540e\uff0c\u5e94\u53ca\u65f6\u8fdb\u884c\u91cd\u6784\u3002 7\u3001\u5c0f\u6b65\u524d\u8fdb\uff1a \u8f6f\u4ef6\u5f00\u53d1\u662f\u590d\u6742\u6027\u975e\u5e38\u9ad8\u7684\u5de5\u4f5c\uff0c\u5c0f\u6b65\u524d\u8fdb\u662f\u964d\u4f4e\u590d\u6742\u6027\u7684\u597d\u529e\u6cd5\u3002","title":"baike TDD\uff08\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(Test-Driven Development)\uff09# TDD\u539f\u5219"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#tdd#bdd#-","text":"\u8fd9\u5bf9\u4e8e**\u5355\u5143\u6d4b\u8bd5**\u4e0e\u5f00\u53d1\u662f\u5f88\u6709\u7528\u7684\u4e00\u79cd\u5b9e\u8df5\u3002\u56e0\u4e3aTDD\u662f\u8981\u6c42\u5728\u5199\u4ee3\u7801\u4e4b\u524d\u5c31\u8981\u60f3\u597d\u600e\u4e48\u6d4b\uff0c\u6d4b\u4ec0\u4e48\uff0c\u8fd9\u89e3\u51b3\u4e86**\u53ef\u6d4b\u6027**\u4f4e\u7684\u95ee\u9898\u3002\u53e6\u5916\uff0cTDD\u8fd8\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684**\u6d4b\u8bd5\u8986\u76d6\u7387**\uff0c\u4ee4bug\u5728**\u7f16\u7801\u9636\u6bb5**\u5c31\u80fd\u88ab\u53d1\u73b0\u3002\u51cf\u5c11\u4e0a\u7ebf\u540e\u53d1\u73b0\u95ee\u9898\uff0c\u4fee\u590d\u95ee\u9898\u7684\u6307\u6570\u7ea7\u589e\u957f\u6210\u672c\u3002 NOTE: \u975e\u5e38\u597d\u7684\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u4f7f\u7528TDD\u3002","title":"\u77e5\u4e4e TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f - \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#wikipedia#test-driven#development","text":"NOTE: \u975e\u5e38\u6743\u5a01 Test-driven development (TDD) is a software development process relying on software requirements being converted to test cases before software is fully developed, and tracking all software development by repeatedly testing the software against all test cases. This is opposed to software being developed first and test cases created later.","title":"wikipedia Test-driven Development"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_6","text":"\u4e00\u3001C++\u4e2d\uff0c\u5982\u4f55\u9700\u8981\u7f16\u5199\u65b9\u4fbf\u6d4b\u8bd5\u7684\u7a0b\u5e8f\uff1f 1\u3001header only library\uff0cinclude what you need\u3002 2\u3001\u5c01\u88c5\u3001OOP","title":"\u601d\u8003"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#behavior-driven#developmentbdd","text":"","title":"Behavior-driven development(BDD)"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#wikipedia#behavior-driven#development","text":"In software engineering , behavior-driven development ( BDD ) is an agile software development process that encourages collaboration among developers, quality assurance testers, and customer representatives in a software project. NOTE: \u4e00\u3001developers, quality assurance testers, customer representatives \u4e00\u540c\u8fdb\u884c\u534f\u4f5c It encourages teams to use conversation and concrete examples to formalize a shared understanding of how the application should behave.[ 4] It emerged from test-driven development (TDD). NOTE: \u6e90\u81eaTDD\uff0c\u5f25\u8865\u5176\u4e0d\u8db3","title":"Wikipedia Behavior-driven development"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#tdd#bdd#-_1","text":"BDD\uff08 Behaviour-Driven Development) \u4ed6\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u81ea\u7136\u8bed\u8a00\u6309\u7167\u4e00\u4e9b\u7b80\u5355\u8bed\u6cd5\u7ec4\u7ec7\u8d77\u6765\uff0c\u4ee3\u7801\u5c06\u4f1a\u975e\u5e38\u5bb9\u6613\u89e3\u91ca\u4e0e\u5904\u7406\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u975e\u6280\u672f\u4eba\u5458\u3001\u5ba2\u6237\u53ef\u4ee5\u53c2\u4e0e\u5230\u9700\u6c42\u7684\u786e\u8ba4\u4e0e\u9a8c\u6536\u5f53\u4e2d\u3002 \u6211\u4eec\u770b\u4e00\u4e0b\u4e24\u4e2a\u4f8b\u5b50 Scenario: Refunded items should be returned to stock Given a customer bought a black sweater from me and I have three black sweaters left in stock. When he returns the sweater for a refund then I should have four black sweaters in stock. \u573a\u666f\uff1a \u5fae\u4fe1\u804a\u5929 \u5047\u5982 \u624b\u673a\u5b89\u88c5\u4e86\u5fae\u4fe1 \u5f53 \u7528\u6237\u6253\u5f00\u5fae\u4fe1 \u90a3\u4e48 \u624b\u673a\u4f1a\u51fa\u73b0\u7528\u6237\u7684\u5fae\u4fe1\u804a\u5929\u754c\u9762 \u4ee5\u4e0a\u5c31\u662fBDD\u4f7f\u7528\u7684\u53eb\u505aGherkin\u7684\u8bed\u8a00\uff0c\u5b83\u7684\u7406\u5ff5\u662f\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u6765\u63cf\u8ff0\u529f\u80fd\uff0c\u800c\u4e14\u5f3a\u8c03\u7684\u662f\u4f7f\u7528\u4f8b\u5b50\u6765\u8bf4\u660e\u9700\u6c42\u529f\u80fd\u3002\u662f\u4e0d\u662f\u8ddf\u654f\u6377\u5f00\u53d1\u4e2d\u7684\u7528\u6237\u6545\u4e8b(User Story)\u5f88\u50cf\uff1f\u55ef\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u4e00\u4e2a\u5988\u751f\u7684\u3002 \u5176\u5b9e\u53ea\u8981\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u654f\u6377\u5ba3\u8a00\uff0c\u5c31\u4f1a\u53d1\u73b0\uff0c\u903c\u5f1f\u5f1f\u5e72\u7684\u4e8b\u5c31\u662f\u89e3\u51b3\u4e2a\u4f53\u4e4b\u95f4\u4e92\u52a8\u4e0e\u5ba2\u6237\u534f\u4f5c\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002 BDD\u7684\u9700\u6c42\u7814\u8ba8\u4f1a(Specification Workshops) \u90a3\u4e48\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u79cd\u8bed\u8a00\uff0c\u628a\u9700\u6c42\u4e00\u4e2a\u4e2a\u7528\u4f8b\u5b50\u5217\u51fa\u6765\uff0c\u5ba2\u6237/\u4ea7\u54c1\u3001\u5f00\u53d1\u3001\u6d4b\u8bd5\u4e09\u65b9\u4e00\u8d77\u8ba8\u8bba\u4e0e\u786e\u8ba4\u3002 NOTE: \u4e09\u65b9\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u534f\u4f5c\uff0c\u4f7f\u7528\u4e00\u79cd\u4e09\u65b9\u90fd\u80fd\u591f\u7406\u89e3\u7684DSL","title":"\u77e5\u4e4e TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f - \u7a0b\u5e8f\u4eba\u751f\u7684\u56de\u7b54"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#baike","text":"","title":"baike \u884c\u4e3a\u9a71\u52a8\u5f00\u53d1"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#software#cucumber","text":"\u8fd9\u4e2a\u8f6f\u4ef6\u5c06BDD\u4ece\u7406\u8bba\u5e26\u5165\u4e86\u5de5\u7a0b\u5b9e\u8df5\u4e2d\u3002","title":"software Cucumber"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#see#also","text":"zhihu TDD \u4e0e BDD \u4ec5\u4ec5\u662f\u8bed\u8a00\u63cf\u8ff0\u4e0a\u7684\u533a\u522b\u4e48\uff1f","title":"See also"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#code#coverage","text":"","title":"Code coverage"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#what#is#code#coverage","text":"zhihu \u4ec0\u4e48\u662f\u4ee3\u7801\u8986\u76d6\u7387\uff1f \u662f\u8f6f\u4ef6\u6d4b\u8bd5\u4e2d\u7684\u4e00\u79cd\u5ea6\u91cf\uff0c\u63cf\u8ff0\u7a0b\u5e8f\u4e2d\u6e90\u4ee3\u7801\u88ab\u6d4b\u8bd5\u7684\u6bd4\u4f8b\u548c\u7a0b\u5ea6\uff0c\u6240\u5f97\u6bd4\u4f8b\u79f0\u4e3a**\u4ee3\u7801\u8986\u76d6\u7387**\u3002\u5728\u505a**\u5355\u5143\u6d4b\u8bd5**\u65f6\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u5e38\u5e38\u88ab\u62ff\u6765\u4f5c\u4e3a\u8861\u91cf\u6d4b\u8bd5\u597d\u574f\u7684\u6307\u6807\uff0c\u751a\u81f3\uff0c\u7528\u4ee3\u7801\u8986\u76d6\u7387\u6765\u8003\u6838\u6d4b\u8bd5\u4efb\u52a1\u5b8c\u6210\u60c5\u51b5\uff0c\u6bd4\u5982\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u5fc5\u987b\u8fbe\u523080\uff05\u6216 90\uff05\u3002 zhihu \u5b9e\u9645\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u662f\u5426\u771f\u7684\u9700\u8981100%\u4ee3\u7801\u8986\u76d6\u7387\uff08code coverage\uff09\uff1f # ThoughtWorks\u4e2d\u56fd \u4ee3\u7801\u8986\u76d6\u7387\u9ad8\u4e0d\u80fd\u8bf4\u660e\u4ee3\u7801\u8d28\u91cf\u9ad8\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u770b\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u4f4e\uff0c\u4ee3\u7801\u8d28\u91cf\u7edd\u5bf9\u4e0d\u4f1a\u9ad8\u5230\u54ea\u91cc\u53bb\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u81ea\u6211\u5ba1\u89c6\u7684\u91cd\u8981\u5de5\u5177\u4e4b\u4e00\u3002 \u8bed\u53e5\u8986\u76d6\u3001\u5224\u5b9a\u8986\u76d6\u3001\u6761\u4ef6\u8986\u76d6\u3001\u6761\u4ef6\u5224\u5b9a\u7ec4\u5408\u8986\u76d6\u3001\u591a\u6761\u4ef6\u8986\u76d6\u548c\u8def\u5f84\u8986\u76d6 NOTE: 1\u3001\u9700\u8981\u4ecb\u7ecd\u4e0a\u8ff0\u5404\u79cd\u6307\u6807","title":"What is code coverage"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#code#coverage_1","text":"\u4ee3\u7801\u8986\u76d6\u7387\u9ad8\u4e0d\u80fd\u8bf4\u660e\u4ee3\u7801\u8d28\u91cf\u9ad8\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u770b\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u4f4e\uff0c\u4ee3\u7801\u8d28\u91cf\u7edd\u5bf9\u4e0d\u4f1a\u9ad8\u5230\u54ea\u91cc\u53bb\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u81ea\u6211\u5ba1\u89c6\u7684\u91cd\u8981\u5de5\u5177\u4e4b\u4e00\u3002 \u91cf\u5316\u7684\u65b9\u5f0f\u3001\u6bd4\u8f83\u79d1\u5b66\uff1b","title":"Code coverage\u7684\u610f\u4e49"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_7","text":"1\u3001rdc.hundsun \u5982\u4f55\u7528Gcov\u4f18\u96c5\u5730\u5b9e\u73b0\u4ee3\u7801\u8986\u76d6\u7387\u53ef\u89c6\u5316\u62a5\u544a? 2\u3001csdn Linux\u4e0bc/c++\u9879\u76ee\u4ee3\u7801\u8986\u76d6\u7387\u7684\u4ea7\u751f\u65b9\u6cd5 3\u3001csdn \u6e29\u6545\u800c\u77e5\u65b0\uff1agtest\u5355\u5143\u6d4b\u8bd5\u5de5\u5177\u548clcov\u8986\u76d6\u7387\u7edf\u8ba1\u5de5\u5177\u7684\u7ed3\u5408\u4f7f\u7528 \u6ce8\u610f: 1\u3001\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u7684\u7f16\u8bd1","title":"\u5982\u4f55\u751f\u6210\u4ee3\u7801\u8986\u76d6\u7387\uff1f"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_8","text":"","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_9","text":"\u4f18\u52bf Catch2 header only library\u3001\u65e0\u5916\u90e8\u4f9d\u8d56\u3001\u591a\u8303\u5f0f\u6d4b\u8bd5\u6846\u67b6\uff0c\u53ef\u7528\u4e8e\u5355\u5143\u6d4b\u8bd5\u3001TDD \u548c BDD Googletest \u529f\u80fd\u5168\u9762\uff0c\u6bd4\u8f83\u6d41\u884c","title":"\u5de5\u5177"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#xunit#framework","text":"\u57fa\u672c\u4e0a\u6240\u6709\u7684\u5355\u5143\u6d4b\u8bd5\u5e93(\u5305\u62ecJUnit\u3001PyUnit)\uff0c\u90fd\u662f\u53c2\u8003\u7684\u8fd9\u4e2a\u6846\u67b6\uff0c\u4e86\u89e3\u4e86\u8fd9\u4e2a\u6846\u67b6\uff0c\u57fa\u672c\u4e0a\u5c31\u5165\u95e8\u4e86\u6240\u6709\u7684\u5355\u5143\u6d4b\u8bd5\u5e93\u3002","title":"xUnit framework"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#wikipedia#xunit#xunit#architecture","text":"NOTE: architecture\u8fd9\u5bf9\u4e8e\u6211\u4eec\u638c\u63e1unit testing framework\u975e\u5e38\u91cd\u8981\uff1bxUnit\u7684architecture\u662f\u975e\u5e38\u7ecf\u5178\u7684\u3002 All xUnit frameworks share the following basic component architecture, with some varied implementation details.[ 1]","title":"wikipedia xUnit # xUnit architecture"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#test#runner","text":"A test runner is an executable program that runs tests implemented using an xUnit framework and reports the test results.[ 2]","title":"Test runner"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#test#case","text":"A test case is the most elemental class. All unit tests are inherited from here.","title":"Test case"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#test#fixtures","text":"NOTE: \"fixture\"\u5728\u6b64\u7684\u542b\u4e49\u662f\"\u88c5\u914d\"\uff0c\u5728\u4e0b\u9762\u4f7f\u7528\u7684\u662fcontext\uff0c\u663e\u7136context\u7684\u542b\u4e49\u662f\u66f4\u52a0\u51c6\u786e\u7684\u3002 \u4e3a\u4ec0\u4e48\"return to the original state after the tests\"\uff1f \u56e0\u4e3a\u8981\u6267\u884c\u591a\u4e2atest\uff0c\"return to the original state\"\u80fd\u591f\u4fdd\u8bc1\u540e\u7eed\u7684test\u80fd\u591f\u7ee7\u7eed\u6267\u884c\u3002 \u5728\u540e\u9762\u7684\"test execution\"\u7ae0\u8282\u5c06\u5bf9\u5b83\u6709\u66f4\u597d\u7684\u63cf\u8ff0\u3002 A test fixture (also known as a test context) is the set of preconditions or state needed to run a test. The developer should set up a known good state before the tests, and return to the original state after the tests.","title":"Test fixtures"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#test#suites","text":"A test suite is a set of tests that all share the same fixture. The order of the tests shouldn't matter.","title":"Test suites"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#test#execution","text":"The execution of an individual unit test proceeds as follows: setup (); /* First, we should prepare our 'world' to make an isolated environment for testing */ ... /* Body of test - Here we make all the tests */ ... teardown (); /* At the end, whether we succeed or fail, we should clean up our 'world' to not disturb other tests or code */ The setup() and teardown() methods serve to initialize and clean up test fixtures . NOTE: setup() teardown()","title":"Test execution"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#test#result#formatter","text":"A test runner produces results in one or more output formats. In addition to a plain, human-readable format, there is often a test result formatter that produces XML output.","title":"Test result formatter"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#assertions","text":"An assertion is a function or macro that verifies the behavior (or the state) of the unit under test. Usually an assertion expresses a logical condition that is true for results expected in a correctly running system under test (SUT). Failure of an assertion typically throws an exception , aborting the execution of the current test.","title":"Assertions"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#googletest","text":"http://google.github.io/googletest/ \u5728\u5176\u5b98\u7f51\u4e0a\uff0c\u6709\u8be6\u7ec6\u7684\u6587\u6863\u8bf4\u660e\u3002","title":"Googletest"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#googletest#primer","text":"","title":"Googletest Primer"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#basic#concepts","text":"NOTE: \u7b80\u5355\u4ecb\u7ecd\u8fd9\u4e9b\u6982\u5ff5\uff0c\u548cxUnit\u5bf9\u5e94 \u6982\u5ff5 \u89e3\u91ca assertions Assertions Reference Tests test suite test fixture test program","title":"Basic Concepts"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#assertions_1","text":"ASSERT_* versions generate fatal failures when they fail, and abort the current function . EXPECT_* versions generate nonfatal failures, which don\u2019t abort the current function. ASSERT_EQ ( x . size (), y . size ()) << \"Vectors x and y are of unequal length\" ; for ( int i = 0 ; i < x . size (); ++ i ) { EXPECT_EQ ( x [ i ], y [ i ]) << \"Vectors x and y differ at index \" << i ; }","title":"Assertions"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#simple#tests","text":"\u4e00\u4e2a*test*\u7684\u57fa\u672c\u683c\u5f0f TEST ( TestSuiteName , TestName ) { ... test body ... } For example, let\u2019s take a simple integer function: int Factorial ( int n ); // Returns the factorial of n A test suite for this function might look like: // Tests factorial of 0. TEST ( FactorialTest , HandlesZeroInput ) { EXPECT_EQ ( Factorial ( 0 ), 1 ); } // Tests factorial of positive numbers. TEST ( FactorialTest , HandlesPositiveInput ) { EXPECT_EQ ( Factorial ( 1 ), 1 ); EXPECT_EQ ( Factorial ( 2 ), 2 ); EXPECT_EQ ( Factorial ( 3 ), 6 ); EXPECT_EQ ( Factorial ( 8 ), 40320 ); } googletest groups the test results by test suites, so logically related tests should be in the same test suite;","title":"Simple Tests"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#test#fixtures#using#the#same#data#configuration#for#multiple#tests","text":"If you find yourself writing two or more tests that operate on similar data, you can use a test fixture . This allows you to reuse the same configuration of objects for several different tests. NOTE: \u591a\u4e2atest\u4f7f\u7528\u76f8\u540c\u7684\"Data Configuration\" TEST_F ( TestFixtureName , TestName ) { ... test body ... } As an example, let\u2019s write tests for a FIFO queue class named Queue , which has the following interface: template < typename E > // E is the element type. class Queue { public : Queue (); void Enqueue ( const E & element ); E * Dequeue (); // Returns NULL if the queue is empty. size_t size () const ; ... }; class QueueTest : public :: testing :: Test { protected : void SetUp () override { q1_ . Enqueue ( 1 ); q2_ . Enqueue ( 2 ); q2_ . Enqueue ( 3 ); } // void TearDown() override {} Queue < int > q0_ ; Queue < int > q1_ ; Queue < int > q2_ ; }; TEST_F ( QueueTest , IsEmptyInitially ) { EXPECT_EQ ( q0_ . size (), 0 ); } TEST_F ( QueueTest , DequeueWorks ) { int * n = q0_ . Dequeue (); EXPECT_EQ ( n , nullptr ); n = q1_ . Dequeue (); ASSERT_NE ( n , nullptr ); EXPECT_EQ ( * n , 1 ); EXPECT_EQ ( q1_ . size (), 0 ); delete n ; n = q2_ . Dequeue (); ASSERT_NE ( n , nullptr ); EXPECT_EQ ( * n , 2 ); EXPECT_EQ ( q2_ . size (), 1 ); delete n ; } When these tests run, the following happens: googletest constructs a QueueTest object (let\u2019s call it t1 ). t1.SetUp() initializes t1 . The first test ( IsEmptyInitially ) runs on t1 . t1.TearDown() cleans up after the test finishes. t1 is destructed. The above steps are repeated on another QueueTest object, this time running the DequeueWorks test.","title":"Test Fixtures: Using the Same Data Configuration for Multiple Tests"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#invoking#the#tests","text":"#include \"this/package/foo.h\" #include \"gtest/gtest.h\" namespace my { namespace project { namespace { // The fixture for testing class Foo. class FooTest : public :: testing :: Test { protected : // You can remove any or all of the following functions if their bodies would // be empty. FooTest () { // You can do set-up work for each test here. } ~ FooTest () override { // You can do clean-up work that doesn't throw exceptions here. } // If the constructor and destructor are not enough for setting up // and cleaning up each test, you can define the following methods: void SetUp () override { // Code here will be called immediately after the constructor (right // before each test). } void TearDown () override { // Code here will be called immediately after each test (right // before the destructor). } // Class members declared here can be used by all tests in the test suite // for Foo. }; // Tests that the Foo::Bar() method does Abc. TEST_F ( FooTest , MethodBarDoesAbc ) { const std :: string input_filepath = \"this/package/testdata/myinputfile.dat\" ; const std :: string output_filepath = \"this/package/testdata/myoutputfile.dat\" ; Foo f ; EXPECT_EQ ( f . Bar ( input_filepath , output_filepath ), 0 ); } // Tests that Foo does Xyz. TEST_F ( FooTest , DoesXyz ) { // Exercises the Xyz feature of Foo. } } // namespace } // namespace project } // namespace my int main ( int argc , char ** argv ) { :: testing :: InitGoogleTest ( & argc , argv ); return RUN_ALL_TESTS (); }","title":"Invoking the Tests"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#advanced#googletest#topics","text":"This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests.","title":"Advanced googletest Topics"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#more#assertions","text":"NOTE: \u76f4\u63a5\u770b Assertions Reference","title":"More Assertions"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#teaching#googletest#how#to#print#your#values","text":"NOTE: overload << \u6765\u8ba9\u8f93\u51fa\u66f4\u52a0\u53cb\u597d #include <ostream> namespace foo { class Bar { // We want googletest to be able to print instances of this. ... // Create a free inline friend function. friend std :: ostream & operator << ( std :: ostream & os , const Bar & bar ) { return os << bar . DebugString (); // whatever needed to print bar to os } }; // If you can't declare the function in the class it's important that the // << operator is defined in the SAME namespace that defines Bar. C++'s look-up // rules rely on that. std :: ostream & operator << ( std :: ostream & os , const Bar & bar ) { return os << bar . DebugString (); // whatever needed to print bar to os } } // namespace foo","title":"Teaching googletest How to Print Your Values"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#death#tests","text":"","title":"Death Tests"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#sharing#resources#between#tests#in#the#same#test#suite","text":"","title":"Sharing Resources Between Tests in the Same Test Suite"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#global#set-up#and#tear-down","text":"","title":"Global Set-Up and Tear-Down"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#value-parameterized#tests","text":"","title":"Value-Parameterized Tests"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#testing#private#code","text":"","title":"Testing Private Code"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#extending#googletest#by#handling#test#events","text":"","title":"Extending googletest by Handling Test Events"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#sanitizer#integration","text":"NOTE: \u8fd9\u662f\u7b26\u5408\u6700\u4f73\u5b9e\u8df5\u7684","title":"Sanitizer Integration"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#googletest#assertions#reference","text":"All assertion macros support streaming a custom failure message into them with the << operator, for example: EXPECT_TRUE ( my_condition ) << \"My condition is not true\" ;","title":"googletest Assertions Reference"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#explicit#success#and#failure","text":"switch ( expression ) { case 1 : ... some checks ... case 2 : ... some other checks ... default : FAIL () << \"We shouldn't get here.\" ; }","title":"Explicit Success and Failure"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#generalized#assertion","text":"The following assertion allows matchers to be used to verify values. NOTE: \u9700\u8981\u4f7f\u7528\u5230 matcher #include \"gmock/gmock.h\" using :: testing :: AllOf ; using :: testing :: Gt ; using :: testing :: Lt ; using :: testing :: MatchesRegex ; using :: testing :: StartsWith ; ... EXPECT_THAT ( value1 , StartsWith ( \"Hello\" )); EXPECT_THAT ( value2 , MatchesRegex ( \"Line \\\\ d+\" )); ASSERT_THAT ( value3 , AllOf ( Gt ( 5 ), Lt ( 10 )));","title":"Generalized Assertion"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#boolean#conditions","text":"EXPECT_TRUE(condition) ASSERT_TRUE(condition) Verifies that condition is true. EXPECT_FALSE(condition) ASSERT_FALSE(condition) Verifies that condition is false.","title":"Boolean Conditions"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#binary#comparison","text":"EXPECT_NE EXPECT_EQ(val1,val2) ASSERT_EQ(val1,val2) Verifies that val1 == val2 . EXPECT_LT Verifies that val1 < val2 .","title":"Binary Comparison"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#string#comparison","text":"","title":"String Comparison"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#floating-point#comparison","text":"","title":"Floating-Point Comparison"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#exception#assertions","text":"The following assertions verify that a piece of code throws, or does not throw, an exception. Usage requires exceptions to be enabled in the build environment. EXPECT_NO_THROW ({ int n = 5 ; DoSomething ( & n ); });","title":"Exception Assertions"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#death#assertions","text":"The following assertions verify that a piece of code causes the process to terminate. For context, see Death Tests .","title":"Death Assertions"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#googletest#matchers#reference","text":"NOTE: \u5176\u5b9e\u76f8\u5f53\u4e8eoverload == Macro Description EXPECT_THAT(actual_value, matcher) Asserts that actual_value matches matcher . ASSERT_THAT(actual_value, matcher) The same as EXPECT_THAT(actual_value, matcher) , except that it generates a fatal failure.","title":"googletest Matchers Reference"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_10","text":"\u4e0b\u9762\u7ed3\u5408\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u8bf4\u660eGoogletest\u7684\u4f7f\u7528\uff1b microsoft / GSL","title":"\u6848\u4f8b:"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_11","text":"1\u3001\u5c3d\u53ef\u80fd\u5730\u5b9e\u73b0\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u5168\u81ea\u52a8\u5316\u5730\u6267\u884c\uff0c\u751f\u6210\u62a5\u544a\uff08\u901a\u8fc7\u7387\u3001\u8986\u76d6\u7387\uff09 2\u3001\u5f00\u53d1\u9700\u8981\u81ea\u5df1\u9012\u4ea4\u6d4b\u8bd5\u7528\u4f8b\u3001\u6d4b\u8bd5\u7a0b\u5e8f 3\u3001\u4e25\u683c\u7684warning\u3001\u4f7f\u7528\u591a\u79cdstatic code analysis tool 4\u3001\u81ea\u52a8\u90e8\u7f72\u73af\u5883 5\u3001\u6d4b\u8bd5\u7528\u4f8b\u7f16\u5199\uff08\u9664\u4e86\u57fa\u672c\u7684\u529f\u80fd\u6d4b\u8bd5\uff0c\u8fd8\u9700\u8981\u6d4b\u8bd5 \u6781\u7aef\u503c\u3001\u5f02\u5e38\uff09\uff1b 6\u3001\u6700\u4f73\u5b9e\u8df5 rigtorp C++ Best Practices : Build and run your tests with sanitizers enabled.","title":"\u5982\u4f55\u5b9e\u8df5"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#_12","text":"1\u3001\u6d4b\u8bd5\u7a0b\u5e8f \u548c \u6e90\u7a0b\u5e8f \u5982\u4f55\u653e\uff1f","title":"\u601d\u8003\u8ba8\u8bba"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#analysis#tools","text":"\u4e0b\u9762\u662f\u4e00\u4e9b\u7a0b\u5e8f\u5206\u6790\u5de5\u5177\u3002","title":"Analysis Tools"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#static#code#analysis","text":"\u5546\u4e1a\u4ed8\u8d39\u7684: Sonar \u5f00\u6e90\u514d\u8d39\u7684: Clang-Tidy \u00b6 Clang Static Analyzer Clang Thread Safety Analysis \u00b6","title":"static code analysis"},{"location":"2Development/%E8%B4%A8%E9%87%8F%E6%8F%90%E5%8D%87/#dynamic#code#analysis","text":"\u4e00\u3001 Valgrind \u4e8c\u3001 Clang Sanitizers : 1\u3001MemorySanitizer \u00b6 2\u3001UndefinedBehaviorSanitizer \u00b6 3\u3001LeakSanitizer \u00b6 NOTE: \u80fd\u591f\u53d1\u73b0\u5927\u591a\u6570\u95ee\u9898","title":"dynamic code analysis"},{"location":"3Distribution/","text":"Software distribution","title":"Introduction"},{"location":"3Distribution/#software#distribution","text":"","title":"Software distribution"},{"location":"3Distribution/Software-release-life-cycle/","text":"Software release life cycle","title":"Software-release-life-cycle"},{"location":"3Distribution/Software-release-life-cycle/#software#release#life#cycle","text":"","title":"Software release life cycle"},{"location":"DevOps/","text":"DevOps zhihu \u4ec0\u4e48\u662fDevOps\uff1f \u7f51\u6613\u6570\u5e06\u7684\u56de\u7b54 NOTE: \u8fd9\u4e2a\u56de\u7b54\u6bd4\u8f83\u6613\u61c2","title":"Introduction"},{"location":"DevOps/#devops","text":"","title":"DevOps"},{"location":"DevOps/#zhihu#devops","text":"","title":"zhihu \u4ec0\u4e48\u662fDevOps\uff1f"},{"location":"DevOps/#_1","text":"NOTE: \u8fd9\u4e2a\u56de\u7b54\u6bd4\u8f83\u6613\u61c2","title":"\u7f51\u6613\u6570\u5e06\u7684\u56de\u7b54"},{"location":"DevOps/12factor/","text":"12factor Introduction In the modern era, software is commonly delivered as a service: called web apps , or software-as-a-service . The twelve-factor app is a methodology for building software-as-a-service apps that: Use declarative formats for setup automation (\u4f7f\u7528\u58f0\u660e\u6027\u683c\u5f0f\u8fdb\u884c\u8bbe\u7f6e\u81ea\u52a8\u5316), to minimize time and cost for new developers joining the project; Have a clean contract with the underlying operating system, offering maximum portability between execution environments; Are suitable for deployment on modern cloud platforms , obviating the need for servers and systems administration; Minimize divergence between development and production, enabling continuous deployment for maximum agility(\u964d\u4f4edevelopment\u548cproduction\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u5b9e\u73b0\u6301\u7eed\u90e8\u7f72\u4ee5\u5b9e\u73b0\u6700\u5927\u7075\u6d3b\u6027); And can scale up without significant changes to tooling, architecture, or development practices(\u5e76\u4e14\u53ef\u4ee5\u5728\u4e0d\u5bf9\u5de5\u5177\uff0c\u4f53\u7cfb\u7ed3\u6784\u6216\u5f00\u53d1\u5b9e\u8df5\u8fdb\u884c\u91cd\u5927\u66f4\u6539\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6269\u5c55). The twelve-factor methodology can be applied to apps written in any programming language, and which use any combination of backing services (database, queue, memory cache, etc). Background The contributors to this document have been directly involved in the development and deployment of hundreds of apps, and indirectly witnessed the development, operation, and scaling of hundreds of thousands of apps via our work on the Heroku platform. This document synthesizes(\u7efc\u5408) all of our experience and observations on a wide variety of software-as-a-service apps in the wild. It is a triangulation(\u4e09\u89d2) on ideal practices (\u7406\u60f3\u5b9e\u8df5) for app development, paying particular attention to the dynamics of the organic growth of an app over time(\u7279\u522b\u5173\u6ce8\u5e94\u7528\u7a0b\u5e8f\u968f\u7740\u65f6\u95f4\u63a8\u79fb\u7684\u6709\u673a\u589e\u957f\u52a8\u6001), the dynamics of collaboration between developers working on the app\u2019s codebase(\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u5e93\u7684\u5f00\u53d1\u4eba\u5458\u4e4b\u95f4\u7684\u534f\u4f5c\u52a8\u6001\uff0c\u4ee5\u53ca\u907f\u514d\u6210\u672c \u8f6f\u4ef6\u4fb5\u8680), and avoiding the cost of software erosion . Our motivation is to raise awareness of some systemic problems we\u2019ve seen in modern application development, to provide a shared vocabulary for discussing those problems, and to offer a set of broad conceptual solutions to those problems with accompanying terminology. The format is inspired by Martin Fowler\u2019s books Patterns of Enterprise Application Architecture and Refactoring . Who should read this document? Any developer building applications which run as a service. Ops engineers who deploy or manage such applications. The Twelve Factors I. Codebase One codebase tracked in revision control, many deploys \u4f7f\u7528\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u8fdb\u884c\u8ddf\u8e2a\u7684codebase\u3002 \u603b\u7ed3\uff1a\u8fd9\u6bb5\u63cf\u8ff0\u4e86\u8fd9\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\uff1aapp\uff0ccode repo\uff0cdeploy\uff0ccodebase A twelve-factor app is always tracked in a version control system , such as Git , Mercurial , or Subversion . A copy of the revision tracking database is known as a code repository , often shortened to code repo or just repo . A codebase is any single repo (in a centralized revision control system like Subversion)(\u4ee3\u7801\u5e93\u662f\u4efb\u4f55\u5355\u4e2a\u4ed3\u5e93), or any set of repos who share a root commit (in a decentralized revision control system like Git). There is always a one-to-one correlation between the codebase and the app(\u4ee3\u7801\u5e93\u548c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u59cb\u7ec8\u5b58\u5728\u4e00\u5bf9\u4e00\u7684\u5173\u8054): If there are multiple codebases, it\u2019s not an app \u2013 it\u2019s a distributed system(\u5982\u679c\u6709\u591a\u4e2a\u4ee3\u7801\u5e93\uff0c\u5b83\u4e0d\u662f\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f - \u5b83\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf). Each component in a distributed system is an app, and each can individually comply with twelve-factor. Multiple apps sharing the same code is a violation of twelve-factor. The solution here is to factor(\u5206\u89e3) shared code into libraries which can be included through the dependency manager . There is only one codebase per app, but there will be many deploys of the app(\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ea\u6709\u4e00\u4e2a\u4ee3\u7801\u5e93\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u7684\u90e8\u7f72\u5c06\u5f88\u591a). A deploy is a running instance of the app. This is typically a production site, and one or more staging sites(\u4e34\u65f6\u7ad9\u70b9). Additionally, every developer has a copy of the app running in their local development environment, each of which also qualifies as a deploy . The codebase is the same across all deploys, although different versions may be active in each deploy. For example, a developer has some commits not yet deployed to staging; staging has some commits not yet deployed to production. But they all share the same codebase, thus making them identifiable as different deploys of the same app. II. Dependencies Explicitly declare and isolate dependencies III. Config Store config in the environment IV. Backing services Treat backing services as attached resources V. Build, release, run Strictly separate build and run stages VI. Processes Execute the app as one or more stateless processes VII. Port binding Export services via port binding VIII. Concurrency Scale out via the process model IX. Disposability Maximize robustness with fast startup and graceful shutdown X. Dev/prod parity Keep development, staging, and production as similar as possible XI. Logs Treat logs as event streams XII. Admin processes Run admin/management tasks as one-off processes","title":"Introduction"},{"location":"DevOps/12factor/#12factor","text":"","title":"12factor"},{"location":"DevOps/12factor/#introduction","text":"In the modern era, software is commonly delivered as a service: called web apps , or software-as-a-service . The twelve-factor app is a methodology for building software-as-a-service apps that: Use declarative formats for setup automation (\u4f7f\u7528\u58f0\u660e\u6027\u683c\u5f0f\u8fdb\u884c\u8bbe\u7f6e\u81ea\u52a8\u5316), to minimize time and cost for new developers joining the project; Have a clean contract with the underlying operating system, offering maximum portability between execution environments; Are suitable for deployment on modern cloud platforms , obviating the need for servers and systems administration; Minimize divergence between development and production, enabling continuous deployment for maximum agility(\u964d\u4f4edevelopment\u548cproduction\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u5b9e\u73b0\u6301\u7eed\u90e8\u7f72\u4ee5\u5b9e\u73b0\u6700\u5927\u7075\u6d3b\u6027); And can scale up without significant changes to tooling, architecture, or development practices(\u5e76\u4e14\u53ef\u4ee5\u5728\u4e0d\u5bf9\u5de5\u5177\uff0c\u4f53\u7cfb\u7ed3\u6784\u6216\u5f00\u53d1\u5b9e\u8df5\u8fdb\u884c\u91cd\u5927\u66f4\u6539\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6269\u5c55). The twelve-factor methodology can be applied to apps written in any programming language, and which use any combination of backing services (database, queue, memory cache, etc).","title":"Introduction"},{"location":"DevOps/12factor/#background","text":"The contributors to this document have been directly involved in the development and deployment of hundreds of apps, and indirectly witnessed the development, operation, and scaling of hundreds of thousands of apps via our work on the Heroku platform. This document synthesizes(\u7efc\u5408) all of our experience and observations on a wide variety of software-as-a-service apps in the wild. It is a triangulation(\u4e09\u89d2) on ideal practices (\u7406\u60f3\u5b9e\u8df5) for app development, paying particular attention to the dynamics of the organic growth of an app over time(\u7279\u522b\u5173\u6ce8\u5e94\u7528\u7a0b\u5e8f\u968f\u7740\u65f6\u95f4\u63a8\u79fb\u7684\u6709\u673a\u589e\u957f\u52a8\u6001), the dynamics of collaboration between developers working on the app\u2019s codebase(\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u5e93\u7684\u5f00\u53d1\u4eba\u5458\u4e4b\u95f4\u7684\u534f\u4f5c\u52a8\u6001\uff0c\u4ee5\u53ca\u907f\u514d\u6210\u672c \u8f6f\u4ef6\u4fb5\u8680), and avoiding the cost of software erosion . Our motivation is to raise awareness of some systemic problems we\u2019ve seen in modern application development, to provide a shared vocabulary for discussing those problems, and to offer a set of broad conceptual solutions to those problems with accompanying terminology. The format is inspired by Martin Fowler\u2019s books Patterns of Enterprise Application Architecture and Refactoring .","title":"Background"},{"location":"DevOps/12factor/#who#should#read#this#document","text":"Any developer building applications which run as a service. Ops engineers who deploy or manage such applications.","title":"Who should read this document?"},{"location":"DevOps/12factor/#the#twelve#factors","text":"","title":"The Twelve Factors"},{"location":"DevOps/12factor/#i#codebase","text":"","title":"I. Codebase"},{"location":"DevOps/12factor/#one#codebase#tracked#in#revision#control#many#deploys","text":"\u4f7f\u7528\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u8fdb\u884c\u8ddf\u8e2a\u7684codebase\u3002 \u603b\u7ed3\uff1a\u8fd9\u6bb5\u63cf\u8ff0\u4e86\u8fd9\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\uff1aapp\uff0ccode repo\uff0cdeploy\uff0ccodebase A twelve-factor app is always tracked in a version control system , such as Git , Mercurial , or Subversion . A copy of the revision tracking database is known as a code repository , often shortened to code repo or just repo . A codebase is any single repo (in a centralized revision control system like Subversion)(\u4ee3\u7801\u5e93\u662f\u4efb\u4f55\u5355\u4e2a\u4ed3\u5e93), or any set of repos who share a root commit (in a decentralized revision control system like Git). There is always a one-to-one correlation between the codebase and the app(\u4ee3\u7801\u5e93\u548c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u59cb\u7ec8\u5b58\u5728\u4e00\u5bf9\u4e00\u7684\u5173\u8054): If there are multiple codebases, it\u2019s not an app \u2013 it\u2019s a distributed system(\u5982\u679c\u6709\u591a\u4e2a\u4ee3\u7801\u5e93\uff0c\u5b83\u4e0d\u662f\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f - \u5b83\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf). Each component in a distributed system is an app, and each can individually comply with twelve-factor. Multiple apps sharing the same code is a violation of twelve-factor. The solution here is to factor(\u5206\u89e3) shared code into libraries which can be included through the dependency manager . There is only one codebase per app, but there will be many deploys of the app(\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ea\u6709\u4e00\u4e2a\u4ee3\u7801\u5e93\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u7684\u90e8\u7f72\u5c06\u5f88\u591a). A deploy is a running instance of the app. This is typically a production site, and one or more staging sites(\u4e34\u65f6\u7ad9\u70b9). Additionally, every developer has a copy of the app running in their local development environment, each of which also qualifies as a deploy . The codebase is the same across all deploys, although different versions may be active in each deploy. For example, a developer has some commits not yet deployed to staging; staging has some commits not yet deployed to production. But they all share the same codebase, thus making them identifiable as different deploys of the same app.","title":"One codebase tracked in revision control, many deploys"},{"location":"DevOps/12factor/#ii#dependencies","text":"","title":"II. Dependencies"},{"location":"DevOps/12factor/#explicitly#declare#and#isolate#dependencies","text":"","title":"Explicitly declare and isolate dependencies"},{"location":"DevOps/12factor/#iii#config","text":"","title":"III. Config"},{"location":"DevOps/12factor/#store#config#in#the#environment","text":"","title":"Store config in the environment"},{"location":"DevOps/12factor/#iv#backing#services","text":"","title":"IV. Backing services"},{"location":"DevOps/12factor/#treat#backing#services#as#attached#resources","text":"","title":"Treat backing services as attached resources"},{"location":"DevOps/12factor/#v#build#release#run","text":"","title":"V. Build, release, run"},{"location":"DevOps/12factor/#strictly#separate#build#and#run#stages","text":"","title":"Strictly separate build and run stages"},{"location":"DevOps/12factor/#vi#processes","text":"","title":"VI. Processes"},{"location":"DevOps/12factor/#execute#the#app#as#one#or#more#stateless#processes","text":"","title":"Execute the app as one or more stateless processes"},{"location":"DevOps/12factor/#vii#port#binding","text":"","title":"VII. Port binding"},{"location":"DevOps/12factor/#export#services#via#port#binding","text":"","title":"Export services via port binding"},{"location":"DevOps/12factor/#viii#concurrency","text":"","title":"VIII. Concurrency"},{"location":"DevOps/12factor/#scale#out#via#the#process#model","text":"","title":"Scale out via the process model"},{"location":"DevOps/12factor/#ix#disposability","text":"","title":"IX. Disposability"},{"location":"DevOps/12factor/#maximize#robustness#with#fast#startup#and#graceful#shutdown","text":"","title":"Maximize robustness with fast startup and graceful shutdown"},{"location":"DevOps/12factor/#x#devprod#parity","text":"","title":"X. Dev/prod parity"},{"location":"DevOps/12factor/#keep#development#staging#and#production#as#similar#as#possible","text":"","title":"Keep development, staging, and production as similar as possible"},{"location":"DevOps/12factor/#xi#logs","text":"","title":"XI. Logs"},{"location":"DevOps/12factor/#treat#logs#as#event#streams","text":"","title":"Treat logs as event streams"},{"location":"DevOps/12factor/#xii#admin#processes","text":"","title":"XII. Admin processes"},{"location":"DevOps/12factor/#run#adminmanagement#tasks#as#one-off#processes","text":"","title":"Run admin/management tasks as one-off processes"},{"location":"Software-engineering/","text":"Software engineering wikipedia Software engineering Software engineering is the systematic application of engineering approaches to the development of software . Software engineering is a direct sub-field of engineering and has an overlap with computer science and management science . Fields \u6ce8\u89e3 \u7ae0\u8282 Software requirements \u9700\u6c42 Software design \u8bbe\u8ba1\uff0c\u6d89\u53ca\u5230\u975e\u5e38\u591a\u7684\u5185\u5bb9: - Software architecture Software development \u5f00\u53d1\uff0c\u6d89\u53ca\u5230\u975e\u5e38\u591a\u7684\u5185\u5bb9\uff0c \u662fprogrammer\u7684\u91cd\u8981\u5de5\u4f5c Software testing \u6d4b\u8bd5 Software_distribution \u53d1\u5e03 TODO: Software maintenance \u662f\u5426\u9700\u8981\u52a0\u5165\uff1f","title":"Introduction"},{"location":"Software-engineering/#software#engineering","text":"","title":"Software engineering"},{"location":"Software-engineering/#wikipedia#software#engineering","text":"Software engineering is the systematic application of engineering approaches to the development of software . Software engineering is a direct sub-field of engineering and has an overlap with computer science and management science .","title":"wikipedia Software engineering"},{"location":"Software-engineering/#fields","text":"\u6ce8\u89e3 \u7ae0\u8282 Software requirements \u9700\u6c42 Software design \u8bbe\u8ba1\uff0c\u6d89\u53ca\u5230\u975e\u5e38\u591a\u7684\u5185\u5bb9: - Software architecture Software development \u5f00\u53d1\uff0c\u6d89\u53ca\u5230\u975e\u5e38\u591a\u7684\u5185\u5bb9\uff0c \u662fprogrammer\u7684\u91cd\u8981\u5de5\u4f5c Software testing \u6d4b\u8bd5 Software_distribution \u53d1\u5e03 TODO: Software maintenance \u662f\u5426\u9700\u8981\u52a0\u5165\uff1f","title":"Fields"},{"location":"Software-quality/","text":"Software quality wikipedia Software quality wikipedia Quality requirements","title":"Introduction"},{"location":"Software-quality/#software#quality","text":"","title":"Software quality"},{"location":"Software-quality/#wikipedia#software#quality","text":"","title":"wikipedia Software quality"},{"location":"Software-quality/#wikipedia#quality#requirements","text":"","title":"wikipedia Quality requirements"},{"location":"Software-quality/Readability/","text":"Readability of source code wikipedia Readability of source code NOTE: \u5982\u4f55\u6765\u4fdd\u8bc1\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff1f wikipedia Self-documenting code \u5173\u4e8eself-document code\uff0c\u5728\u9605\u8bfb namedtuple() \u7684\u6587\u6863\u7684\u65f6\u5019\uff0c\u770b\u5230\u4e86\u5b83\u7684\u8eab\u5f71\uff1a Named tuples assign meaning to each position in a tuple and allow for more readable, self-documenting code . They can be used wherever regular tuples are used, and they add the ability to access fields by name instead of position index. Code style \u6b63\u5982python\u6709\uff1a PEP 7 -- Style Guide for C Code TODO: Name convention","title":"Introduction"},{"location":"Software-quality/Readability/#readability#of#source#code","text":"","title":"Readability of source code"},{"location":"Software-quality/Readability/#wikipedia#readability#of#source#code","text":"NOTE: \u5982\u4f55\u6765\u4fdd\u8bc1\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff1f","title":"wikipedia Readability of source code"},{"location":"Software-quality/Readability/#wikipedia#self-documenting#code","text":"\u5173\u4e8eself-document code\uff0c\u5728\u9605\u8bfb namedtuple() \u7684\u6587\u6863\u7684\u65f6\u5019\uff0c\u770b\u5230\u4e86\u5b83\u7684\u8eab\u5f71\uff1a Named tuples assign meaning to each position in a tuple and allow for more readable, self-documenting code . They can be used wherever regular tuples are used, and they add the ability to access fields by name instead of position index.","title":"wikipedia Self-documenting code"},{"location":"Software-quality/Readability/#code#style","text":"\u6b63\u5982python\u6709\uff1a PEP 7 -- Style Guide for C Code","title":"Code style"},{"location":"Software-quality/Readability/#todo#name#convention","text":"","title":"TODO: Name convention"},{"location":"Software-quality/Reusability/","text":"Reusability wikipedia Reusability wikipedia Code reuse simplicable 8 Types of Code Reuse What Code Reuse is and Why We Use It \u5728\u8f6f\u4ef6\u590d\u7528\u4e0a\uff0c\u4e00\u822c\u6709\u4e09\u4e2a\u5c42\u6b21\u7684\u590d\u7528\uff1a \u590d\u7528\u4ef7\u503c \u4f18\u7f3a\u70b9 \u6e90\u4ee3\u7801\u590d\u7528 \u4f4e \u7248\u672c\u63a7\u5236\u96be\uff0c\u590d\u7528\u4e4b\u540e\u5c31\u5404\u81ea\u7ef4\u62a4\u4e86\uff0c\u4f46\u4f7f\u7528\u8005\u53ef\u4ee5\u4e86\u89e3\u6240\u6709\u7ec6\u8282\uff0c\u53ef\u4ee5\u6309\u9700\u81ea\u884c\u6539\u8fdb\uff1b \u4e8c\u8fdb\u5236\u5e93 (\u63a7\u4ef6\u3001\u51fd\u6570\u5e93\u7b49)\u590d\u7528 \u4e2d \u53ef\u7531\u53d1\u5e03\u8005\u63a7\u5236\uff0c\u4f7f\u7528\u8005\u6709\u6539\u8fdb\u9700\u6c42\u65f6\uff0c\u9700\u8981\u53d1\u5e03\u8005\u53ca\u65f6\u54cd\u5e94\uff1b \u5b50\u7cfb\u7edf\u590d\u7528 \u9ad8 \u7531\u53d1\u5e03\u8005\u63a7\u5236\uff0c\u5177\u6709\u6e05\u6dc5\u7684\u7cfb\u7edf\u529f\u80fd\u76ee\u6807\uff0c\u6613\u4e8e\u590d\u7528\uff0c\u8d28\u91cf\u7531\u53d1\u5e03\u8005\u4fdd\u8bc1\u3002","title":"Introduction"},{"location":"Software-quality/Reusability/#reusability","text":"","title":"Reusability"},{"location":"Software-quality/Reusability/#wikipedia#reusability","text":"","title":"wikipedia Reusability"},{"location":"Software-quality/Reusability/#wikipedia#code#reuse","text":"","title":"wikipedia Code reuse"},{"location":"Software-quality/Reusability/#simplicable#8#types#of#code#reuse","text":"","title":"simplicable 8 Types of  Code Reuse"},{"location":"Software-quality/Reusability/#what#code#reuse#is#and#why#we#use#it","text":"\u5728\u8f6f\u4ef6\u590d\u7528\u4e0a\uff0c\u4e00\u822c\u6709\u4e09\u4e2a\u5c42\u6b21\u7684\u590d\u7528\uff1a \u590d\u7528\u4ef7\u503c \u4f18\u7f3a\u70b9 \u6e90\u4ee3\u7801\u590d\u7528 \u4f4e \u7248\u672c\u63a7\u5236\u96be\uff0c\u590d\u7528\u4e4b\u540e\u5c31\u5404\u81ea\u7ef4\u62a4\u4e86\uff0c\u4f46\u4f7f\u7528\u8005\u53ef\u4ee5\u4e86\u89e3\u6240\u6709\u7ec6\u8282\uff0c\u53ef\u4ee5\u6309\u9700\u81ea\u884c\u6539\u8fdb\uff1b \u4e8c\u8fdb\u5236\u5e93 (\u63a7\u4ef6\u3001\u51fd\u6570\u5e93\u7b49)\u590d\u7528 \u4e2d \u53ef\u7531\u53d1\u5e03\u8005\u63a7\u5236\uff0c\u4f7f\u7528\u8005\u6709\u6539\u8fdb\u9700\u6c42\u65f6\uff0c\u9700\u8981\u53d1\u5e03\u8005\u53ca\u65f6\u54cd\u5e94\uff1b \u5b50\u7cfb\u7edf\u590d\u7528 \u9ad8 \u7531\u53d1\u5e03\u8005\u63a7\u5236\uff0c\u5177\u6709\u6e05\u6dc5\u7684\u7cfb\u7edf\u529f\u80fd\u76ee\u6807\uff0c\u6613\u4e8e\u590d\u7528\uff0c\u8d28\u91cf\u7531\u53d1\u5e03\u8005\u4fdd\u8bc1\u3002","title":"What Code Reuse is and Why We Use It"},{"location":"TODO-Software-analysis/","text":"","title":"Introduction"}]}